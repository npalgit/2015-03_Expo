<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PaXiNet4</name>
    </assembly>
    <members>
        <member name="T:Advosol.Paxi.XiListBase">
            <summary>
            This class contains the common list handling methods and data.
            The XiDataList, XiEventList, .. classes derive from this class.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.GetObjectInfo(System.UInt32)">
            <summary>
            Get object information by server alias.
            </summary>
            <param name="serverAlias">Server alias of the object.</param>
            <returns>Information about the object received from the server at add object to list.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.DefineList(Xi.Contracts.Constants.StandardListType,System.UInt32,System.UInt32,System.UInt32,System.Boolean,Xi.Contracts.Data.FilterSet)">
            <summary>
            Synchronically calls the server to create a data list of the requested type. 
            </summary>
            <param name="listType">The type of the list to be created.</param>
            <param name="clientId">The Client Id for this list. Used in callbacks to allow the client to identify this list. </param>
            <param name="updateRate">The requested update rate in milliseconds for the list. 
            The update rate indicates how often the server updates the values of elements in the list. A value of 0 indicates that 
            updating is exception-based. The server may negotiate this value, up or down as necessary to support its efficient operation.
            </param>
            <param name="bufferingRate">An optional-use parameter that indicates that the server is to buffer data updates, rather than overwriting them, until either 
            the time span defined by the buffering rate expires or the values are transmitted to the client in a callback or poll response. 
            If the time span expires, then the oldest value for a data object is discarded when a new value is received from the underlying system.<br/>
            The value of the bufferingRate is set to 0 to indicate that it is not to be used and that new values overwrite (replace) existing cached values.<br/>
            When used, this parameter contains the client-requested buffering rate, which the server may negotiate up or down, or to 0 if the 
            server does not support the buffering rate.<br/>
            The FeaturesSupported member of the StandardMib is used to indicate server support for the buffering rate.
            </param>      
            <param name="enableList">The list is created into either disabled or enabled state.</param>
            <param name="filterSet">The set of filters to be used to select the elements of the list.</param>
            <returns>The attributes created for the list.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.DefineList(Xi.Contracts.Constants.StandardListType,System.UInt32,System.UInt32,System.UInt32,System.Boolean,Xi.Contracts.Data.FilterSet,Advosol.Paxi.OnDefineListComplete,System.Object)">
            <summary>
            Asynchronically creates a list of data objects or alarms/events within the context. 
            </summary>
            <param name="listType">The type of the list to be created.</param>
            <param name="clientId">The Client Id for this list. Used in callbacks to allow the client to identify this list. </param>
            <param name="updateRate">The requested update rate in milliseconds for the list. 
            The update rate indicates how often the server updates the values of elements in the list. A value of 0 indicates that 
            updating is exception-based. The server may negotiate this value, up or down as necessary to support its efficient operation.
            </param>
            <param name="bufferingRate">An optional-use parameter that indicates that the server is to buffer data updates, rather than overwriting them, until either 
            the time span defined by the buffering rate expires or the values are transmitted to the client in a callback or poll response. 
            If the time span expires, then the oldest value for a data object is discarded when a new value is received from the underlying system.<br/>
            The value of the bufferingRate is set to 0 to indicate that it is not to be used and that new values overwrite (replace) existing cached values.<br/>
            When used, this parameter contains the client-requested buffering rate, which the server may negotiate up or down, or to 0 if the 
            server does not support the buffering rate.<br/>
            The FeaturesSupported member of the StandardMib is used to indicate server support for the buffering rate.
            </param>
            <param name="enableList">The list is created into either disabled or enabled state.</param>
            <param name="filterSet">The set of filters to be used to select the elements of the list.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.DeleteLists(System.Collections.Generic.List{System.UInt32})">
            <summary>
            Synchronically deletes a list. It does not, however, delete the elements of the list from the server.
            </summary>
            <param name="listIds">The identifiers for the lists to be deleted.</param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.DeleteLists(System.Collections.Generic.List{System.UInt32},Advosol.Paxi.OnDeleteListsComplete,System.Object)">
            <summary>
            Asynchronically deletes a list. It does not, however, delete the elements of the list from the server.
            </summary>
            <param name="listIds">The identifiers for the lists to be deleted.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.AddListToEndpoint(System.String)">
            <summary>
            Add this list to an endpoint synchronously.
            </summary>
            <param name="endpointId">A string value (GUID) that uniquely identifies the endpoint  
            to which the list is to be added.</param>
            <returns>The list identifier and result code if the add failed. Returns null on success.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.AddListToEndpoint(System.String,Advosol.Paxi.OnAddListToEndpointComplete,System.Object)">
            <summary>
            Add this list to an endpoint asynchronously.
            </summary>
            <param name="endpointId">Name of the endpoint.</param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.RemoveListFromEndpoint(System.String)">
            <summary>
            Synchronously removes this lists from an endpoint.
            </summary>
            <param name="endpointId">A string value (GUID) that uniquely identifies the endpoint  
            from which the list is to be removed.</param>
            <returns>Success/error code.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.RemoveListFromEndpoint(System.String,Advosol.Paxi.OnRemoveListsFromEndpointComplete,System.Object)">
            <summary>
            Asynchronously removes this lists from an endpoint.
            </summary>
            <param name="endpointId">A string value (GUID) that uniquely identifies the endpoint  
            from which the list is to be removed.</param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.AddDataObjectsToList(System.Collections.Generic.List{Advosol.Paxi.ListInstanceDef})">
            <summary>
            Add objects to a list with a synchronous server call.
            </summary>
            <param name="dataObjectsToAdd">Defines the data objects to add and their initial active state.</param>
            <returns>The list of results. The size and order of this list matches 
            the size and order of the objectsToAdd parameter.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.AddDataObjectsToList(System.Collections.Generic.List{Advosol.Paxi.ListInstanceDef},Advosol.Paxi.OnAddDataObjectsToListComplete,System.Object)">
            <summary>
            Add objects to a list with an asynchronous server call.
            </summary>
            <param name="dataObjectsToAdd">Defines the data objects to add and their initial active state.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.RemoveDataObjectsFromList(System.Collections.Generic.List{System.UInt32})">
            <summary>
            Removes members from a list with an synchronous server call.
            </summary>
            <param name="serverAliasesToDelete">The server aliases of the data objects to remove.</param>
            <returns> The list identifiers and result codes for data objects whose 
            removal failed. Returns null if all removals succeeded.
            </returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.RemoveDataObjectsFromList(System.Collections.Generic.List{System.UInt32},Advosol.Paxi.OnRemoveDataObjectsFromListComplete,System.Object)">
            <summary>
            Removes members from a list with an asynchronous server call.
            </summary>
            <param name="serverAliasesToDelete">The server aliases of the data objects to remove.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.EnableListUpdating(System.Boolean)">
            <summary>
            Synchronous server call to enable or disable updating of the entire 
            list. When this method is called, the enabled state of the list is changed, 
            but the enabled state of the individual elements of the list is unchanged.
            When a list is disabled, the server excludes it from participating in 
            callbacks and polls. However, at the option of the server, the server may continue 
            updating its cache for the elements of the list.
            </summary>
            <param name="enableUpdating">Indicates, when TRUE, that updating of the list is to be enabled,
            and when FALSE, that updating of the list is to be disabled. </param>
            <returns>The current list attributes.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.EnableListUpdating(System.Boolean,Advosol.Paxi.OnEnableListUpdatingComplete,System.Object)">
            <summary>
            Asynchronous server call to enable or disable updating of the entire 
            list. When this method is called, the enabled state of the list is changed, 
            but the enabled state of the individual elements of the list is unchanged.
            When a list is disabled, the server excludes it from participating in 
            callbacks and polls. However, at the option of the server, the server may continue 
            updating its cache for the elements of the list.
            </summary>
            <param name="enableUpdating">Indicates, when TRUE, that updating of the list is to be enabled,
            and when FALSE, that updating of the list is to be disabled. </param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.EnableListElementUpdating(System.Boolean,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Synchronically enables or disables the updating of individual elements of a list.
            If the server aliases parameter is null, then all elements of the list are enabled/disabled. 
            This call does not change the enabled state of the list itself.
            </summary>
            <param name="enableUpdating">Indicates, when TRUE, that updating of the list is to be enabled, 
            and when FALSE, that updating of the list is to be disabled. </param>
            <param name="serverAliases">The list of aliases for data objects of a list for which updating is to be enabled or disabled. 
            When this value is null updating all elements of the list are to be enabled/disabled. 
            In this case, however, the enable/disable state of the list itself is not changed.</param>
            <returns>If the serverAliases parameter was null, returns null if the server was able to successfully enable/disable the list 
            and all its elements. If not, throws an exception for event lists and for data lists, returns the client and server aliases 
            and result codes for the data objects that could not be enabled/disabled. <br/>
            If the serverAliases parameter was not null, returns null if the server was able to successfully enable/disable the data 
            objects identified by the serverAliases. If not, returns the client and server aliases and result codes 
            for the data objects that could not be enabled/disabled.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.EnableListElementUpdating(System.Boolean,System.Collections.Generic.List{System.UInt32},Advosol.Paxi.OnEnableListElementUpdatingComplete,System.Object)">
            <summary>
            Asynchronically enables or disables the updating of individual elements of a list.
            If the server aliases parameter is null, then all elements of the list are enabled/disabled. 
            This call does not change the enabled state of the list itself.
            </summary>
            <param name="enableUpdating">Indicates, when TRUE, that updating of the list is to be enabled, 
            and when FALSE, that updating of the list is to be disabled. </param>
            <param name="serverAliases">The list of aliases for data objects of a list for which updating is to be enabled or disabled. 
            When this value is null updating all elements of the list are to be enabled/disabled. 
            In this case, however, the enable/disable state of the list itself is not changed.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.ModifyListAttributes(System.Nullable{System.UInt32},System.Nullable{System.UInt32},Xi.Contracts.Data.FilterSet)">
            <summary>
            Synchronically changes the filters of a list. The new filters replace the old filters if they exist. 
            </summary>
            <param name="updateRate">List update or scan rate. The list will be modified to use this new rate. 
            Use GetListAttributes to obtain the current value of this parameter.
            Can be null if the call is only to change the filter.
            This argument is not handled by all servers and for all types of lists.</param>
            <param name="bufferingRate">The new buffering rate of the list.  The server will negotiate this rate to one 
            that it can support.  GetListAttributes can be used to obtain the current value of this parameter.  
            Null if the buffering rate is not to be updated.</param>
            <param name="filterSet">The new set of filters.
            This argument is not handled by all servers and for all types of lists.</param>
            <returns>The filters and result codes for the filters that could  
            not be set for the list. Returns null if all filters were set successfully.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.ModifyListAttributes(System.Nullable{System.UInt32},System.Nullable{System.UInt32},Xi.Contracts.Data.FilterSet,Advosol.Paxi.OnModifyListAttributesComplete,System.Object)">
            <summary>
            Asynchronically changes the filters of a list. The new filters replace the old filters if they exist. 
            </summary>
            <param name="updateRate">List update or scan rate. The list will be modified to use this new rate. 
            The requested update rate in milliseconds for the list. The update rate indicates how often the server updates the 
            values of elements in the list.  A value of 0 indicates that updating is exception-based. The server may negotiate 
            this value, up or down as necessary to support its efficient operation.<br/>
            Use GetListAttributes to obtain the current value of this parameter.</param>
            <param name="bufferingRate">The new buffering rate of the list.  The server will negotiate this rate to one 
            An optional-use parameter that indicates that the server is to buffer data updates, rather than overwriting them, until either 
            the time span defined by the buffering rate expires or the values are transmitted to the client in a callback or poll response.
            If the time span expires, then the oldest value for a data object is discarded when a new value is received from the underlying system.<br/>
            The value of the bufferingRate is set to 0 to indicate that it is not to be used and that new values overwrite (replace) existing cached values.
            </param>
            <param name="filterSet">The new set of filters.
            This argument is not handled by all servers and for all types of lists.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.GetListAttributes">
            <summary>
            Get the attributes of a list with a synchronous server call.
            </summary>
            <returns>The List Attributes</returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.GetListAttributes(Advosol.Paxi.OnGetListAttributesComplete,System.Object)">
            <summary>
            Get the attributes of a list with an asynchronous server call.
            </summary>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.TouchList">
            <summary>
            Synchronically calls the server to cause a list to be "touched".
            For lists that contain data objects, this method causes the server to update all data objects in the list, 
            mark them as changed, and then return them all to the client in the next callback.
            For lists that contain events, this method causes the server to mark all alarms/event in the list as changed, 
            and and then return them all to the client in the next callback.
            When wrapping an OPC DA Server the touch results in an Asyc Refresh request to the OPC DA Server. 
            The resulting On Data Change then results in a On Data Change to the Client.
            Touching applies to both Poll Read and On Data Change callbacks.
            </summary>
            <returns>Error/success code.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.TouchList(Advosol.Paxi.OnTouchListComplete,System.Object)">
            <summary>
            Asynchronically calls the server to cause a list to be "touched".
            For lists that contain data objects, this method causes the server to update all data objects in the list, 
            mark them as changed, and then return them all to the client in the next callback.
            For lists that contain events, this method causes the server to mark all alarms/event in the list as changed, 
            and and then return them all to the client in the next callback.
            When wrapping an OPC DA Server the touch results in an Asyc Refresh request to the OPC DA Server. 
            The resulting On Data Change then results in a On Data Change to the Client.
            Touching applies to both Poll Read and On Data Change callbacks.
            </summary>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.TouchDataObjects(System.Collections.Generic.List{System.UInt32})">
            <summary>
            The server is called synchronically to 'touch' one or more data objects of a list. 
            Data objects that are in the disabled state (see the EnableListElementUpdating() method) are not 
            affected by this method.<br/>
            This method cannot be used with event lists.
            Touching an enabled data object causes the server to update 
            the data object, mark it as changed (even if their values did not change), 
            and then return it to the client in the next callback or poll.
            </summary>
            <param name="serverAliasesToDelete">The server aliases for the data objects to touch.</param>
            <returns>The aliases and result codes of the data objects to be touched.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.TouchDataObjects(System.Collections.Generic.List{System.UInt32},Advosol.Paxi.OnTouchDataObjectsComplete,System.Object)">
            <summary>
            The server is called asynchronically to 'touch' one or more data objects of a list. 
            Data objects that are in the disabled state (see the EnableListElementUpdating() method) are not 
            affected by this method.<br/>
            This method cannot be used with event lists.
            Touching an enabled data object causes the server to update 
            the data object, mark it as changed (even if their values did not change), 
            and then return it to the client in the next callback or poll.
            </summary>
            <param name="serverAliasesToDelete">The server aliases of the data objects to remove.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.RenewAliases(System.Collections.Generic.List{Xi.Contracts.Data.AliasUpdate})">
            <summary>
            Synchronically calls the server to renew the client alias for a number of objects.
            Successful completion of this method invalidates the previous server alias, but not the previous client alias. 
            However, the server begins using the new client alias at its earliest opportunity and ceases using the previous client alias. 
            This behavior accommodates the race condition that may occur when this method is being processed by the server concurrently 
            with the publishing of data to the client. 
            </summary>
            <param name="newAliases">The list of aliases to be updated. Each AliasUpdate in the list contains the existing server alias 
            and new client alias for it.</param>
            <returns>The list of updated aliases. The size and order of this list matches the size and order of the listAliases parameter. 
            Each AliasResult in the list contains the new client alias from the request and its corresponding new server alias assigned by the server.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.RenewAliases(System.Collections.Generic.List{Xi.Contracts.Data.AliasUpdate},Advosol.Paxi.OnRenewAliasesComplete,System.Object)">
            <summary>
            Asynchronically calls the server to renew the client alias for a number of objects.
            Successful completion of this method invalidates the previous server alias, but not the previous client alias. 
            However, the server begins using the new client alias at its earliest opportunity and ceases using the previous client alias. 
            This behavior accommodates the race condition that may occur when this method is being processed by the server concurrently 
            with the publishing of data to the client. 
            </summary>
            <param name="newAliases">The list of aliases to be updated. Each AliasUpdate in the list contains the existing server alias 
            and new client alias for it.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.Passthrough(System.String,System.Int32,System.String,System.Byte[])">
            <summary>
            Synchronously calls the server to send a message to the server that the server delivers unmodified to the intended recipient.</summary>
            <param name="recipientId">The recipient identifier. The list of recipients is contained in the RecipientPassthroughs MIB element.</param>
            <param name="invokeId">
            A client-defined integer identifier for this invocation of the passthrough.  When
            used with asynchronous passthroughs, the server returns the invokeId with the response.  
            </param>
            <param name="passthroughName">The name of the passthrough message. 
            The list of passthroughs for a recipient is contained in the RecipientPassthroughs MIB element.</param>
            <param name="DataToSend">The Data To Send is just an array of bytes. No interpretation of the data is made by the Xi server. 
            This byte array is forwarded unaltered to the underlying system. 
            It is up to the client application to format this byte array in a valid format for the underlying system. </param>
            <returns>The Passthrough Result simply returns a Result value and a byte array as returned from the underlying system. 
            Again it is up to the client application to interpret this byte array.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.Passthrough(System.String,System.Int32,System.String,System.Byte[],Advosol.Paxi.OnPassthroughComplete,System.Object)">
            <summary>
            Asynchronously calls the server to send a message to the server that the server delivers unmodified to the intended recipient.</summary>
            <param name="recipientId">The recipient identifier. The list of recipients is contained in the RecipientPassthroughs MIB element.</param>
            <param name="invokeId">
            A client-defined integer identifier for this invocation of the passthrough.  When
            used with asynchronous passthroughs, the server returns the invokeId with the response.  
            </param>
            <param name="passthroughName">The name of the passthrough message. 
            The list of passthroughs for a recipient is contained in the RecipientPassthroughs MIB element.</param>
            <param name="DataToSend">The Data To Send is just an array of bytes. No interpretation of the data is made by the Xi server. 
            This byte array is forwarded unaltered to the underlying system. 
            It is up to the client application to format this byte array in a valid format for the underlying system. </param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.ChangeEndpointPreferencesRead(Advosol.Paxi.ContractEndpointPreferences)">
            <summary>
            Changes the IRead endpoint used by this list. The necessary server calls are executed synchronously.
            </summary>
            <param name="preference">The endpoint to be used can be identified by name or only the scheme and/or 
            the security level can be specified. The best fitted available endpoint is selected and used.</param>
            <returns>The description of the selected endpoint</returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.ChangeEndpointPreferencesRead(Advosol.Paxi.ContractEndpointPreferences,Advosol.Paxi.OnChangeEndpointPreferencesComplete,System.Object)">
            <summary>
            Changes the IRead endpoint used by this list. The necessary server calls are executed asynchronously.
            </summary>
            <param name="preference">The endpoint to be used can be identified by name or only the scheme and/or 
            the security level can be specified. The best fitted available endpoint is selected and used.</param>
            <returns>The description of the selected endpoint</returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.ChangeEndpointPreferencesWrite(Advosol.Paxi.ContractEndpointPreferences)">
            <summary>
            Changes the IWrite endpoint used by this list. The necessary server calls are executed synchronously.
            </summary>
            <param name="preference">The endpoint to be used can be identified by name or only the scheme and/or 
            the security level can be specified. The best fitted available endpoint is selected and used.</param>
            <returns>The description of the selected endpoint</returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.ChangeEndpointPreferencesWrite(Advosol.Paxi.ContractEndpointPreferences,Advosol.Paxi.OnChangeEndpointPreferencesComplete,System.Object)">
            <summary>
            Changes the IWrite endpoint used by this list. The necessary server calls are executed asynchronously.
            </summary>
            <param name="preference">The endpoint to be used can be identified by name or only the scheme and/or 
            the security level can be specified. The best fitted available endpoint is selected and used.</param>
            <returns>The description of the selected endpoint</returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.GetEndpointPreferences">
            <summary>
            This internal helper method returns the current communication preference definitions for this list. 
            </summary>
            <returns>Current communication preference definitions.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.prepareRMgtClient(Advosol.Paxi.ContractEndpointPreferences)">
            <summary>
            
            </summary>
            <param name="epPref"></param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.prepareReadClient(Advosol.Paxi.ContractEndpointPreferences)">
            <summary>
            
            </summary>
            <param name="epPref"></param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.prepareWriteClient(Advosol.Paxi.ContractEndpointPreferences)">
            <summary>
            
            </summary>
            <param name="epPref"></param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.preparePollClient(Advosol.Paxi.ContractEndpointPreferences)">
            <summary>
            
            </summary>
            <param name="epPref"></param>
        </member>
        <member name="M:Advosol.Paxi.XiListBase.prepareRCBClient(Advosol.Paxi.ContractEndpointPreferences)">
            <summary>
            
            </summary>
            <param name="epPref"></param>
        </member>
        <member name="P:Advosol.Paxi.XiListBase.UpdateRate">
            <summary>
            The update rate of this list.
            In callback mode this is the revised callback rate returnd in the SetCallback result. 
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiListBase.UpdateMode">
            <summary>
            The poll/callbacks update mode of this list.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiListBase.Attributes">
            <summary>
            The attributes of this list, as returned by the server in DefineList
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiListBase.UsedRMgtEndpoint">
            <summary>
            The endpoint being used for Resourcemanagement server calls.
            The client application can use this to get the details of the used endpoint/binding.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiListBase.UsedReadEndpoint">
            <summary>
            The endpoint being used for Read server calls.
            The client application can use this to get the details of the used endpoint/binding.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiListBase.UsedWriteEndpoint">
            <summary>
            The endpoint being used for Write server calls.
            The client application can use this to get the details of the used endpoint/binding.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiListBase.UsedSubsriptionEndpoint">
            <summary>
            The endpoint being used for Poll or RegisterForCallback server calls.
            The client application can use this to get the details of the used endpoint/binding.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.CommunicationPreferences">
            <summary>
            This class holds the user preferences for endpoint/binding parameters and usage.
            Lists can either select to use the endpoints defined in the XiServer or make 
            preference definitions for the list.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.EndpointPreferences">
            <summary>
            Class that holds the endpoint preference definitions.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.EndpointPreferences.ResourceMgt">
            <summary>
            Preferences for the ResourceManagement contract
            </summary>
        </member>
        <member name="P:Advosol.Paxi.EndpointPreferences.Read">
            <summary>
            Preferences for the Read contract
            </summary>
        </member>
        <member name="P:Advosol.Paxi.EndpointPreferences.Write">
            <summary>
            Preferences for the Write contract
            </summary>
        </member>
        <member name="P:Advosol.Paxi.EndpointPreferences.Subscribe">
            <summary>
            Preferences for the either the RegisterForCallbacks or Poll contract
            </summary>
        </member>
        <member name="P:Advosol.Paxi.EndpointPreferences.SubscribeMode">
            <summary>
            Determines if subscriptins are handled by callback or by polling.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.CommunicationPreferences.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Advosol.Paxi.CommunicationPreferences.Clone">
            <summary>
            Create a cloned object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Advosol.Paxi.CommunicationPreferences.RmgtUseServerChannel">
            <summary>
            If true then the endpoint preferences defined in the XiServer are used for ResourceManagement server access.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.CommunicationPreferences.ReadUseServerChannel">
            <summary>
            If true then the endpoint preferences defined in the XiServer are used for Read server access.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.CommunicationPreferences.WriteUseServerChannel">
            <summary>
            If true then the endpoint preferences defined in the XiServer are used for Write server access.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.CommunicationPreferences.SubscribeUseServerChannel">
            <summary>
            If true then the endpoint preferences defined in the XiServer are used for Poll/RegisterForCallbacks server access.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.ListInstanceDef">
            <summary>
            Instance definition class for AddObjectsToList
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ListInstanceDef.lid">
            <summary>
            This class identifies a data object to be added to a list and the initial enabled state.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ListInstanceDef.active">
            <summary>
            The object's initial enabled state.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.ListInstanceDef.#ctor(System.String,System.UInt32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="id">The Object Id for the object, typically obtained using the FindObjects() method, plus an optional 
            element identifier for elements of a constructed data type. </param>
            <param name="clientAlias">The client-assigned alias for the data object. Must be > 0. This alias is used to refer to the data 
            object within the context of the list to which it is added.</param>
            <param name="enable">The object's initial enabled state.</param>
        </member>
        <member name="T:Advosol.Paxi.ListRWAccessMode">
            <summary>
            Determines how the list isto be accessed.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ListRWAccessMode.none">
            <summary>
            No read/write access.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ListRWAccessMode.read">
            <summary>
            Read access required
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ListRWAccessMode.write">
            <summary>
            Write access required
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ListRWAccessMode.readWrite">
            <summary>
            Read and Write access required
            </summary>
        </member>
        <member name="T:Advosol.Paxi.SubscriptionUpdateMode">
            <summary>
            Determines how the subscription is updated.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.SubscriptionUpdateMode.none">
            <summary>
            No subscription. The list is only used with read/write access.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.SubscriptionUpdateMode.callback">
            <summary>
            The server makes callback when values of objects in the data list changed.
            Callbacks require a duplex WCF communication and are not available in all bindings.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.SubscriptionUpdateMode.poll">
            <summary>
            The subscription polls the datalist periodically.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.OnAddListToEndpointComplete">
            <summary>
            AddListToEndPoint asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">Identifiers and result codes for the lists whose 
            add failed. Null if all adds succeeded.</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnRemoveListsFromEndpointComplete">
            <summary>
            RemoveListsEndPoint asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">Success/error code</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnDefineListComplete">
            <summary>
            DefineList asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The attributes created for the list.</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnEnableListUpdatingComplete">
            <summary>
            EnableListUpdating asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="lattr">The current list attributes</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnDeleteListsComplete">
            <summary>
            DeleteLists asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The list identifiers and result codes for the lists whose 
            deletion failed. Null if all deletes succeeded. </param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnAddDataObjectsToListComplete">
            <summary>
            AddDataObjectsToList asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The list of results. The size and order of this list matches 
            the size and order of the objectsToAdd argument in the call.</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnRemoveDataObjectsFromListComplete">
            <summary>
            RemoveDataObjectsFromList asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The list identifiers and result codes for data objects whose 
            removal failed. Null if all removals succeeded.</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnEnableListElementUpdatingComplete">
            <summary>
            EnableListElementUpdating asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">If the serverAliases parameter was null, returns 
            null if the server was able to successfully enable/disable 
            the list and all its elements.  If not, throws an exception 
            for event lists and for data lists, returns the client and server 
            aliases and result codes for the data objects that could not be 
            enabled/disabled.  <br/> 
            If the serverAliases parameter was not null, returns null 
            if the server was able to successfully enable/disable the data 
            objects identified by the serverAliases.  If not, returns the 
            client and server aliases and result codes for the data objects 
            that could not be enabled/disabled. </param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnModifyListAttributesComplete">
            <summary>
            ModifyListAttributes asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The filters and result codes for the filters that could  
            not be set for the list. Null if all filters were set successfully.</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnGetListAttributesComplete">
            <summary>
            GetListAttributes asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The list of requested List Attributes. The size and order 
            of this list matches the size and order of the listAliases call argument.</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnTouchListComplete">
            <summary>
            TouchList asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The result code.</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnTouchDataObjectsComplete">
            <summary>
            TouchDataObjects asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The aliases and result codes of the data objects to be touched.</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnChangeEndpointPreferencesComplete">
            <summary>
            ChangeEndpointPreferencesXX asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The descritpion of the newly used endpoint.</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnRenewAliasesComplete">
            <summary>
            RenewAliases  asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">New aliases</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.WriteListValue">
            <summary>
            API class with values to write to the server.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.WriteListValue.ListAlias">
            <summary>
            Identifies the list that contains the data objects to write.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.WriteListValue.HistoricalValues">
            <summary>
            The list of data object values to write. Each data object 
            is identified by its server alias. When used to write 
            historical values using the WriteJournalData() method, 
            the timestamp is used to identify a specific journal 
            entry for the data object.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.ModificationAttributes">
            <summary>
            This class defines attributes that describe modifications 
            performed to a history value. 
            </summary>
        </member>
        <member name="T:Advosol.Paxi.DataValue">
            <summary>
            An Xi object value with value, status and timestamp.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.DataValue.#ctor">
            <summary>
            The default constructor. It creates a data value with a bad status.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.DataValue.#ctor(System.UInt32,System.Object)">
            <summary>
            The standard constructor that creates a data value 
            from the value and status. This constructor sets the 
            timestamp.
            </summary>
            <param name="statusCode">
            The status code associated with the value.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:Advosol.Paxi.DataValue.#ctor(System.UInt32,System.Int64,System.Object)">
            <summary>
            The standard constructor. It creates a data value 
            from a status code, timestamp, and value.
            </summary>
            <param name="statusCode">
            The status code associated with the value.
            </param>
            <param name="fileTimeUtc">
            The UTC timestamp in FileTime format.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:Advosol.Paxi.DataValue.#ctor(System.UInt32,System.DateTime,System.Object)">
            <summary>
            The standard constructor. It creates a data value 
            from a status code, timestamp, and value.
            </summary>
            <param name="statusCode">
            The status code associated with the value.
            </param>
            <param name="dateTimeUtc">
            The UTC timestamp in DateTime format.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:Advosol.Paxi.DataValue.Clone">
            <summary>
            Use this method to create a clone of this instance.
            </summary>
            <returns>
            The new DataValue.
            </returns>
        </member>
        <member name="P:Advosol.Paxi.DataValue.StatusCode">
            <summary>
            The 32-bit status associated with the value.  Status is formally defined by IEC 61804, "Function blocks (FB) for process control."
            </summary>
        </member>
        <member name="P:Advosol.Paxi.DataValue.TimeStamp">
            <summary>
            The timestamp as DateTime.  
            </summary>
        </member>
        <member name="P:Advosol.Paxi.DataValue.Value">
            <summary>
            The value. 
            </summary>
        </member>
        <member name="P:Advosol.Paxi.ModificationAttributes.ModificationTimeStamp">
            <summary>
            The time that the modification was performed.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.ModificationAttributes.ModificationType">
            <summary>
            The type of modification performed. 
            </summary>
        </member>
        <member name="P:Advosol.Paxi.ModificationAttributes.OperatorName">
            <summary>
            The name or other system-specific identifier of the 
            operator who performed the modification. 
            </summary>
        </member>
        <member name="T:Advosol.Paxi.ContextOptionsEnum">
            <summary>
            Context Options provides a set of flags that may be set as part 
            of the IResourceManagement.Initiate() method to allow for debug/tracing 
            and other options to be set for the client's context with the server.
            The implementation of ContextOptions is vendor-specific.<br/>
            Values below 0xFFFFFF (the low order 24-bits) are reserved. 
            Vendors may use the high order 8 bits.<br/>
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ContextOptionsEnum.NoOptions">
            <summary>
            No options are set for the Context.  
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ContextOptionsEnum.EnableEnhancedErrorInfo">
            <summary>
            ErrorInfo objects with non-empty ErrorMessages are enabled 
            for the Context.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ContextOptionsEnum.EnableMethodTrace">
            <summary>
            Enable tracing of method Xi Server method invocations
            for this context.  When en baled all calls to Xi Contract
            methods are recorded in the Windows event log.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ContextOptionsEnum.EnableDetailTrace">
            <summary>
            Enable tracing of internal method invocations. 
            Implementation is server dependent.  It is 
            intended to provide additional details to the
            method invocations logged by EnableMethodTrace.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ContextOptionsEnum.EnableErrorLogging">
            <summary>
            Enable the logging of error conditions that occur while
            the server is running.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ContextOptionsEnum.EnablePerfCounters">
            <summary>
            Performance counters are enabled for the Context.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ContextOptionsEnum.AllowDifferentClientIpAddress">
            <summary>
            Allows a ReInitiate() request to be issued from a 
            different IpAddress than that used by the previously  
            connected WCF client connection.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ContextOptionsEnum.UseServerOptions">
            <summary>
            Requests the server to use context options selected or 
            configured for the server.  How these options are selected by or 
            configured is server-specific.<br/>
            These options may include any of the defined context options 
            whose values are less than this option and may also include additional 
            server-specific options.  Selection of this option causes all of the 
            included context options to be used, even if they were not individually
            selected.<br/>
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ContextOptionsEnum.EnableDataAccess">
            <summary>
            Selectively enable access to the server for data.
            If one of the EnableAccessTo bits is not set,
            then then all types of access are enabled. 
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ContextOptionsEnum.EnableAlarmsAndEventsAccess">
            <summary>
            Connect to the server for Alarms and Events Access.
            If one of the EnableAccessTo bits is not set,
            then then all types of access are enabled. 
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ContextOptionsEnum.EnableJournalDataAccess">
            <summary>
            Connect to the server for Historical Data Access.
            If one of the EnableAccessTo bits is not set,
            then then all types of access are enabled. 
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ContextOptionsEnum.EnableJournalAlarmsAndEventsAccess">
            <summary>
            Connect to the server for Historical Alarms and Events Access.
            If one of the EnableAccessTo bits is not set,
            then then all types of access are enabled. 
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.ListCommPrefs.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.ListCommPrefs.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.ListCommPrefs.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.XiJournalListComponent">
            <summary>
            This component class presents one Xi event list.
            The list parameters are defined as properties can be configured either in the Visual Studio designer
            or in the applicaiton code.
            A set of objects can be configured and these objects are added to list in the server when the list is created.<br/>
            This component is associated with a XiServerComponent object the handles the basic server access features.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.XiJournalListComponent.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiJournalListComponent.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiJournalListComponent.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiJournalListComponent.#ctor(System.ComponentModel.IContainer)">
            <summary>
            This constructor is called from the Visual Studio Designer created code.
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiJournalListComponent.#ctor">
            <summary>
            This constructor is only for Visual Studio Designer mode.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiJournalListComponent.Create">
            <summary>
            Synchronously create the list in the server.
            The list is defined, attached to endpoints and the defined objects are added.
            The server is connected, if it's not already.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiJournalListComponent.Create(Advosol.Paxi.OnComplete,System.Object)">
            <summary>
            Asynchronously creates the associated list in the server.
            The list is defined, attached to endpoints and the defined objects are added.
            The server is connected, if it's not already connected.
            </summary>
            <param name="onComplete">Handler to be called on completion.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiJournalListComponent.Terminate(Advosol.Paxi.OnComplete,System.Object)">
            <summary>
            The list is deleted in the server and disposed in the component.
            </summary>
            <param name="onComplete">Handler to be called on completion.</param>
            <param name="asycState"></param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiJournalListComponent.Cleanup">
            <summary>
            Remove the instance, e.g. after the server context timed out
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiJournalListComponent.AddObjects(System.Collections.Generic.List{Advosol.Paxi.Components.XiInstanceDef})">
            <summary>
            Objects can be added to the list at run-time.
            Each object is identified by the settings in the XiInstanceDef object that is specific to this component.
            In the Xi server the object is identified by the InstanceId only.<br/>
            Objects that were successfully added in the server are added to the dictionaries of objects
            supported by this component.
            
            </summary>
            <param name="newObjects">InstanceDef object for each object to be added.
            For adding the object to the data list in the Xi server only InstanceId and active state need to be defined.
            The clientAlias is auto initialized with a unique int value. This value is returned in the result together with 
            a server alias int value. Other InstanceDef fields need not be initialized if they are not used for 
            features of this component.</param>
            <returns>The list of results returned from the Xi server. The size and order of this list matches 
            the size and order of the newObjects argument.</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiJournalListComponent.RemoveObjects(System.Collections.Generic.List{Advosol.Paxi.Components.XiInstanceDef})">
            <summary>
            The specified objects are removed from the lists in this component and the associated data list in the server.
            </summary>
            <param name="remObjects">The list of identifiers of the objects to be removed.</param>
            <returns> The list identifiers and result codes for data objects whose 
            removal failed. Returns null if all removals succeeded.
            </returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiJournalListComponent.ReadJournalDataForTimeInterval(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.String[])">
            <summary>
            Synchronously reads the historical values that fall between a start and end time for one or more data objects within a specific data journal list.
            </summary>
            <param name="firstTimeStamp">The filter that specifies the first or beginning (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is used to determine if the returned data should include data values the occur exactly at the 
            first or second time stamp. If the equals operator is specified then values that occur at the first and second time stamp 
            will be included in the sample set. Any other operator will not include first or second time stamped values. <br/>
            The helper method TimeCriterion() can be used to build FilterCriterion argument.</param>
            <param name="secondTimeStamp">The filter that specifies the second or ending (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is not used.<br/>
            The helper method TimeCriterion() can be used to build FilterCriterion argument.</param>
            <param name="maxValuesPerAlias">The maximum number of data sample value to be returned per alias.</param>
            <param name="aliasDefs">The array of aliase names for the data objects whose historical values are to be read. </param>
            <returns>The list of requested historical values, or the reason they could not be read.</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiJournalListComponent.ReadJournalDataForTimeInterval(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.String[],Advosol.Paxi.OnReadJournalDataComplete,System.Object)">
            <summary>
            Asynchronously reads the historical values that fall between a start and end time for one or more data objects within a specific data journal list.
            </summary>
            <param name="firstTimeStamp">The filter that specifies the first or beginning (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is used to determine if the returned data should include data values the occur exactly at the 
            first or second time stamp. If the equals operator is specified then values that occur at the first and second time stamp 
            will be included in the sample set. Any other operator will not include first or second time stamped values.<br/>
            The helper method TimeCriterion() can be used to build FilterCriterion argument.</param>
            <param name="secondTimeStamp">The filter that specifies the second or ending (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is not used.<br/>
            The helper method TimeCriterion() can be used to build FilterCriterion argument.</param>
            <param name="maxValuesPerAlias">The maximum number of data sample value to be returned per alias.</param>
            <param name="aliasDefs">The array of aliase names for the data objects whose historical values are to be read. </param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiJournalListComponent.ReadJournalDataAtSpecificTimes(System.Collections.Generic.List{System.DateTime},System.String[])">
            <summary>
            Synchronously read the historical values at specific times for one or more data objects within a specific data journal list.
            </summary>
            <param name="timestamps">Identifies the timestamps of historical values to be returned for each of the requested data objects.</param>
            <param name="aliasDefs">The array of aliase names for the data objects whose historical values are to be read. </param>
            <returns>The list of requested historical values, or the reason they could not be read.</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiJournalListComponent.ReadJournalDataAtSpecificTimes(System.Collections.Generic.List{System.DateTime},System.String[],Advosol.Paxi.OnReadJournalDataComplete,System.Object)">
            <summary>
            Asynchronously read the historical values at specific times for one or more data objects within a specific data journal list.
            </summary>
            <param name="timestamps">Identifies the timestamps of historical values to be returned for each of the requested data objects.</param>
            <param name="aliasDefs">The array of aliase names for the data objects whose historical values are to be read. </param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiJournalListComponent.ReadJournalDataChanges(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.String[])">
            <summary>
            Synchronously reads the modified historical values that fall between a start and end time for one or more data objects within a specific data journal list.
            </summary>
            <param name="firstTimeStamp">The filter that specifies the first or beginning (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is used to determine if the returned data should include data values the occur exactly at the 
            first or second time stamp. If the equals operator is specified then values that occur at the first and second time stamp 
            will be included in the sample set. Any other operator will not include first or second time stamped values. <br/>
            The helper method TimeCriterion() can be used to build FilterCriterion argument.</param>
            <param name="secondTimeStamp">The filter that specifies the second or ending (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is not used.<br/>
            The helper method TimeCriterion() can be used to build FilterCriterion argument.</param>
            <param name="numValuesPerAlias">The maximum number of data sample value to be returned per alias.</param>
            <param name="aliasDefs">The list of server aliases for the data objects whose historical values are to be read. </param>
            <returns>The list of requested historical values, or the reason they could not be read.</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiJournalListComponent.ReadJournalDataChanges(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.String[],Advosol.Paxi.OnReadJournalDataComplete,System.Object)">
            <summary>
            Asynchronously reads the modified historical values that fall between a start and end time for one or more data objects within a specific data journal list.
            </summary>
            <param name="firstTimeStamp">The filter that specifies the first or beginning (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is used to determine if the returned data should include data values the occur exactly at the 
            first or second time stamp. If the equals operator is specified then values that occur at the first and second time stamp 
            will be included in the sample set. Any other operator will not include first or second time stamped values.<br/>
            The helper method TimeCriterion() can be used to build FilterCriterion argument.</param>
            <param name="secondTimeStamp">The filter that specifies the second or ending (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is not used.<br/>
            The helper method TimeCriterion() can be used to build FilterCriterion argument.</param>
            <param name="numValuesPerAlias">The maximum number of data sample value to be returned per alias.</param>
            <param name="aliasDefs">The list of server aliases for the data objects whose historical values are to be read. </param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiJournalListComponent.TimeCriterion(System.DateTime,System.Boolean)">
            <summary>
            Helper method to create a FilterCriterion object for a date/time.
            </summary>
            <param name="timestampUtc">Date/time definition.</param>
            <param name="includeBounds">True if bounds should be included.</param>
            <returns>Created FilterCriterion object</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiJournalListComponent.TimeCriterion(System.String,System.Boolean)">
            <summary>
            Helper method to create a FilterCriterion object for a time expression string.
            </summary>
            <param name="timeExpression">Date/time definition.</param>
            <param name="includeBounds">True if bounds should be included.</param>
            <returns>Created FilterCriterion object</returns>
        </member>
        <member name="P:Advosol.Paxi.Components.XiJournalListComponent.xiServer">
            <summary>
            The Form object that uses this control and requires synchronization.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiJournalListComponent.Settings">
            <summary>
            Settings for the XiJournalList
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiJournalListComponent.ListBase">
            <summary>
            The underlying class that handles that server access for managing the list in the server.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiJournalListComponent.MathLibrary">
            <summary>
            The server supported math library for calculations
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiJournalListComponent.Properties">
            <summary>
            The server supported journal properties (attributes)
            </summary>
        </member>
        <member name="T:Advosol.Paxi.XiServer">
            <summary>
            <B>This class handles the basic Xi server access. 
            Each instance of this class is associated with a context in the Xi server.
            The features include: endpoint determination, initiate server context and basic server management.
            The Xi server features for managing data lists are in classes for each data list type.</B>
            </summary>
            <summary>
            <B>This is the main API class. It handles the basic Xi server access. 
            Each instance of this class is associated with a context in the Xi server.
            The features include: endpoint determination, initiate server context and basic server management.
            The Xi server features for managing data lists are in classes for each data list type.</B>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Advosol.Paxi.XiServer.#ctor(System.String,System.Object)" -->
        <member name="M:Advosol.Paxi.XiServer.#ctor(System.String,System.String,System.Object)">
            <summary>
            Constructs an instance for access to an Xi server or a single wrapped server.
            The URL defines the server to be accessed. The prefixes "da:", "ae:", "hda:" or "ua:" indicates
            that the access is to be handled through the embedded wrapper Xi server.
            </summary>
            <param name="srvUrl">URL of the server discovery endpoint.</param>
            <param name="appName">Name of the application.</param>
            <param name="syncObject">Windows Forms based object if the server callbacks need to be user thread synchronized.
            All completion and notification handlers are called thread synchronyzed with this object.
            If null then the completion handlers are called without thread synchronization.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.#ctor(Advosol.Paxi.Endpoints,System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="endpoints">Endpoints of another XiServer object that already made the endpoint discovery.</param>
            <param name="appName">Name of the application.</param>
            <param name="syncObject">Windows Forms based object if the server callback needs to be user thread synchronized.
            All completion and notification handlers are called thread synchronyzed with this object.
            If null then the completion handler is called without thread synchronization.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Advosol.Paxi.XiServer.HandleTraceLog(System.String)">
            <summary>
            The method is called from the wrapper to pass trace notification to the application.
            </summary>
            <param name="txt">Message</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.Dispose">
            <summary>
            Clean up and disconnect from the server.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.XiServer.StartKeepAlive(System.UInt32)">
            <summary>
            Start a timer that makes a server access when the interval time expires without the application 
            having made a server access.
            </summary>
            <param name="intervallSeconds">Interval length in seconds.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.DefineWrappedServer(Advosol.Paxi.WrappedServerType,System.String,System.String,System.String,Advosol.Paxi.UserCredentials)">
            <summary>
            Define a classic OPC or UA server that is to be accessed through the embedded wrapper for this Xi server instance.<br/>
            One server instance can handle up to one server for data access, journal (historical) and events.<br/>
            The wrapped server definitions are used only when the ServerUrl property is null. Otherwise the ServerUrl Xi server is accessed.
            </summary>
            <param name="type">The type of the wrapped server</param>
            <param name="name">Name of the server that can be used in FindObjects to select the server to be searched.</param>
            <param name="serverID">Server ProgID or URL for UA servers.</param>
            <param name="machine">Network name of the machine OPC server.</param>
            <param name="credentials">Optional user name / password access vredentials.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.GetServerDiscoveryUrl(Xi.Contracts.Data.ServerEntry)">
            <summary>
            Get the URL of the ServerDiscovery endpoint from the discovered server information.
            </summary>
            <param name="serverInfo">Discovered server information</param>
            <returns>Endpoint URL or "" if no endpoint found</returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.DiscoverEndpoints">
            <summary>
            Retrieve the endpoints configured in the server with synchronous server calls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.DiscoverEndpoints(Advosol.Paxi.OnDiscoverEndpointsComplete,System.Object)">
            <summary>
            Retrieve the endpoints configured in the server with asynchronous server calls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.Initiate">
            <summary>
            The server is called to create a connection context.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.XiServer.Initiate(Advosol.Paxi.OnComplete,System.Object)">
            <summary>
            This method is used to establish a context between the client and the server. 
            The server must authenticate the client when this method is called. 
            Once created, the context is capable of multiplexing concurrent WCF connections to Xi endpoints. In some cases, 
            there may be more than one instance of the Read or Write endpoints (see the CreateEndpoint() method for 
            more information about endpoints.
            In case the server endpoints have not yet been discovered then they are before the server Initiate call is made.
            </summary>
            <param name="onInitateComplete">Completion notification handler</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.ReInitiate">
            <summary>
            The server is synchronously called to reinitate an existing context after a failure of the underlying WCF connection.
            The server must reauthenticate the client when this method is called.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.XiServer.ReInitiate(Advosol.Paxi.OnComplete,System.Object)">
            <summary>
            The server is asynchronously called to reinitate an existing context after a failure of the underlying WCF connection.
            The server must reauthenticate the client when this method is called.
            </summary>
            <param name="onReInitateComplete">Completion notification handler</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.AddDataList(System.Boolean,System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet,Advosol.Paxi.CommunicationPreferences,Advosol.Paxi.ListRWAccessMode,Advosol.Paxi.SubscriptionUpdateMode)">
            <summary>
            Creates a XiDataList object and synchronically call the server to create a data list. 
            </summary>
            <param name="enableList">The list is created into either disabled or enabled state.</param>
            <param name="updateRate">The requested update rate in milliseconds for the list. 
            The update rate indicates how often the server updates the values of elements in the list. A value of 0 indicates that 
            updating is exception-based. The server may negotiate this value, up or down as necessary to support its efficient operation.
            </param>
            <param name="bufferingRate">An optional-use parameter that indicates that the server is 
            to buffer data updates, rather than overwriting them, until either the time span defined by the buffering rate expires or the values 
            are transmitted to the client in a callback or poll response. If the time span expires, then the oldest value for a data object is 
            discarded when a new value is received from the underlying system.
            The value of the bufferingRate is set to 0 to indicate  that it is not to be used and that new values overwrite (replace) existing 
            cached values.<br/>
            When used, this parameter contains the client-requested buffering rate, which the server may negotiate up or down, or to 0 if the 
            server does not support the buffering rate.<br/>
            The FeaturesSupported member of the StandardMib is used to indicate server support for the buffering rate.
            </param>
            <param name="filterSet">The set of filters to be used to select the elements of the list.
            The deadband for data change reporting is defined as a filter.</param>
            <param name="endpoints">Communication preferences for the list. These definitions are used in the selection 
            of the endpoints used in the server communication for this list. If null (Nothing) then the preference definitions
            of the server object are used.</param>
            <param name="rwMode">Defines the read/write access requirements. The list is added to the required endpoints.</param>
            <param name="subscrMode">Determines how subscriptions are handled, either with callbacks or with polling.</param>
            <returns>The created XiDataList object.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.AddDataList(System.Boolean,System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet,Advosol.Paxi.CommunicationPreferences,Advosol.Paxi.ListRWAccessMode,Advosol.Paxi.SubscriptionUpdateMode,Advosol.Paxi.OnDefineListComplete,System.Object)">
            <summary>
            Creates a XiDataList object and asynchronically call the server to create a data list. 
            </summary>
            <param name="enableList">The list is created into either disabled or enabled state.</param>
            <param name="updateRate">The requested update rate in milliseconds for the list. 
            The update rate indicates how often the server updates the values of elements in the list. A value of 0 indicates that 
            updating is exception-based. The server may negotiate this value, up or down as necessary to support its efficient operation. 
            </param>
            <param name="bufferingRate">An optional-use parameter that indicates that the server is 
            to buffer data updates, rather than overwriting them, until either the time span defined by the buffering rate expires or the values 
            are transmitted to the client in a callback or poll response. If the time span expires, then the oldest value for a data object is 
            discarded when a new value is received from the underlying system.
            The value of the bufferingRate is set to 0 to indicate  that it is not to be used and that new values overwrite (replace) existing 
            cached values.<br/>
            When used, this parameter contains the client-requested buffering rate, which the server may negotiate up or down, or to 0 if the 
            server does not support the buffering rate.<br/>
            The FeaturesSupported member of the StandardMib is used to indicate server support for the buffering rate.
            </param>
            <param name="filterSet">The set of filters to be used to select the elements of the list.
            The deadband for data change reporting is defined as a filter.</param>
            <param name="endpoints">Communication preferences for the list. These definitions are used in the selection 
            of the endpoints used in the server communication for this list. If null (Nothing) then the preference definitions
            of the server object are used.</param>
            <param name="rwMode">Determines the read/write access to the list.</param>
            <param name="subscrMode">Determines how subscriptions are handled, either with callbacks or with polling.</param>
            <param name="onCreated">Method that is to be called with the result upon completion of the asynchronous server call.
            The success/error result of the server access is passed as an argument to the completion handler.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
            <returns>The created XiDataList object. The success/error code of the DefineList server access will be 
            passed to the caller as an argument of the completion handler.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.AddEventList(System.Boolean,System.UInt32,Xi.Contracts.Data.FilterSet,Advosol.Paxi.CommunicationPreferences,Advosol.Paxi.ListRWAccessMode,Advosol.Paxi.SubscriptionUpdateMode)">
            <summary>
            Creates a XiEventList object and synchronically calls the server to create an event list. 
            </summary>
            <param name="enableList">The list is created into either disabled or enabled state.</param>
            <param name="updateRate">The requested update rate in milliseconds for the list. 
            The update rate indicates how often the server updates the values of elements in the list. A value of 0 indicates that 
            updating is exception-based. The server may negotiate this value, up or down as necessary to support its efficient operation. </param>
            <param name="filterSet">The set of filters to be used to select the elements of the list.</param>
            <param name="endpoints">Communication preferences for the list. These definitions are used in the selection 
            of the endpoints used in the server communication for this list. If null (Nothing) then the preference definitions
            of the server object are used.</param>
            <param name="rwMode">Determines the read/write access to the list.</param>
            <param name="subscrMode">Determines how subscriptions are handled, either with callbacks or with polling.</param>
            <returns>The created XiEventList object.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.AddEventList(System.Boolean,System.UInt32,Xi.Contracts.Data.FilterSet,Advosol.Paxi.CommunicationPreferences,Advosol.Paxi.ListRWAccessMode,Advosol.Paxi.SubscriptionUpdateMode,Advosol.Paxi.OnDefineListComplete,System.Object)">
            <summary>
            Creates a XiEventList object and asynchronically calls the server to create an event list. 
            </summary>
            <param name="enableList">The list is created into either disabled or enabled state.</param>
            <param name="updateRate">The requested update rate in milliseconds for the list. 
            The update rate indicates how often the server updates the values of elements in the list. A value of 0 indicates that 
            updating is exception-based. The server may negotiate this value, up or down as necessary to support its efficient operation. </param>
            <param name="filterSet">The set of filters to be used to select the elements of the list.</param>
            <param name="endpoints">Communication preferences for the list. These definitions are used in the selection 
            of the endpoints used in the server communication for this list. If null (Nothing) then the preference definitions
            of the server object are used.</param>
            <param name="rwMode">Determines the read/write access to the list.</param>
            <param name="subscrMode">Determines how subscriptions are handled, either with callbacks or with polling.</param>
            <param name="onCreated">Method that is to be called with the result upon completion of the asynchronous server call.
            The success/error result of the server access is passed as an argument to the completion handler.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
            <returns>The created XiEventList object. The success/error code of the DefineList server access will be 
            passed to the caller as an argument of the completion handler.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.AddJournalList(Xi.Contracts.Data.FilterSet,Advosol.Paxi.CommunicationPreferences,Advosol.Paxi.ListRWAccessMode)">
            <summary>
            Creates an XiJournalList object and synchronically calls the server to create the list. 
            </summary>
            <param name="filterSet">The set of filters to be used to select the elements of the list.</param>
            <param name="endpoints">Communication preferences for the list. These definitions are used in the selection 
            of the endpoints used in the server communication for this list. If null (Nothing) then the preference definitions
            of the server object are used</param>
            <param name="rwMode">Determines the read/write access to the list.</param>
            <returns>The created XiJournalList object.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.AddJournalList(Xi.Contracts.Data.FilterSet,Advosol.Paxi.CommunicationPreferences,Advosol.Paxi.ListRWAccessMode,Advosol.Paxi.OnDefineListComplete,System.Object)">
            <summary>
            Creates an XiJournalList object and asynchronically calls the server to create the list. 
            </summary>
            <param name="filterSet">The set of filters to be used to select the elements of the list.</param>
            <param name="endpoints">Communication preferences for the list. These definitions are used in the selection 
            of the endpoints used in the server communication for this list. If null (Nothing) then the preference definitions
            of the server object are used</param>
            <param name="rwMode">Determines the read/write access to the list.</param>
            <param name="onCreated">Method that is to be called with the result upon completion of the asynchronous server call.
            The success/error result of the server access is passed as an argument to the completion handler.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
            <returns>The created XiJournalList object. The success/error code of the DefineList server access will be 
            passed to the caller as an argument of the completion handler.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.EventJournalList(Xi.Contracts.Data.FilterSet,Advosol.Paxi.CommunicationPreferences,Advosol.Paxi.ListRWAccessMode)">
            <summary>
            Creates a XiEventJournalList object and synchronically calls the server to create an event journal list. 
            </summary>
            <param name="filterSet">The set of filters to be used to select the elements of the list.
            The deadband for data change reporting is defined as a filter.</param>
            <param name="endpoints">Communication preferences for the list. These definitions are used in the selection 
            of the endpoints used in the server communication for this list. If null (Nothing) then the preference definitions
            of the server object are used.</param>
            <param name="rwMode">Defines the read/write access requirements. The list is added to the required endpoints.</param>
            <returns>The created XiDataList object.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.AddJournalEventList(Xi.Contracts.Data.FilterSet,Advosol.Paxi.CommunicationPreferences,Advosol.Paxi.ListRWAccessMode,Advosol.Paxi.OnDefineListComplete,System.Object)">
            <summary>
            Creates a XiEventJournalList object and asynchronically calls the server to create an event journal list. 
            </summary>
            <param name="filterSet">The set of filters to be used to select the elements of the list.
            The deadband for data change reporting is defined as a filter.</param>
            <param name="endpoints">Communication preferences for the list. These definitions are used in the selection 
            of the endpoints used in the server communication for this list. If null (Nothing) then the preference definitions
            of the server object are used.</param>
            <param name="rwMode">Determines the read/write access to the list.</param>
            <param name="onCreated">Method that is to be called with the result upon completion of the asynchronous server call.
            The success/error result of the server access is passed as an argument to the completion handler.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
            <returns>The created XiDataList object. The success/error code of the DefineList server access will be 
            passed to the caller as an argument of the completion handler.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.DiscoverServers(System.String)">
            <summary>
            Synchronically retrieves the list of servers the client is authorized to discover. 
            </summary>
            <param name="url">Server discovery URL of the Xi server discovery server.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.DiscoverServers(System.String,Advosol.Paxi.OnDiscoverServersComplete,System.Object)">
            <summary>
            Asynchronically retrieves the list of servers the client is authorized to discover. 
            This method is available on Xi discovery servers.
            </summary>
            <param name="url">Server URL of the Xi server discovery server.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.DiscoverServerInfo(System.String)">
            <summary>
            Synchronically get the description of the server and endpoint informnation complementing the MEX information. 
            </summary>
            <param name="url">Server URL of the Xi server discovery server.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.DiscoverServerInfo(System.String,Advosol.Paxi.OnDiscoverServerInfoComplete,System.Object)">
            <summary>
            Asynchronically get the description of the server and endpoint informnation complementing the MEX information. 
            </summary>
            <param name="url">Server URL of the Xi server discovery server.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.Identify">
            <summary>
            Get server description synchronously.
            </summary>
            <returns>Server description.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.Identify(Advosol.Paxi.OnIdentifyComplete,System.Object)">
            <summary>
            Get server description asynchronously.
            </summary>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.GetStatus">
            <summary>
            Get server status synchronously.
            </summary>
            <returns>Server status information.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.GetStatus(Advosol.Paxi.OnGetStatusComplete,System.Object)">
            <summary>
            Get server status asynchronously.
            </summary>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.LookupResultCodes(System.Collections.Generic.List{System.UInt32})">
            <summary>
            Get server description synchronously.
            </summary>
            <returns>Server description.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.LookupResultCodes(System.Collections.Generic.List{System.UInt32},Advosol.Paxi.OnLookupResultCodesComplete,System.Object)">
            <summary>
            Get error description asynchronously from server.
            </summary>
            <param name="resultCodes">Error codes to be looked up.</param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.GetStandardMib">
            <summary>
            Get Standard MIB synchronously.
            </summary>
            <returns>Standard MIB</returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.GetStandardMib(Advosol.Paxi.OnGetStandardMibComplete,System.Object)">
            <summary>
            Get Standard MIB asynchronously.
            </summary>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.GetVendorMib(System.Collections.Generic.List{Xi.Contracts.Data.InstanceId})">
            <summary>
            Get Vendor MIB synchronously.
            </summary>
            <param name="vendorMibObjectIds">Requested MIB objects</param>
            <returns>Vendor MIB objects</returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.GetVendorMib(System.Collections.Generic.List{Xi.Contracts.Data.InstanceId},Advosol.Paxi.OnGetVendorMibComplete,System.Object)">
            <summary>
            Get Vendor MIB asynchronously.
            </summary>
            <param name="vendorMibObjectIds">Requested MIB objects</param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.FindObjects(Xi.Contracts.Data.FindCriteria,System.UInt32)">
            <summary>
            Synchronically find objects in the server. 
            The client uses the findCriteria parameter to identify a starting branch and a set of filter criteria. 
            It also specifies the maximum number of objects to return. 
            The server examines the objects that are children of the specified branch and selects those that match the filter criteria. 
            Note that "children" are objects whose root paths can be created by appending their names to the path used to identify the starting branch.
            The object attributes of the selected objects are returned to the client. 
            The number returned by the server is limited by the number specified in the maxReturn parameter. The WCF buffer sizes need to be configured
            for the size of the result with the allowed number of objects.
            PaXi makes repeat server calls to retrieve all objects in the find result.
            </summary>
            <param name="findCriteria">Starting path and filters to be used.</param>
            <param name="maxReturn">The maximum number of objects the server may return in one call.
            Specify a large number for high performance or a lower number to reduse the WCF buffer size requirements.</param>
            <returns>The browsed objects.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.FindObjects(Xi.Contracts.Data.FindCriteria,System.UInt32,Advosol.Paxi.OnFindObjectsComplete,System.Object)">
            <summary>
            Asynchronically find objects in the server.
            The client uses the findCriteria parameter to identify a starting branch and a set of filter criteria. 
            It also specifies the maximum number of objects to return. 
            The server examines the objects that are children of the specified branch and selects those that match the filter criteria. 
            Note that "children" are objects whose root paths can be created by appending their names to the path used to identify the starting branch.
            The object attributes of the selected objects are returned to the client. 
            The number returned by the server is limited by the number specified in the maxReturn parameter. The WCF buffer sizes need to be configured
            for the size of the result with the allowed number of objects.
            PaXi makes repeat server calls to retrieve all objects in the find result.
            </summary>
            <param name="findCriteria">Starting path and filters to be used.</param>
            <param name="maxReturn">The maximum number of objects the server may return in one call.
            Specify a large number for high performance or a lower number to reduse the WCF buffer size requirements.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.FindObjects(Xi.Contracts.Data.ObjectPath,System.UInt32)">
            <summary>
            Synchronically find objects in the server without filtering. 
            The client uses the findCriteria parameter to identify a starting branch and a set of filter criteria. 
            It also specifies the maximum number of objects to return. 
            The server examines the objects that are children of the specified branch and selects those that match the filter criteria. 
            Note that "children" are objects whose root paths can be created by appending their names to the path used to identify the starting branch.
            The object attributes of the selected objects are returned to the client. 
            The number returned by the server is limited by the number specified in the maxReturn parameter. The WCF buffer sizes need to be configured
            for the size of the result with the allowed number of objects.
            PaXi makes repeat server calls to retrieve all objects in the find result.
            </summary>
            <param name="path">Starting path for the find.</param>
            <param name="maxReturn">The maximum number of objects the server may return in one call.
            Specify a large number for high performance or a lower number to reduse the WCF buffer size requirements.</param>
            <returns>The browsed objects.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.FindObjects(Xi.Contracts.Data.ObjectPath,System.UInt32,Advosol.Paxi.OnFindObjectsComplete,System.Object)">
            <summary>
            Asynchronically find objects in the server without filtering.
            The client uses the findCriteria parameter to identify a starting branch and a set of filter criteria. 
            It also specifies the maximum number of objects to return. 
            The server examines the objects that are children of the specified branch and selects those that match the filter criteria. 
            Note that "children" are objects whose root paths can be created by appending their names to the path used to identify the starting branch.
            The object attributes of the selected objects are returned to the client. 
            The number returned by the server is limited by the number specified in the maxReturn parameter. The WCF buffer sizes need to be configured
            for the size of the result with the allowed number of objects.
            PaXi makes repeat server calls to retrieve all objects in the find result.
            </summary>
            <param name="path">Starting path for the find.</param>
            <param name="maxReturn">The maximum number of objects the server may return in one call.
            Specify a large number for high performance or a lower number to reduse the WCF buffer size requirements.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.FindObjectAttributes(Xi.Contracts.Data.InstanceId,System.Boolean)">
            <summary>
            Synchronically find objects.
            </summary>
            <param name="id">InstanceId of the object to be queried.</param>
            <param name="includeChildren">If true, the attributes of the child objects are also returned.</param>
            <returns>The browsed objects.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.FindObjectAttributes(Xi.Contracts.Data.InstanceId,System.Boolean,Advosol.Paxi.OnFindObjectsComplete,System.Object)">
            <summary>
            Asynchronically find objects.
            </summary>
            <param name="id">InstanceId of the object to be queried.</param>
            <param name="includeChildren">If true, the attributes of the child objects are also returned.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.GetAlarmSummary(Xi.Contracts.Data.InstanceId)">
            <summary>
            Get Alarm Summary synchronously.
            </summary>
            <returns>Server description.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.GetAlarmSummary(Xi.Contracts.Data.InstanceId,Advosol.Paxi.OnGetAlarmSummaryComplete,System.Object)">
            <summary>
            Get error description asynchronously from server.
            </summary>
            <param name="resultCodes">Error codes to be looked up.</param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.EnableAlarms(System.Boolean,System.Boolean,System.Collections.Generic.List{Xi.Contracts.Data.InstanceId})">
            <summary>
            This method is used to enable or disable alarms for a specified area or event source.
            It throws a fault if the requested operation cannot be performed successfully.
            </summary>
            <param name="enableFlag">
            This flag indicates, when TRUE, that alarms are to be enabled, and when FALSE, that they 
            are to be disabled.
            </param>
            <param name="areaFlag">
            This flag indicates, when TRUE, that the eventContainerIds parameter contains a list of 
            InstanceIds for areas, and when FALSE, that it contains a list of InstanceIds for event sources.
            </param>
            <param name="eventContainerIds">
            The InstanceId for the area or the event source for which alarms are to be enabled or disabled.
            </param>
            <returns>The list of result codes.  Standard result code values are defined by the 
            Xi.Contracts.Constants.XiFaultCodes class. There is one result code for each eventContainerId.
            </returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.EnableAlarms(System.Boolean,System.Boolean,System.Collections.Generic.List{Xi.Contracts.Data.InstanceId},Advosol.Paxi.OnEnableAlarmsComplete,System.Object)">
            <summary>
            This method is used to enable or disable alarms for a specified area or event source.
            </summary>
            <param name="enableFlag">
            This flag indicates, when TRUE, that alarms are to be enabled, and when FALSE, that they 
            are to be disabled.
            </param>
            <param name="areaFlag">
            This flag indicates, when TRUE, that the eventContainerIds parameter contains a list of 
            InstanceIds for areas, and when FALSE, that it contains a list of InstanceIds for event sources.
            </param>
            <param name="eventContainerIds">
            The InstanceId for the area or the event source for which alarms are to be enabled or disabled.
            </param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.GetAlarmsEnabledState(System.Boolean,System.Collections.Generic.List{Xi.Contracts.Data.InstanceId})">
            <summary>
            This method synchronlusly returns the enable state for a specified area or event source.
            It throws a fault if the requested operation cannot be performed successfully.
            </summary>
            <param name="areaFlag">
            This flag indicates, when TRUE, that the eventContainerIds parameter contains a list of 
            InstanceIds for areas, and when FALSE, that it contains a list of InstanceIds for event sources.</param>
            <param name="eventContainerId">
            The InstanceId for the area or the event source for which alarms are to be enabled or disabled.
            </param>
            <returns>An object with the enabled state and result code for each requested InstanceId.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Advosol.Paxi.XiServer.GetAlarmsEnabledState(System.Boolean,System.Collections.Generic.List{Xi.Contracts.Data.InstanceId},Advosol.Paxi.OnGetAlarmsEnabledStateComplete,System.Object)" -->
        <member name="M:Advosol.Paxi.XiServer.SetCallback(System.UInt32,System.TimeSpan)">
            <summary>
            Synchronous server call to set or change the keepAliveSkipCount and callbackRate. The first time this method is 
            invoked server obtains the callback interface from the client.  
            Therefore, this method must be called at least once for each callback endpoint to enable the server to make the callbacks.
            On successful return the CallbackKeepAliveSkipCount and CallbackRate properties are set to the server revised values.
            </summary>
            <param name="keepAliveSkipCount">
            The client-requested keepAliveSkipCount for lists that the server may negotiate 
            up or down. The keepAliveSkipCount indicates the number of consecutive 
            UpdateRate cycles for a list that occur with nothing to send before an empty 
            callback is sent to indicate a keep-alive message. For example, if the value 
            of this parameter is 1, then a keep-alive callback will be sent each UpdateRate 
            cycle for each list assigned to the callback for which there is nothing to send. 
            A value of 0 indicates that keep-alives are not to be sent for any list assigned to the callback.
            </param>
            <param name="callbackRate">
            The callback rate indicates the maximum time between callbacks that are sent 
            to the client. The server may negotiate this value up or down, but a null value or 
            a value representing 0 time is not valid.  <br/>
            If there are no callbacks to be sent containing data or events for this period 
            of time, an empty callback will be sent as a keep-alive.  The timer for this 
            time-interval starts when the SetCallback() response is returned by the server.  <br/>
            </param>
            <returns>
            The results of the operation, including the negotiated keep-alive skip count and callback rate.
            </returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.SetCallback">
            <summary>
            Synchronous server call to set or change the keepAliveSkipCount and callbackRate to the values defined in the properties. 
            On successful return the CallbackKeepAliveSkipCount and CallbackRate properties are set to the server revised values.
            The first time this method is invoked server obtains the callback interface from the client.  
            Therefore, this method must be called at least once for each callback endpoint to enable the server to make the callbacks.
            </summary>
            <returns>
            The results of the operation, including the negotiated keep-alive skip count and callback rate.
            </returns>
        </member>
        <member name="M:Advosol.Paxi.XiServer.SetCallback(Advosol.Paxi.OnSetCallbackComplete,System.Object)">
            <summary>
            Asynchronous server call to set or change the keepAliveSkipCount and callbackRate to the values defined in the properties. 
            On successful return the CallbackKeepAliveSkipCount and CallbackRate properties are set to the server revised values.
            The first time this method is invoked server obtains the callback interface from the client.  
            Therefore, this method must be called at least once for each callback endpoint to enable the server to make the callbacks.
            On successful return the CallbackKeepAliveSkipCount and CallbackRate properties are set to the server revised values.
            </summary>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiServer.SetCallback(System.UInt32,System.TimeSpan,Advosol.Paxi.OnSetCallbackComplete,System.Object)">
            <summary>
            Asynchronous server call to set or change the keepAliveSkipCount and callbackRate. The first time this method is 
            invoked server obtains the callback interface from the client.  
            Therefore, this method must be called at least once for each callback endpoint to enable the server to make the callbacks.
            On successful return the CallbackKeepAliveSkipCount and CallbackRate properties are set to the server revised values.
            </summary>
            <param name="keepAliveSkipCount">
            The client-requested keepAliveSkipCount for lists that the server may negotiate 
            up or down. The keepAliveSkipCount indicates the number of consecutive 
            UpdateRate cycles for a list that occur with nothing to send before an empty 
            callback is sent to indicate a keep-alive message. For example, if the value 
            of this parameter is 1, then a keep-alive callback will be sent each UpdateRate 
            cycle for each list assigned to the callback for which there is nothing to send. 
            A value of 0 indicates that keep-alives are not to be sent for any list assigned to the callback.
            </param>
            <param name="callbackRate">
            The callback rate indicates the maximum time between callbacks that are sent 
            to the client. The server may negotiate this value up or down, but a null value or 
            a value representing 0 time is not valid.  <br/>
            If there are no callbacks to be sent containing data or events for this period 
            of time, an empty callback will be sent as a keep-alive.  The timer for this 
            time-interval starts when the SetCallback() response is returned by the server.  <br/>
            </param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="P:Advosol.Paxi.XiServer.WrappedDAserver">
            <summary>
            Access definition for the Data Access server accessed through the embedded wrapper
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.WrappedHDAserver">
            <summary>
            Access definition for the Journal server accessed through the embedded wrapper
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.WrappedAEserver">
            <summary>
            Access definition for the Event server accessed through the embedded wrapper
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.ServerUrl">
            <summary>
            The Server Discovery URL associated with this Xi server object.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.ServerID">
            <summary>
            Server identifier (URL) as specified in the constructor
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.UserName">
            <summary>
            Client credentials user name that may be required for basic authentication in the server access.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.Password">
            <summary>
            Client credentials password that may be required for basic authentication in the server access.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.Domain">
            <summary>
            Client credentials domain name that may be required for basic authentication in the server access.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.ClientCertificateName">
            <summary>
            Name of the Client Certificate for certificate mode authentication of the server access.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.ServerCertificateName">
            <summary>
            Name of the Server Certificate for certificate mode authentication of the server access.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.ContextTimeout">
            <summary>
            Server context timeout in ms.
            The server releases the context when there is no client access for this time span.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.CallbackRate">
            <summary>
            Server callback rate in ms.
            The callback rate indicates the maximum time between callbacks that are sent to the client. The server may negotiate this value up or down, 
            but a null value or a value representing 0 time is not valid.<br/>
            If there are no callbacks to be sent containing data or events for this period of time, an empty callback will be sent as a keep-alive.  
            In the server the timer for this time-interval starts when the SetCallback() response is returned.<br/>
            These callbacks are independent from lists and happen even if no lists are defined.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.CallbackKeepAliveSkipCount">
            <summary>
            The client-requested keepAliveSkipCount for lists that the server may negotiate up or down. 
            The keepAliveSkipCount indicates the number of consecutive UpdateRate cycles for a list that occur with nothing to send before an empty 
            callback is sent to indicate a keep-alive message. For example, if the value of this parameter is 1, then a keep-alive callback will be sent 
            each UpdateRate cycle for each list assigned to the callback for which there is nothing to send. 
            A value of 0 indicates that keep-alives are not to be sent for any list assigned to the callback. 
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.IsConnected">
            <summary>
            Current connect state.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.ApplicationName">
            <summary>
            The description of the application that created this object.
            This name is passed to the server in the Initiate() call;
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.WorkstationName">
            <summary>
            The machine name of the client application.
            This name is passed to the server in the Initiate() call;
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.LocaleID">
            <summary>
            Preferred locale ID.
            This ID is passed to the server in the Initiate() call;
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.CallbackReestablishInterval">
            <summary>
            Callback re-establish interval.
            If a callback timeout is detected then the connection is tried to re-estsblish at this interval.
            The default is 3000 ms.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.CallbackMissingCounter">
            <summary>
            Is incremented each time a missing callback is detected. 
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.ServerInfo">
            <summary>
            The server description information read from the server
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.ContextOptions">
            <summary>
            Context options used in Initiate() to select the server diagnostic options.
            On return this is updated with the server revised options.
            How the server handles the option definitions is server specific.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.ReInitiateKey">
            <summary>
            The key retruned by Initiate() to be used in ReInitiaste().
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.EndpointPreferencesRMgt">
            <summary>
            The preferred communication options for the ResourceManagement contract.
            The endpoint name, the binding scheme ("http", "https", "net.tcp", "net.pipe") and secure yes/no
            can be defined. 
            Of the server configured endpoints the one that best matches the definitions will be used.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.EndpointPreferencesRead">
            <summary>
            The preferred communication options for the Read contract.
            The endpoint name, the binding scheme ("http", "https", "net.tcp", "net.pipe") and secure yes/no
            can be defined. 
            Of the server configured endpoints the one that best matches the definitions will be used.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.EndpointPreferencesWrite">
            <summary>
            The preferred communication options for the Write contract.
            The endpoint name, the binding scheme ("http", "https", "net.tcp", "net.pipe") and secure yes/no
            can be defined. 
            Of the server configured endpoints the one that best matches the definitions will be used.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.EndpointPreferencesPoll">
            <summary>
            The preferred communication options for the Poll contract.
            The endpoint name, the binding scheme ("http", "https", "net.tcp", "net.pipe") and secure yes/no
            can be defined. 
            Of the server configured endpoints the one that best matches the definitions will be used.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.EndpointPreferencesRCB">
            <summary>
            The preferred communication options for the RegisterForCallbacks contract.
            The endpoint name, the binding scheme ("http", "https", "net.tcp", "net.pipe") and secure yes/no
            can be defined. 
            Of the server configured endpoints the one that best matches the definitions will be used.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.UsedRMgtEndpoint">
            <summary>
            The endpoint being used for Resourcemanagement server calls.
            The client application can use this to get the details of the used endpoint/binding.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.EndPoints">
            <summary>
            Get the list of discovered endpoints
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.LicenseRegistryKey">
            <summary>
            Registry key with the Paxi license cipher text in a string value.
            The value name is freely selectable and can contain the license version number as user info.<br/>
            If used, then it must be assigned before the XiServer object is constructed.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.LicenseRegistryKeyWrapper">
            <summary>
            Registry key with the PaxiWrapper license cipher text in a string value.
            The value name is freely selectable and can contain the license version number as user info.<br/>
            If used, then it must be assigned before the XiServer object is constructed.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.LicenseText">
            <summary>
            The Paxi license cipher text. If used, then it must be assigned before the XiServer object is constructed.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.LicenseTextWrapper">
            <summary>
            The PaxiWrapper license cipher text.  If used, then it must be assigned before the XiServer object is constructed.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.LicensedFeatures">
            <summary>
            Returns a list of the licensed features.<br/>
            The Xi server URL or the wrapped servers must be defined before this property is accessed.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.UaDaNamespaceURIs">
            <summary>
            NamespaceURIs that match the NodeIDs persisted in the client application.
            If the application doesn't set this property before Connect() then the URIs are tried to be
            loaded from the file app.url.XML in the same directory as the app.exe executable.
            url is the UA server URL without the xxx://
            This XML file is auto-generated at Connect() if the application didn't set this property.
            </summary>
        </member>
        <member name="E:Advosol.Paxi.XiServer.MissingCallback">
            <summary>
            This event is raised when a missing callback is detected. 
            </summary>
        </member>
        <member name="E:Advosol.Paxi.XiServer.Notifications">
            <summary>
            Notification of internal internal events.
            The user handler call is UI thread synchronized if a sync object was defined in the XiServer constructor.
            </summary>
        </member>
        <member name="E:Advosol.Paxi.XiServer.TraceNotification">
            <summary>
            Trace Notifcation. The client can define an event handler if it wants to get trace notifications.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiServer.TraceMask">
            <summary>
            Mask for TraceNotification events<br/>
            Error            0x001    Xi and UA errors<br/>
            Info             0x002    Xi and UA warnings and info<br/>
            StackTrace       0x004    UA stack trace info<br/>
            Service          0x008    UA service trace<br/>
            ServiceDetail    0x010    UA service details<br/>
            Operation        0x020    UA operation trace<br/>
            OperationDetail  0x040    UA operation details<br/>
            StartStop        0x080    Xi method call trace<br/>
            UA - COM         0x100    UA COM Wrapper trace<br/>
            Security         0x200    UA security related info<br/>
            </summary>
        </member>
        <member name="T:Advosol.Paxi.XiServer.OnTraceEvent">
            <summary>
            Process UA trace message
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Advosol.Paxi.JournalValuesHelper">
            <summary>
            Helper class for the conversion of journal data.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.JournalValuesHelper.Create(Advosol.Paxi.WriteListValue)">
            <summary>
            Construct from List object
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Advosol.Paxi.JournalValuesHelper.ValueObjects(Xi.Contracts.Data.JournalDataValues)">
            <summary>
            The history values of the data instance as a list of DataValue instead of the array communication objects.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.JournalValuesHelper.PropertyValueObjects(Xi.Contracts.Data.JournalDataPropertyValue)">
            <summary>
            The history attributes of the data instance as a list of DataValue instead of the array communication objects.  
            </summary>
        </member>
        <member name="M:Advosol.Paxi.JournalValuesHelper.ModificationAttributesObjects(Xi.Contracts.Data.JournalDataChangedValues)">
            <summary>
            The attributes that describe the changes to the HistoricalValues element of 
            the JournalDataReturnValues base class. 
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.DiscoverServersDlg">
            <summary>
            
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.DiscoverServersDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.DiscoverServersDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.DiscoverServersDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.FilterAddObject.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.FilterAddObject.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.FilterAddObject.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.XiJournalList">
            <summary>
            This class contains the Xi server access methods that operate on a DataList  
            </summary>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.#ctor(Advosol.Paxi.XiServer,Advosol.Paxi.CommunicationPreferences,Advosol.Paxi.ListRWAccessMode)">
            <summary>
            The XiDataList object is associated with an XiServer object.
            It can either communicate with the channels created in the XiServer object or create channels for the
            endpoints specified for this list.
            </summary>
            <param name="server">Server communication object</param>
            <param name="endpoints">defines the endpoints/channesl to be used.</param>
            <param name="rwMode">Determines the read/write access to the list.</param>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.DefineList(System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            Synchronically creates a list of data objects or alarms/events within the context.  The list is set into ENABLED state.
            </summary>
            <param name="clientId">The Client Id for this list. Used in callbacks to allow the client to identify this list. </param>
            <param name="filterSet">The set of filters to be used to select the elements of the list.</param>
            <returns>The attributes created for the list.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.DefineList(System.UInt32,Xi.Contracts.Data.FilterSet,Advosol.Paxi.OnDefineListComplete,System.Object)">
            <summary>
            Asynchronically creates a list of data objects or alarms/events within the context. The list is set into ENABLED state.
            </summary>
            <param name="clientId">The Client Id for this list. Used in callbacks to allow the client to identify this list. </param>
            <param name="filterSet">The set of filters to be used to select the elements of the list.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.Dispose">
            <summary>
            The data list is terminated. The associated datalist is deleted in the xiSrv.
            The server is called asynchronously but the response is ignored.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.Dispose(Advosol.Paxi.OnComplete,System.Object)">
            <summary>
            The data list is terminated. The associated datalist is deleted in the xiSrv.
            </summary>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.
            If null (Nothing) then no handler is called at completion.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.ReadJournalDataAtSpecificTimes(System.Collections.Generic.List{System.DateTime},System.Collections.Generic.List{System.UInt32})">
            <summary>
            Synchronously read the historical values at specific times for one or more data objects within a specific data journal list.
            </summary>
            <param name="timestamps">Identifies the timestamps of historical values to be returned for each of the requested data objects.</param>
            <param name="serverAliases">The list of server aliases for the data objects whose historical values are to be read.</param>
            <returns>The list of requested historical values, or the reason they could not be read.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.ReadJournalDataAtSpecificTimes(System.Collections.Generic.List{System.DateTime},System.Collections.Generic.List{System.UInt32},Advosol.Paxi.OnReadJournalDataComplete,System.Object)">
            <summary>
            Asynchronously read the historical values at specific times for one or more data objects within a specific data journal list.
            </summary>
            <param name="timestamps">Identifies the timestamps of historical values to be returned for each of the requested data objects.</param>
            <param name="serverAliases">The list of server aliases for the data objects whose historical values are to be read.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.ReadCalculatedJournalData(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.TimeSpan,System.Collections.Generic.List{Xi.Contracts.Data.AliasAndCalculation})">
            <summary>
            
            </summary>
            <param name="firstTimeStamp"></param>
            <param name="secondTimeStamp"></param>
            <param name="calculationPeriod"></param>
            <param name="serverAliasesAndCalculations"></param>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.ReadCalculatedJournalData(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.TimeSpan,System.Collections.Generic.List{Xi.Contracts.Data.AliasAndCalculation},Advosol.Paxi.OnReadJournalDataComplete,System.Object)">
            <summary>
            
            </summary>
            <param name="firstTimeStamp"></param>
            <param name="secondTimeStamp"></param>
            <param name="calculationPeriod"></param>
            <param name="serverAliasesAndCalculations"></param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.ReadJournalDataForTimeInterval(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Synchronously reads the historical values that fall between a start and end time for one or more data objects within a specific data journal list.
            </summary>
            <param name="firstTimeStamp">The filter that specifies the first or beginning (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is used to determine if the returned data should include data values the occur exactly at the 
            first or second time stamp. If the equals operator is specified then values that occur at the first and second time stamp 
            will be included in the sample set. Any other operator will not include first or second time stamped values. <br/>
            The helper method TimeCriterion() can be used to build FilterCriterion argument.</param>
            <param name="secondTimeStamp">The filter that specifies the second or ending (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is not used.<br/>
            The helper method TimeCriterion() can be used to build FilterCriterion argument.</param>
            <param name="numValuesPerAlias">The maximum number of data sample value to be returned per alias.</param>
            <param name="serverAliases">The list of server aliases for the data objects whose historical values are to be read. </param>
            <returns>The list of requested historical values, or the reason they could not be read.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.ReadJournalDataForTimeInterval(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32},Advosol.Paxi.OnReadJournalDataComplete,System.Object)">
            <summary>
            Asynchronously reads the historical values that fall between a start and end time for one or more data objects within a specific data journal list.
            </summary>
            <param name="firstTimeStamp">The filter that specifies the first or beginning (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is used to determine if the returned data should include data values the occur exactly at the 
            first or second time stamp. If the equals operator is specified then values that occur at the first and second time stamp 
            will be included in the sample set. Any other operator will not include first or second time stamped values.<br/>
            The helper method TimeCriterion() can be used to build FilterCriterion argument.</param>
            <param name="secondTimeStamp">The filter that specifies the second or ending (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is not used.<br/>
            The helper method TimeCriterion() can be used to build FilterCriterion argument.</param>
            <param name="numValuesPerAlias">The maximum number of data sample value to be returned per alias.</param>
            <param name="serverAliases">The list of server aliases for the data objects whose historical values are to be read. </param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.ReadJournalDataNext(System.UInt32)">
            <summary>
            Synchronous server call to retrieve an in-sequence subset of the 
            historical values selected by the last IRead_ReadJournalDataForTimeInterval() 
            call issued by the client on this client context.  This method is used 
            when the number of values to be returned for one or more aliases 
            exceeds the number specified by the numValuesPerAlias parameter of the 
            IRead_ReadJournalDataForTimeInterval() method. <br/>
            The client may have to reissue this call multiple times to 
            receive all historical values for all aliases.  The client may specify a new numValuesPerAlias with each call to 
            this method to better optimize its performance.<br/>
            The server is responsible for maintaining the list of requested aliases for which values remain, and the timestamp of 
            the last value sent to the client for each alias.
            </summary>
            <param name="numValuesPerAlias"> The maximum number of data sample values to be returned per alias. </param>
            <returns>
            The next set of remaining values for each alias.  If the number of values 
            returned for any one alias is less than numValuesPerAlias, then there are 
            no additional values to return to the client for that alias. If, however, 
            the number returned for any alias is equal to numValuesPerAlias, then the 
            client should issue a ReadJournalDataNext() to retrieve any remaining values.
            </returns>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.ReadJournalDataNext(System.UInt32,Advosol.Paxi.OnReadJournalDataComplete,System.Object)">
            <summary>
            Asynchronous server call to retrieve an in-sequence subset of the 
            historical values selected by the last IRead_ReadJournalDataForTimeInterval() 
            call issued by the client on this client context.  This method is used 
            when the number of values to be returned for one or more aliases 
            exceeds the number specified by the numValuesPerAlias parameter of the 
            IRead_ReadJournalDataForTimeInterval() method. <br/>
            The client may have to reissue this call multiple times to receive all historical values for all aliases.  The client may specify 
            a new numValuesPerAlias with each call to this method to better optimize its performance. <br/>
            The server is responsible for maintaining the list of requested aliases for which values remain, and the timestamp of the last value 
            sent to the client for each alias.
            </summary>
            <param name="numValuesPerAlias"> The maximum number of data sample values to be returned per alias. </param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.ReadJournalDataChanges(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Synchronously reads the modified historical values that fall between a start and end time for one or more data objects within a specific data journal list.
            </summary>
            <param name="firstTimeStamp">The filter that specifies the first or beginning (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is used to determine if the returned data should include data values the occur exactly at the 
            first or second time stamp. If the equals operator is specified then values that occur at the first and second time stamp 
            will be included in the sample set. Any other operator will not include first or second time stamped values. <br/>
            The helper method TimeCriterion() can be used to build FilterCriterion argument.</param>
            <param name="secondTimeStamp">The filter that specifies the second or ending (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is not used.<br/>
            The helper method TimeCriterion() can be used to build FilterCriterion argument.</param>
            <param name="numValuesPerAlias">The maximum number of data sample value to be returned per alias.</param>
            <param name="serverAliases">The list of server aliases for the data objects whose historical values are to be read. </param>
            <returns>The list of requested historical values, or the reason they could not be read.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.ReadJournalDataChanges(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32},Advosol.Paxi.OnReadJournalDataComplete,System.Object)">
            <summary>
            Asynchronously reads the modified historical values that fall between a start and end time for one or more data objects within a specific data journal list.
            </summary>
            <param name="firstTimeStamp">The filter that specifies the first or beginning (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is used to determine if the returned data should include data values the occur exactly at the 
            first or second time stamp. If the equals operator is specified then values that occur at the first and second time stamp 
            will be included in the sample set. Any other operator will not include first or second time stamped values.<br/>
            The helper method TimeCriterion() can be used to build FilterCriterion argument.</param>
            <param name="secondTimeStamp">The filter that specifies the second or ending (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is not used.<br/>
            The helper method TimeCriterion() can be used to build FilterCriterion argument.</param>
            <param name="numValuesPerAlias">The maximum number of data sample value to be returned per alias.</param>
            <param name="serverAliases">The list of server aliases for the data objects whose historical values are to be read. </param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.ReadJournalDataChangesNext(System.UInt32)">
            <summary>
            Synchronous server call to retrieve an in-sequence subset of the 
            historical values selected by the last IRead_ReadJournalDataForTimeInterval() 
            call issued by the client on this client context.  This method is used 
            when the number of values to be returned for one or more aliases 
            exceeds the number specified by the numValuesPerAlias parameter of the 
            IRead_ReadJournalDataForTimeInterval() method. <br/>
            The client may have to reissue this call multiple times to 
            receive all historical values for all aliases.  The client may specify a new numValuesPerAlias with each call to 
            this method to better optimize its performance.<br/>
            The server is responsible for maintaining the list of requested aliases for which values remain, and the timestamp of 
            the last value sent to the client for each alias.
            </summary>
            <param name="numValuesPerAlias"> The maximum number of data sample values to be returned per alias. </param>
            <returns>
            The next set of remaining values for each alias.  If the number of values 
            returned for any one alias is less than numValuesPerAlias, then there are 
            no additional values to return to the client for that alias. If, however, 
            the number returned for any alias is equal to numValuesPerAlias, then the 
            client should issue a ReadJournalDataNext() to retrieve any remaining values.
            </returns>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.ReadJournalDataChangesNext(System.UInt32,Advosol.Paxi.OnReadJournalDataChangesComplete,System.Object)">
            <summary>
            Asynchronous server call to retrieve an in-sequence subset of the 
            historical values selected by the last IRead_ReadJournalDataChangesForTimeInterval() 
            call issued by the client on this client context.  This method is used 
            when the number of values to be returned for one or more aliases 
            exceeds the number specified by the numValuesPerAlias parameter of the 
            IRead_ReadJournalDataChangesForTimeInterval() method. <br/>
            The client may have to reissue this call multiple times to receive all historical values for all aliases.  The client may specify 
            a new numValuesPerAlias with each call to this method to better optimize its performance. <br/>
            The server is responsible for maintaining the list of requested aliases for which values remain, and the timestamp of the last value 
            sent to the client for each alias.
            </summary>
            <param name="numValuesPerAlias"> The maximum number of data sample values to be returned per alias. </param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.ReadJournalDataProperties(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.TypeId})">
            <summary>
            Asynchronously reads the historical values that fall between a start and end time for one or more data objects within a specific data journal list.
            </summary>
            <param name="firstTimeStamp">The filter that specifies the first or beginning (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is used to determine if the returned data should include data values the occur exactly at the 
            first or second time stamp. If the equals operator is specified then values that occur at the first and second time stamp 
            will be included in the sample set. Any other operator will not include first or second time stamped values. </param>
            <param name="secondTimeStamp">The filter that specifies the second or ending (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is not used.</param>
            <param name="serverAlias">The server alias for the data objects whose properties are to be read.</param>
            <param name="propertiesToRead">The identifiers of the properties to be read.</param>
            <returns>The list of requested historical values, or the reason they could not be read.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.ReadJournalDataProperties(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.TypeId},Advosol.Paxi.OnReadJournalDataPropertiesComplete,System.Object)">
            <summary>
            Asynchronously reads the historical values that fall between a start and end time for one or more data objects within a specific data journal list.
            </summary>
            <param name="firstTimeStamp">The filter that specifies the first or beginning (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is used to determine if the returned data should include data values the occur exactly at the 
            first or second time stamp. If the equals operator is specified then values that occur at the first and second time stamp 
            will be included in the sample set. Any other operator will not include first or second time stamped values. </param>
            <param name="secondTimeStamp">The filter that specifies the second or ending (of returned list) timestamp for values to be returned. 
            Valid operands include the Timestamp (UTC) and OpcHdaTimestampStr constants defined by the FilterOperand class. 
            The FilterOperand Operator is not used.</param>
            <param name="serverAlias">The server alias for the data objects whose properties are to be read.</param>
            <param name="propertiesToRead">The identifiers of the properties to be read.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.WriteJournalData(Xi.Contracts.Data.ModificationType,System.Collections.Generic.List{Advosol.Paxi.WriteListValue})">
            <summary>
            Synchronously calls the server to modify historical data values. 
            The modification type parameter indicates the type of modification to perform. 
            </summary>
            <param name="modificationType">Indicates the type of modification to perform.</param>
            <param name="valuesToWrite">The list of historical values to write. 
            Each is identified by its list id, its server alias, and its timestamp.</param>
            <returns>The list of identifiers and error codes for each data object whose write failed. Returns null if all writes succeeded.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.WriteJournalData(Xi.Contracts.Data.ModificationType,System.Collections.Generic.List{Advosol.Paxi.WriteListValue},Advosol.Paxi.OnWriteJournalDataComplete,System.Object)">
            <summary>
            Asynchronously calls the server to modify historical data values. 
            The modification type parameter indicates the type of modification to perform. 
            </summary>
            <param name="modificationType">Indicates the type of modification to perform.</param>
            <param name="valuesToWrite">The list of historical values to write. 
            Each is identified by its list id, its server alias, and its timestamp.</param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.TimeCriterion(System.DateTime,System.Boolean)">
            <summary>
            Helper method to create a FilterCriterion object for a date/time.
            </summary>
            <param name="timestampUtc">Date/time definition.</param>
            <param name="includeBounds">True if bounds should be included.</param>
            <returns>Created FilterCriterion object</returns>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.TimeCriterion(System.String,System.Boolean)">
            <summary>
            Helper method to create a FilterCriterion object for a time expression string.
            </summary>
            <param name="timeExpression">Date/time definition.</param>
            <param name="includeBounds">True if bounds should be included.</param>
            <returns>Created FilterCriterion object</returns>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.GetDataJournalOptions">
            <summary>
            Synchronously read the Standard MIB from the server and return the DataJournalOptions information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.XiJournalList.GetDataJournalOptions(Advosol.Paxi.OnGetDataJournalOptionsComplete,System.Object)">
            <summary>
            Asynchronously read the Standard MIB from the server and return the DataJournalOptions information.
            </summary>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="P:Advosol.Paxi.XiJournalList.SyncNotification">
            <summary>
            Callback thread synchronization object.
            Is initialized with the XiServer sync object.
            The user can overwrite e.g. with null if for this list no sync is necessary.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiJournalList.ClientListID">
            <summary>
            
            </summary>
        </member>
        <member name="T:Advosol.Paxi.OnReadJournalDataComplete">
            <summary>
            ReadJournalData asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The list of requested historical values, or the reason they could not be read. </param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnReadJournalDataChangesComplete">
            <summary>
            ReadJournalDataChanges (modifed data) asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The list of requested modified historical values, or the reason they could not be read. </param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnReadJournalDataPropertiesComplete">
            <summary>
            ReadJournalDataProperties asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">A set of historized property values.</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnGetDataJournalOptionsComplete">
            <summary>
            GetDataJournalOptions  asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">A set of historical properties (attributes)</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnWriteJournalDataComplete">
            <summary>
            WriteJournalData asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The list of identifiers and error codes for each data object whose write failed. 
            Returns null if all writes succeeded.</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnPassthroughComplete">
            <summary>
            Passthrough asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The Passthrough Result simply returns a Result value and a byte array as returned from the underlying system. 
            Again it is up to the client application to interpret this byte array. </param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.ObjectTree">
            <summary>
            The ObjectTree dialog browses an Xi server and displays the object tree structure.
            The server is browsed one level at a time. The root is browsed in the FindObjects() method.
            Each branch is bowsed when it's first selected.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ObjectTree.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.ObjectTree.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advosol.Paxi.ObjectTree.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.ObjectTree.#ctor(Advosol.Paxi.XiServer,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="server">The object of the server to be browsed.</param>
            <param name="rootName">The text displayed for the root level.</param>
        </member>
        <member name="F:Advosol.Paxi.ObjectTree.SelectedObject">
            <summary>
            The object selected in the TreeView
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ObjectTree.ServerType">
            <summary>
            Determines the type of server to be browsed (all, da, hda, ae).
            </summary>     
        </member>
        <member name="F:Advosol.Paxi.ObjectTree.FilterSet">
            <summary>
            Optional browse filter
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ObjectTree.NumberToReturn">
            <summary>
            The maximum number of results in one server call. If the actual number of objects is bigger then multiple
            server calls are executed to get all objects. A large number minimizes the number of server calls 
            but may cause the result size to exeed the configured message buffer size.<br/>
            The default size 400 works with the WCF default MessageBufferSize 65536.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.ObjectTree.Clear">
            <summary>
            The TreeView is cleared.
            This method needs to be called when the associated server object is changed to handle another Xi server.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.ObjectTree.FindObjects">
            <summary>
            This method issues the FindObjects() call and creates the tree of objects, one level at a time.  
            </summary>
        </member>
        <member name="T:Advosol.Paxi.WriteValue">
            <summary>
            API class with a value to write to the server.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.WriteValue.ServerAlias">
            <summary>
            The server-assigned alias for the data object.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.WriteValue.DataValue">
            <summary>
            The value of the data object.  
            </summary>
        </member>
        <member name="T:Advosol.Paxi.XiGeneralNotification">
            <summary>
            Handler for general notification from the XiServerComponent or XiServer class.<br/>
            The handler is e.g. called when an error happens in a request processing and the didn't provide
            a completion handler for the request. Error in the subscription poll handlers are also reported
            through this handler.
            </summary>
            <param name="info">Notification description.</param>
            <param name="ex">Optional exception that may be reported.</param>
            <param name="tag">Optional object with event specific additonal information.</param>
        </member>
        <member name="T:Advosol.Paxi.OnComplete">
            <summary>
            Completion handler without event specific argument. This completion handler type is used in request handlers
            that don't have a request specific result.
            </summary>
            <param name="error">Error information. Null (Nothing) if the request was successfully handled.</param>
            <param name="asyncState">The object that was passed to the request handler. The application can 
            use this object to pass any kind of information through the request handler to the completion handler.</param>
        </member>
        <member name="T:Advosol.Paxi.OnDiscoverEndpointsComplete">
            <summary>
            Completion handler for DiscoverEndpoints requests.
            </summary>
            <param name="error">Error information. Null (Nothing) if the request was successfully handled.</param>
            <param name="endpoints"></param>
            <param name="asyncState">The object that was passed to the request handler. The application can 
            use this object to pass any kind of information through the request handler to its completion handler.</param>
        </member>
        <member name="T:Advosol.Paxi.WrappedServerType">
            <summary>
            Server types supported by the embedded Xi Wrapper Server
            </summary>
        </member>
        <member name="T:Advosol.Paxi.UserCredentials">
            <summary>
            Credentials for the wrapped server access. 
            </summary>
        </member>
        <member name="F:Advosol.Paxi.UserCredentials.UserName">
            <summary>
            User name passed to the wrapped server
            </summary>
        </member>
        <member name="F:Advosol.Paxi.UserCredentials.Password">
            <summary>
            Password passed to the wrapped server
            </summary>
        </member>
        <member name="F:Advosol.Paxi.UserCredentials.Domain">
            <summary>
            Optional domain name.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.UserCredentials.UaWithoutSecurity">
            <summary>
            Request to access the UA server without security. This should be used for debugging purposes only.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.UserCredentials.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Advosol.Paxi.UserCredentials.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="domain"></param>
        </member>
        <member name="T:Advosol.Paxi.WrappedServer">
            <summary>
            Holds the access definitiions for a wrapped classic OPC or UA server.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.WrappedServer.#ctor(Advosol.Paxi.WrappedServerType,System.String,System.String,Xi.serverAccess)">
            <summary>
            Constructor with all data
            </summary>
            <param name="serverType"></param>
            <param name="progId"></param>
            <param name="name"></param>
            <param name="host"></param>
        </member>
        <member name="M:Advosol.Paxi.WrappedServer.getFullServerID">
            <summary>
            Server identifier in the form //machine/progid  or  progid  for local servers.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Advosol.Paxi.XiEventJournalList">
            <summary>
            This class contains the Xi server access methods that operate on an EventJournalList  
            </summary>
        </member>
        <member name="M:Advosol.Paxi.XiEventJournalList.#ctor(Advosol.Paxi.XiServer,Advosol.Paxi.CommunicationPreferences,Advosol.Paxi.ListRWAccessMode)">
            <summary>
            The XiEventJournalList object is associated with an XiServer object.
            It can either communicate with the channels created in the XiServer object or create channels for the
            endpoints specified for this list.
            </summary>
            <param name="server">Server communication object</param>
            <param name="endpoints">defines the endpoints/channesl to be used.</param>
            <param name="rwMode">Determines the read/write access to the list.</param>
            <param name="subscrMode">Determines if subscriptions are with callbacks or with an internal poll thread.</param>
        </member>
        <member name="M:Advosol.Paxi.XiEventJournalList.DefineList(System.UInt32,System.Boolean,Xi.Contracts.Data.FilterSet)">
            <summary>
            Synchronically creates a list of data objects or alarms/events within the context. 
            </summary>
            <param name="clientId">The Client Id for this list. Used in callbacks to allow the client to identify this list. </param>
            <param name="enableList">The list is created into either disabled or enabled state.</param>
            <param name="filterSet">The set of filters to be used to select the elements of the list.</param>
            <returns>The attributes created for the list.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiEventJournalList.DefineList(System.UInt32,System.Boolean,Xi.Contracts.Data.FilterSet,Advosol.Paxi.OnDefineListComplete,System.Object)">
            <summary>
            Asynchronically creates a list of data objects or alarms/events within the context. 
            </summary>
            <param name="clientId">The Client Id for this list. Used in callbacks to allow the client to identify this list. </param>
            <param name="enableList">The list is created into either disabled or enabled state.</param>
            <param name="filterSet">The set of filters to be used to select the elements of the list.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiEventJournalList.ReadJournalEvents(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            Synchronously read historical alarms or events.
            </summary>
            <param name="firstTimeStamp">The filter that specifies the first or beginning (of returned list) timestamp for event messages to be returned.  
            Valid operands include the Timestamp (UTC) constant defined by the FilterOperand class.
            </param>
            <param name="secondTimeStamp">The filter that specifies the second or ending (of returned list) timestamp for event messages to be returned. 
            Valid operands include the Timestamp (UTC) constant defined by the FilterOperand class.
            </param>
            <param name="numEventMessages">The maximum number of EventMessages to be returned.</param>
            <param name="filterSet">The set of filters used to select historical alarms and events to be read.</param>
            <returns>The list of selected historical alarms and events. Or null if no alarms or events were selected.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiEventJournalList.ReadJournalEvents(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,Xi.Contracts.Data.FilterSet,Advosol.Paxi.OnReadJournalEventsComplete,System.Object)">
            <summary>
            Asynchronously read historical alarms or events.
            </summary>
            <param name="firstTimeStamp">The filter that specifies the first or beginning (of returned list) timestamp for event messages to be returned.  
            Valid operands include the Timestamp (UTC) constant defined by the FilterOperand class.
            </param>
            <param name="secondTimeStamp">The filter that specifies the second or ending (of returned list) timestamp for event messages to be returned. 
            Valid operands include the Timestamp (UTC) constant defined by the FilterOperand class.
            </param>
            <param name="numEventMessages">The maximum number of EventMessages to be returned.</param>
            <param name="filterSet">The set of filters used to select historical alarms and events to be read.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiEventJournalList.WriteJournalEvents(System.UInt32,Xi.Contracts.Data.ModificationType,System.Collections.Generic.List{Xi.Contracts.Data.EventMessage})">
            <summary>
            Synchronously calls the server to modify historical alarms and/or events. 
            The modification type parameter indicates the type of modification to perform.  
            </summary>
            <param name="listId">The identifier of the list that contains the alarms and/or events to be written.</param>
            <param name="modificationType">Indicates the type of modification to perform.</param>
            <param name="eventsToWrite">The list of historical alarms and/or events to write. Each is identified by its EventId contained in the EventMessage.</param>
            <returns>The list server aliases and result codes for the alarms and/or events whose write failed. Returns null if all writes succeeded.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiEventJournalList.WriteJournalEvents(System.UInt32,Xi.Contracts.Data.ModificationType,System.Collections.Generic.List{Xi.Contracts.Data.EventMessage},Advosol.Paxi.OnWriteJournalEventsComplete,System.Object)">
            <summary>
            Asynchronously calls the server to modify historical alarms and/or events. 
            The modification type parameter indicates the type of modification to perform.  
            </summary>
            <param name="listId">The identifier of the list that contains the alarms and/or events to be written.</param>
            <param name="modificationType">Indicates the type of modification to perform.</param>
            <param name="eventsToWrite">The list of historical values to write. 
            Each is identified by its list id, its server alias, and its timestamp.</param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="P:Advosol.Paxi.XiEventJournalList.SyncNotification">
            <summary>
            Callback thread synchronization object.
            Is initialized with the XiServer sync object.
            The user can overwrite e.g. with null if for this list no sync is necessary.
            </summary>
        </member>
        <member name="E:Advosol.Paxi.XiEventJournalList.OnInformationReport">
            <summary>
            Application InformationReport handler.
            The InformationReport handler is called when the current value of subscribed objects has changed.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiEventJournalList.ClientListID">
            <summary>
            
            </summary>
        </member>
        <member name="T:Advosol.Paxi.OnReadJournalEventsComplete">
            <summary>
            ReadJournalEvents asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The list of selected historical alarms and events. Or null if no alarms or events were selected.</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnReadJournalDataChangedComplete">
            <summary>
            ReadJournalDataChanged asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The changed historical data values for a specific data object. </param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnWriteJournalEventsComplete">
            <summary>
            WriteJournalEvents asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The list server aliases and result codes for the alarms and/or events whose write failed. 
            Returns null if all writes succeeded. </param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.FindDiscoveryServers">
            <summary>
            Base class handling the Xi server discovery.
            The server discovery may take several seconds.
            The discovery is handled asynchronously to prevent the application becoming unresponsive.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.FindDiscoveryServers.#ctor(Advosol.Paxi.OnFindDiscoveryServersComplete,System.Object)">
            <summary>
            Creates an object with the specified completion notification handler.
            </summary>
            <param name="callback">Coompletion callback handler</param>
            <param name="syncObject">Optional Forms object for thread synchroization.</param>
        </member>
        <member name="M:Advosol.Paxi.FindDiscoveryServers.GetServersAsync(System.Boolean,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="global"></param>
            <param name="timeLimit"></param>
        </member>
        <member name="P:Advosol.Paxi.FindDiscoveryServers.ErrorDetails">
            <summary>
            Errors in background threads are indicated here because exceptions are not thrown in the user interface thread.
            Check this indicator if the result is empty.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.XiEndpoints.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEndpoints.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEndpoints.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEndpoints.Discover">
            <summary>
            
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEndpoints.xiServerComp">
            <summary>
            The Form object that uses this control and requires synchronization.
            Usually this is the Forms object that owns this component.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEndpoints.AutoStart">
            <summary>
            Determines if the the server discovery is auto executed at startup.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEndpoints.Tag">
            <summary>
            User defined data associated with the object.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.FilterDlg">
            <summary>
            Summary description for Filter.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.FilterDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.FilterDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.ContextOptionsDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.ContextOptionsDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.ContextOptionsDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.ReadValue">
            <summary>
            This class defines a data object value, identified by its 
            client alias, that is sent to the client.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.ReadValue.ClientAlias">
            <summary>
            The client alias for the data object. Must be > 0 in server requests.<br/>
            clientAlias==0 in an InformationReport indicates a special situation. The value element of this object indicates to the 
            client how many data changes have been discarded in teh server for the specified list since the last poll response. 
            If this condition persists, the client should increase its poll frequency.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.ReadValue.DataValue">
            <summary>
            The value of the data object.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.AddDataObjectResultExt">
            <summary>
            AddDataObject result object plus additonal information 
            </summary>
        </member>
        <member name="F:Advosol.Paxi.AddDataObjectResultExt.rslt">
            <summary>
            AddDataObject result from the Xi server.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.AddDataObjectResultExt.valtype">
            <summary>
            Data type of the object value.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.PNRPHelper">
            <summary>
            These methods are used to set and resolve PNRP services through the
            PeerToPeer protocol stack built into Windows Vista/Windows 7 and optionally
            available on Windows XP.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.PNRPHelper.ResolveServices(System.String,System.Boolean)">
            <summary>
            Locate all the registered services for a given mesh name
            </summary>
            <param name="meshName"></param>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.PNRPHelper.RegisterService(System.String,System.Int32,System.String)">
            <summary>
            This registers a given port + url with a specified mesh
            </summary>
            <param name="meshName"></param>
            <param name="port"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.Endpoints.#ctor(System.String)">
            <summary>
            Constructs an object with the given URL of the Xi server's ServerDiscovery endpoint
            </summary>
            <param name="srvUrl">URL of the Xi server's ServerDiscovery endpoint</param>
        </member>
        <member name="M:Advosol.Paxi.Endpoints.GetServerDiscoveryUrl(Xi.Contracts.Data.ServerEntry)">
            <summary>
            Get the URL of the ServerDiscovery endpoint from the discovered server information.
            </summary>
            <param name="serverInfo">Discovered server information</param>
            <returns>Endpoint URL or "" if no endpoint found</returns>
        </member>
        <member name="M:Advosol.Paxi.Endpoints.GetResourceManagementEndpoints">
            <summary>
            Returns all available endpoints for the IResourceManagement contract.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.Endpoints.GetResourceManagementEndpoint(Advosol.Paxi.ContractEndpointPreferences)">
            <summary>
            Retrieve the default endpoint definition from the list for the IResourceManagement contract.
            The found endpoint is set up to be used for the server access. The name is written into the property EPnameDiscovery.
            </summary>
            <returns>.NET endpoint description</returns>
            <returns>Endpoint object or null if there is no endpoint configured.</returns>
        </member>
        <member name="M:Advosol.Paxi.Endpoints.GetReadEndpoints">
            <summary>
            Returns all available endpoints for the IRead contract.
            </summary>
            <returns>Endpoints configured for the IRead contract</returns>
        </member>
        <member name="M:Advosol.Paxi.Endpoints.GetReadEndpoint(Advosol.Paxi.ContractEndpointPreferences)">
            <summary>
            Retrieve the endpoint definition from the list for the IRead contract.
            The endpoint name is defined in the property EPnameRead.
            </summary>
            <param name="epPreferences">Binding preference definition.</param>
            <returns>.NET endpoint description</returns>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.Endpoints.GetWriteEndpoints">
            <summary>
            Returns all available endpoints for the IWrite contract.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.Endpoints.GetWriteEndpoint(Advosol.Paxi.ContractEndpointPreferences)">
            <summary>
            Retrieve the endpoint definition from the list for the IWrite contract.
            The endpoint name is defined in the property EPnameWrite.
            </summary>
            <param name="epPreferences">Preference definitions for the Write contract.</param>
            <returns>.NET endpoint description</returns>
        </member>
        <member name="M:Advosol.Paxi.Endpoints.GetPollEndpoints">
            <summary>
            Returns all available endpoints for the IPoll contract.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.Endpoints.GetPollEndpoint(Advosol.Paxi.ContractEndpointPreferences)">
            <summary>
            Retrieve the endpoint definition from the list for the IPoll contract.
            The endpoint name is defined in the property EPnamePoll.
            </summary>
            <param name="epPreferences">Preference definitions for the Poll contract.</param>
            <returns>.NET endpoint description</returns>
        </member>
        <member name="M:Advosol.Paxi.Endpoints.GetRegisterForCallbackEndpoints">
            <summary>
            Returns all available endpoints for the IRegisterForCallback contract.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.Endpoints.GetRegisterForCallbackEndpoint(Advosol.Paxi.ContractEndpointPreferences)">
            <summary>
            Retrieve the endpoint definition from the list for the IRegisterForCallback contract.
            The endpoint name is defined in the property EPnameRegCallback.
            </summary>
            <param name="epPreferences">Preference definitions for the RegisterForCallback contract.</param>
            <returns>.NET endpoint description</returns>
        </member>
        <member name="P:Advosol.Paxi.Endpoints.ServerUrl">
            <summary>
            The Metadata Exchange URL associated with this Xi server object.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Endpoints.ServerDiscoveryUrl">
            <summary>
            The ServerDiscovery endpoint URL associated with this Xi server object.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Endpoints.ServerInfo">
            <summary>
            ServerDescription retrieved from the Xi server discovery
            </summary>
        </member>
        <member name="T:Advosol.Paxi.ContractEndpointPreferences">
            <summary>
            Holds the preference definitions for one endpoint.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.ContractEndpointPreferences.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Advosol.Paxi.ContractEndpointPreferences.#ctor(System.String)">
            <summary>
            Constructs an object with the given endpoint name
            </summary>
            <param name="epName"></param>
        </member>
        <member name="M:Advosol.Paxi.ContractEndpointPreferences.Clone">
            <summary>
            Create an identical object.
            </summary>
            <returns>Cloned object</returns>
        </member>
        <member name="P:Advosol.Paxi.ContractEndpointPreferences.name">
            <summary>
            Name of the endpoint in the server configuration.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.ContractEndpointPreferences.scheme">
            <summary>
            Defintion of the preferred communication scheme.
            Valid choices are: http, https, net.tcp. net.pipe
            </summary>
        </member>
        <member name="P:Advosol.Paxi.ContractEndpointPreferences.secure">
            <summary>
            Determines if the preferred communication is secure or not.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.ServiceEndpointDef">
            <summary>
            Defines a service endpoint with the WCF definitions and an Xi specific identifier.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ServiceEndpointDef.sep">
            <summary>
            WCF endpoint definition as returned form the metadata discovery.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ServiceEndpointDef.endpointID">
            <summary>
            Xi identifier to uniquely identify the endpoint in the CreateEndpoint call.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.ServiceEndpointDef.maxItemsInObjectGraph">
            <summary>
            The max number of objects in a WCF message as configured in the server.
            The default of 65535 is often to small.
            E.g. AddDataObjectsToList() has 10 objects in the response.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.ServiceEndpointDef.#ctor(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Constructs an object with the given WCF ServiceEndpoint
            </summary>
            <param name="_sep"></param>
        </member>
        <member name="T:Advosol.Paxi.Components.XiEventListComponent">
            <summary>
            This component class presents one Xi event list.
            The list parameters are defined as properties can be configured either in the Visual Studio designer
            or in the applicaiton code.
            A set of objects can be configured and these objects are added to list in the server when the list is created.<br/>
            This component is associated with a XiServerComponent object the handles the basic server access features.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEventListComponent.#ctor(System.ComponentModel.IContainer)">
            <summary>
            This constructor is called from the Visual Studio Designer created code.
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEventListComponent.#ctor">
            <summary>
            This constructor is only for Visual Studio Designer mode.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEventListComponent.Create">
            <summary>
            Synchronously create the list in the server.
            The list is defined, attached to endpoints and the defined objects are added.
            The server is connected, if it's not already.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEventListComponent.Create(Advosol.Paxi.OnComplete,System.Object)">
            <summary>
            Asynchronously creates the associated list in the server.
            The list is defined, attached to endpoints and the defined objects are added.
            The server is connected, if it's not already connected.
            </summary>
            <param name="onComplete">Handler to be called on completion.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEventListComponent.Terminate(Advosol.Paxi.OnComplete,System.Object)">
            <summary>
            The list is deleted in the server and disposed in the component.
            </summary>
            <param name="onComplete">Handler to be called on completion.</param>
            <param name="asycState"></param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEventListComponent.Cleanup">
            <summary>
            Remove the instance, e.g. after the server context timed out
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.XiEventListComponent.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEventListComponent.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEventListComponent.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventListComponent.xiServer">
            <summary>
            The Form object that uses this control and requires synchronization.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventListComponent.Settings">
            <summary>
            Settings for the XiEventList
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventListComponent.ListBase">
            <summary>
            The underlying class that handles that server access for managing the list in the server.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventListComponent.Categories">
            <summary>
            The server supported event categories
            </summary>
        </member>
        <member name="E:Advosol.Paxi.Components.XiEventListComponent.OnEventNotification">
            <summary>
            Application InformationReport handler.
            The InformationReport handler is called when the current value of subscribed objects has changed.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.XiBrowseTree">
            <summary>
            Control that bowses the server to find the objects one level at a time and shows the objects in a TreView.
            The ObjectAttributes FindObjects result from the Xi server is accessible in the Tag property of the TreeNode.
            Objects can be dragged to another control in the application if the application implements 
            DragEnter and DragDrop event handlers for ObjectAttributes type data on the target control.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiBrowseTree.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiBrowseTree.Show">
            <summary>
            Browses and displays the root node of the Xi server.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiBrowseTree.Clear">
            <summary>
            Clear the browse tree.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiBrowseTree.FindObjects">
            <summary>
            This method issues the FindObjects() call and creates the tree of objects, one level at a time.  
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiBrowseTree.ClearFilter">
            <summary>
            Existing filter definitions are deleted. FindObjects calls will return an unfiltered result.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiBrowseTree.AddORedFilters(Xi.Contracts.Constants.FilterOperandAll,Xi.Contracts.Constants.FilterOperatorEnum,System.Object)">
            <summary>
            Creates an ORed filter subset with the defined criterion and adds the subset to the filter set.
            In the filter evaluation the criteria in the ORed filter subset are ORed and the results are 
            ANDed if there are multiple added ORed filter subsets.
            The created ORedFilters objects is returned to be used to add additional filter criteria to the OR list.
            </summary>
            <param name="operand">The operand for this criterion.</param>
            <param name="compareOperator">The the operator.</param>
            <param name="compareValue">The comparison value.</param>
            <returns>The ORedFilters object with the added criteria.</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiBrowseTree.AddNameFilter(System.String)">
            <summary>
            A 'name' filter set is added as an ORed filter set. Most Xi servers don't support ORed name filter definitions.
            </summary>
            <param name="filter">Filter string with optional wildcards such as "A*".</param>
            <returns>Null or the added ORedFilters. The application can use this object to add ORed filters for servers that support it.</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiBrowseTree.AddNodeTypeFilter(System.String)">
            <summary>
            A filter is added for either branch or leaf nodes.
            </summary>
            <param name="type">Node type  "Leaf" or "Branch". Other values are ignored.</param>
        </member>
        <member name="F:Advosol.Paxi.Components.XiBrowseTree.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiBrowseTree.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiBrowseTree.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiBrowseTree.xiServerComp">
            <summary>
            The Form object that uses this control and requires synchronization.
            Usually this is the Forms object that owns this component.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiBrowseTree.Tag">
            <summary>
            User defined data associated with the object.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiBrowseTree.Position">
            <summary>
            The current position;
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiBrowseTree.Filter">
            <summary>
            The set of filters used by the server to find objects.<br/>
            The filter set is composed of a list of ORedFilters sets that are logically ANDed together.<br/>
            That is, to result in a value of TRUE, each ORedFilters element in the list must result in TRUE.<br/>
            (o11 OR o12 OR o13) AND (o21 OR o22)<br/>
            with only one criterion in each ORedFilters list the value is:<br/>
            o11 AND o21 AND o31<br/>
            The boolean Not member is provided to allow DeMorgan's Theorem to be used to convert an ORed expression of type:<br/>
            "((A AND B) OR (C AND D))" to <br/>
            "!((!A OR !B) AND (!C OR !D))",<br/>
            where '!' represents "NOT".
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiBrowseTree.ServerType">
            <summary>
            Determines the type of server to be browsed (all, da, hda, ae).
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiBrowseTree.MaxObjectsToReturn">
            <summary>
            Maximum number of objects to return by FindObjects.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiBrowseTree.DragTreeNodeInsteadOfObjectAttributes">
            <summary>
            Determines if drag operations move the TreeNode or the ObjectAttributes object.
            The ObjectAttributes object is in the TreeNode tag property.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiBrowseTree.treeView">
            <summary>
            InstanceIDs of currently selected objects.
            </summary>
        </member>
        <member name="E:Advosol.Paxi.Components.XiBrowseTree.Notifications">
            <summary>
            Notification of internal internal event, such as errors detected in server access.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.EditorEventListSettings.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.InstanceIdDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.InstanceIdDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.InstanceIdDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.XiDataList">
            <summary>
            This class contains the Xi server access methods that operate on a DataList  
            </summary>
        </member>
        <member name="M:Advosol.Paxi.XiDataList.#ctor(Advosol.Paxi.XiServer,Advosol.Paxi.CommunicationPreferences,Advosol.Paxi.ListRWAccessMode,Advosol.Paxi.SubscriptionUpdateMode)">
            <summary>
            The XiDataList object is associated with an XiServer object.
            It can either communicate with the channels created in the XiServer object or create channels for the
            endpoints specified for this list.
            </summary>
            <param name="server">Server communication object</param>
            <param name="endpoints">Defines the endpoints/channels to be used. 
            If null (Nothing) then the server default endpoints are used or any available endpoint.</param>
            <param name="rwMode">Determines the read/write access for the list.</param>
            <param name="subscrMode">Determines if subscriptions are with callbacks or with an internal poll thread.</param>
        </member>
        <member name="M:Advosol.Paxi.XiDataList.informationReport(System.UInt32,System.Collections.Generic.List{Advosol.Paxi.ReadValue},System.Collections.Generic.List{Xi.Contracts.Data.ErrorInfo})">
            <summary>
            This method is called:
            - from the server-level XiCallback handler on server callbacks from this list.
            - from the poll timer to pass the poll result to the application
            </summary>
            <param name="listId"></param>
            <param name="updatedValues"></param>
        </member>
        <member name="M:Advosol.Paxi.XiDataList.DefineList(System.UInt32,System.UInt32,System.UInt32,System.Boolean,Xi.Contracts.Data.FilterSet)">
            <summary>
            Synchronically creates a list of data objects or alarms/events within the context. 
            </summary>
            <param name="clientId">The Client Id for this list. Used in callbacks to allow the client to identify this list. </param>
            <param name="updateRate">The requested update rate in milliseconds for the list. 
            The update rate indicates how often the server updates the values of elements in the list. A value of 0 indicates that 
            updating is exception-based. The server may negotiate this value, up or down as necessary to support its efficient operation. </param>
            <param name="bufferingRate"></param>
            <param name="enableList">The list is created into either disabled or enabled state.</param>
            <param name="filterSet">The set of filters to be used to select the elements of the list.</param>
            <returns>The attributes created for the list.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiDataList.DefineList(System.UInt32,System.UInt32,System.UInt32,System.Boolean,Xi.Contracts.Data.FilterSet,Advosol.Paxi.OnDefineListComplete,System.Object)">
            <summary>
            Asynchronically creates a list of data objects or alarms/events within the context. 
            </summary>
            <param name="clientId">The Client Id for this list. Used in callbacks to allow the client to identify this list. </param>
            <param name="updateRate">The requested update rate in milliseconds for the list. 
            The update rate indicates how often the server updates the values of elements in the list. A value of 0 indicates that 
            updating is exception-based. The server may negotiate this value, up or down as necessary to support its efficient operation. </param>
            <param name="bufferingRate">Server buufering rate, if supported by the server.</param>
            <param name="enableList">The list is created into either disabled or enabled state.</param>
            <param name="filterSet">The set of filters to be used to select the elements of the list.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiDataList.PollDataChanges(System.Boolean)">
            <summary>
            Synchronously poll for data changes.
            If the list is defined for polled subscription mode then this method is called from an internal timer and 
            doesn't need to be called by the application. 
            </summary>
            <param name="resultsInInformationReport">Determines if the OnInformationReport is called with the polled values.
            This emulates callbacks and enables the application to handle the data in the same way as with callbacks. 
            The returned values can be ignored in this case.</param>
            <returns>The list of changed values.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiDataList.PollDataChanges(System.Boolean,Advosol.Paxi.OnPollDataChangesComplete,System.Object)">
            <summary>
            Asynchronlously poll for data changes 
            If the list is defined for polled subscription mode then this method is called from an internal timer and 
            doesn't need to be called by the application. 
            </summary>
            <param name="resultsInInformationReport">Determines if the OnInformationReport is called with the polled values.
            This emulates callbacks and enables the application to handle the data in the same way as with callbacks. 
            The returned values can be ignored in this case.</param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiDataList.StopPoll">
            <summary>
            The Poll timer is disposed.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.XiDataList.Dispose">
            <summary>
            The data list is terminated. The associated datalist is deleted in the xiSrv.
            The server is called asynchronously but the response is ignored.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.XiDataList.Dispose(Advosol.Paxi.OnComplete,System.Object)">
            <summary>
            The data list is terminated. The associated datalist is deleted in the xiSrv.
            </summary>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.
            If null (Nothing) then no handler is called at completion.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiDataList.ReadData(System.Collections.Generic.List{System.UInt32})">
            <summary>
            Read data object values synchronously.
            </summary>
            <param name="serverAliases">The server aliases of the data objects to read.</param>
            <returns>The list of requested values. Each value in this array is identified by its client alias. 
            If the server alias for a data object to read was not found, an ErrorInfo object will be returned 
            that contains the server alias instead of a value, status, and timestamp.
            </returns>
        </member>
        <member name="M:Advosol.Paxi.XiDataList.ReadData(System.Collections.Generic.List{System.UInt32},Advosol.Paxi.OnReadDataComplete,System.Object)">
            <summary>
            Read data object values asynchronously.
            </summary>
            <param name="serverAliases">The server aliases of the data objects to read.</param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiDataList.WriteData(System.Collections.Generic.List{Advosol.Paxi.WriteValue})">
            <summary>
            Synchronously writes the values of one or more data objects in a list.
            </summary>
            <param name="dataObjectsToWrite">The server aliases and values of the data objects to write.</param>
            <returns>The list server aliases and result codes for the data objects whose write failed. 
            Returns null if all writes succeeded. </returns>
        </member>
        <member name="M:Advosol.Paxi.XiDataList.WriteData(System.Collections.Generic.List{Advosol.Paxi.WriteValue},Advosol.Paxi.OnWriteDataComplete,System.Object)">
            <summary>
            Asynchronously writes the values of one or more data objects in a list.
            </summary>
            <param name="dataObjectsToWrite">The server aliases and values of the data objects to write.</param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="P:Advosol.Paxi.XiDataList.SyncNotification">
            <summary>
            Callback thread synchronization object.
            Is initialized with the XiServer sync object.
            The user can overwrite e.g. with null if for this list no sync is necessary.
            </summary>
        </member>
        <member name="E:Advosol.Paxi.XiDataList.OnPollError">
            <summary>
            Notification handler for poll erros.
            </summary>
        </member>
        <member name="E:Advosol.Paxi.XiDataList.OnInformationReport">
            <summary>
            Application InformationReport handler.
            The InformationReport handler is called when the current value of subscribed objects has changed.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiDataList.ClientListID">
            <summary>
            
            </summary>
        </member>
        <member name="T:Advosol.Paxi.OnReadDataComplete">
            <summary>
            ReadData asynchronous server call completion handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The list of requested values. Each value in this array is identified by its client alias. 
            If the server alias for a data object to read was not found, an ErrorInfo object will be returned 
            that contains the server alias instead of a value, status, and timestamp.
            </param>
            <param name="asyncState">The object that was passed to the request handler. The application can 
            use this object to pass any kind of information through the request handler to its completion handler.</param>
        </member>
        <member name="T:Advosol.Paxi.OnPollDataChangesComplete">
            <summary>
            OnCompletion handler for PollDataChanges requests.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The list of changed values.<br/>
            A value with clientAlias==0 indicates a special situation. The value element of this object indicates to the 
            client how many data changes have been discarded in terh server for the specified list since the last poll response. 
            If this condition persists,  /// the client should increase its poll frequency.</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnWriteDataComplete">
            <summary>
            WriteData asynchronous server call completion handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The list server aliases and result codes for the data objects whose write failed. 
            Returns null if all writes succeeded. </param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.EditorDataListSettings.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.XiObjectValue">
            <summary>
            Holds the item value, quality, timestamp and item identification information. 
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiObjectValue.InstanceID">
            <summary>
            The unique identifier for the item. Either this identifier or the server handle 
            can be used to idetify the item to be accessed.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiObjectValue.Alias">
            <summary>
            Internal name that can be defined if it's necessary to reference the item in the code.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiObjectValue.ClientHandle">
            <summary>
            Handle assigned to this item in the client application.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiObjectValue.Value">
            <summary>
            Item value.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiObjectValue.Timestamp">
            <summary>
            Item time stamp in UTC.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiObjectValue.StatusCode">
            <summary>
            HRESULT error code.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.EditorJournalListSettings.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.ChannelCloser">
            <summary>
            This class is used to properly close a WCF client proxy.  It aborts or closes
            the proxy based on the channel status and whether an exception is encountered.
            It has two calling methods, one where the proxy has a short life, and the other
            to be used when the proxy is held over the life of a single method.
            </summary>
            <example>
            Usage 1: Short lived proxy
            void SomeMethod()
            {
                SomeWcfProxy proxy = new SomeWcfProxy();
                using (new ChannelCloser(proxy))
                {
                   proxy.MakeCall();
                    ...
                }
            }
            
            Usage 2: Long lived proxy
            void CreateProxy()
            {
                SomeWcfProxy proxy = new SomeWcfProxy();
                ...
            }
            void DestroyProxy()
            {
               ChannelCloser.Close(proxy);
            }
            </example>
        </member>
        <member name="M:Advosol.Paxi.ChannelCloser.#ctor(System.Object)">
            <summary>
            Constructs a WCF channel closer object
            </summary>
            <param name="channelObj">WCF proxy object</param>
        </member>
        <member name="M:Advosol.Paxi.ChannelCloser.Dispose">
            <summary>
            Properly releases and closes the held WCF proxy
            </summary>
        </member>
        <member name="M:Advosol.Paxi.ChannelCloser.Close(System.Object)">
            <summary>
            This method closes the passed proxy object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Advosol.Paxi.WriteValuesHelper.Create(System.Collections.Generic.List{Advosol.Paxi.WriteValue})">
            <summary>
            Construct from list with WriteValue objects
            </summary>
            <param name="vals">List of values to write.</param>
        </member>
        <member name="T:Advosol.Paxi.DiscoverXiServers">
            <summary>
            Base class handling the server discovery.<br/>
            Xi or wrapped servers can be discovered. The DiscoveryServerUrl argument controls the behavior.
            To discover Xi server the argument is either null or the URL of the dicovery server to be used. 
            If the argument is nullOrEmpty then PNRP is used to find available Xi discovery servers. This may take several seconds.<be/>
            If the argument starts with "da:", "hda" or "ae" then OpcEnum is used to discover the requested type of classic OPC servers.  
            The optionally following text is used as the network name of the machine where OpcEnum is accessed.<br/>
            If the argument starts with "ua:" the UA server are discovered through the UA discovery server specified in the application configuration.<br/>
            The discovery is handled asynchronously to prevent the application becoming unresponsive.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.DiscoverXiServers.#ctor(System.String,Advosol.Paxi.OnDiscoverServersComplete,System.Object)">
            <summary>
            Creates a server discovery object with the specified completion notification handler.
            </summary>
            <param name="discoveryServerUrl">Optional URL of the Xi discovery server, except for the cases listed below.
            If nullOrEmpty then the Xi discovery server is searched wit PNRP.<br/>
            If nullOrEmpty then PNRP is used to find available Xi discovery servers. This may take several seconds.
            PNRP is not available on Windows Server 2003 and need to be downloaded and installed for XP systems. PNRP requires IPv6 being activated.<br/>
            If starts with "da:", "hda" or "ae" then OpcEnum is used to discover the requested type of classic OPC servers.  
            The optionally following text is used as the network name of the machine where OpcEnum is accessed.<br/>
            If starts with "ua:" the UA server are discovered through the UA discovery server specified in the application configuration.
            The application must be configured for UA with the necessary UA configuration settings and a X509 certificate. 
            Use the Advosol UaClientConfigHelper to create/edit the configuration file and to manage the certificate.
            </param>
            <param name="callback">Completion callback handler</param>
            <param name="syncObject">Optional Forms object for thread synchroization.</param>
        </member>
        <member name="M:Advosol.Paxi.DiscoverXiServers.GetServersAsync(System.Boolean,System.TimeSpan)">
            <summary>
            Search for servers according the arguments passed to the constructor.<br/>
            The result is passed to the requestor in the call of the callback method specified in the constructor.
            </summary>
            <param name="global">The PNRP search can be global or local (local network).
            PNRP is used only for the discovery of Xi discovery servers and is not used if a Xi discovery server URL is specified.</param>
            <param name="timeLimit">Waiting for PNRP is cancelled after the defined time.</param>
        </member>
        <member name="P:Advosol.Paxi.DiscoverXiServers.ErrorDetails">
            <summary>
            Errors in background threads are indicated here because exceptions are not thrown in the user interface thread.
            Check this indicator if the result is empty.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.EndpointDiscovery">
            <summary>
            The endpoint discovery class retrieves endpoint information from the server and 
            sorts the information into lists for each contract.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.EndpointDiscovery.#ctor(System.String)">
            <summary>
            Constructs an object for one server. 
            </summary>
            <param name="discoEndpointUrl">Url of the server's discovery endpoint.</param>
        </member>
        <member name="M:Advosol.Paxi.EndpointDiscovery.FilterUnusable(System.Collections.Generic.List{Advosol.Paxi.ServiceEndpointDef})">
            <summary>
            Return a filtered list with usable endpoints.
            Pipe bindings are filtered if the server isn't local.
            </summary>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.EndpointDiscovery.ReadMEX">
            <summary>
            Synchronously loads the endpoint/binding configuration from the server's MEX endpoint
            and builds the lists for each service contract.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.EndpointDiscovery.ReadMEXAsync(Advosol.Paxi.OnComplete,System.Object)">
            <summary>
            Asynchronously loads the endpoint/binding configuration from the server's MEX endpoint
            and builds the lists for each service contract.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.EndpointDiscovery.ResourceEndpoints">
            <summary>
            The found endpoints for the IResourceManagement contract.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.EndpointDiscovery.ReadEndpoints">
            <summary>
            The found endpoints for the IRead contract.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.EndpointDiscovery.WriteEndpoints">
            <summary>
            The found endpoints for the IWrits contract.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.EndpointDiscovery.PollEndpoints">
            <summary>
            The found endpoints for the IPoll contract.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.EndpointDiscovery.RegisterForCallbackEndpoints">
            <summary>
            The found endpoints for the IRegisterForCallback contract.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.EndpointDiscovery.ServerURL">
            <summary>
            URL of the metaData endpoint
            </summary>
        </member>
        <member name="P:Advosol.Paxi.EndpointDiscovery.SecurityMode">
            <summary>
            Security mode used for the metaData endpoint
            </summary>
        </member>
        <member name="P:Advosol.Paxi.EndpointDiscovery.ReliableEnabled">
            <summary>
            Enabled reliable session for secure MetaData access 
            </summary>
        </member>
        <member name="P:Advosol.Paxi.EndpointDiscovery.BufferSize">
            <summary>
            The size of the WCF receive buffer.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.EditorServerSettings">
            <summary>
            Summary description for UIEditorServerName.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.EditorServerSettings.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.EditorServerSettings.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.EditorServerSettings.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.XiDataListComponent">
            <summary>
            This component class presents one Xi data list.
            The list parameters are defined as properties can be configured either in the Visual Studio designer
            or in the applicaiton code.
            A set of objects can be configured and these objects are added to list in the server when the list is created.<br/>
            This component is associated with a XiServerComponent object the handles the basic server access features.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.#ctor(System.ComponentModel.IContainer)">
            <summary>
            This constructor is called at run time from the Visual Studio Designer created code.
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.#ctor">
            <summary>
            This constructor is only for Visual Studio Designer mode.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.Create">
            <summary>
            Synchronously creates the associated list in the server.
            The list is defined, attached to endpoints and the defined objects are added.
            The server is connected, if it's not already connected.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.Create(Advosol.Paxi.OnComplete,System.Object)">
            <summary>
            Asynchronously creates the associated list in the server.
            The list is defined, attached to endpoints and the defined objects are added.
            The server is connected, if it's not already connected.
            </summary>
            <param name="onComplete">Handler to be called on completion.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.Terminate(Advosol.Paxi.OnComplete,System.Object)">
            <summary>
            The list is deleted in the server and disposed in the component.
            </summary>
            <param name="onComplete">Handler to be called on completion.</param>
            <param name="asycState">Optional user object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.Cleanup">
            <summary>
            Remove the instance, e.g. after the server context timed out
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.AddObjects(System.Collections.Generic.List{Advosol.Paxi.Components.XiInstanceDef})">
            <summary>
            Objects can be added to the list at run-time.
            Each object is identified by the settings in the XiInstanceDef object that is specific to this component.
            In the Xi server the object is identified by the InstanceId only.<br/>
            Objects that were successfully added in the server are added to the dictionaries of objects
            supported by this component.
            
            </summary>
            <param name="newObjects">InstanceDef object for each object to be added.
            For adding the object to the data list in the Xi server only InstanceId and active state need to be defined.
            The clientAlias is auto initialized with a unique int value. This value is returned in the result together with 
            a server alias int value. Other InstanceDef fields need not be initialized if they are not used for 
            features of this component.</param>
            <returns>The list of results returned from the Xi server. The size and order of this list matches 
            the size and order of the newObjects argument.</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.RemoveObjects(System.Collections.Generic.List{Advosol.Paxi.Components.XiInstanceDef})">
            <summary>
            The specified objects are removed from the lists in this component and the associated data list in the server.
            </summary>
            <param name="remObjects">The list of identifiers of the objects to be removed.</param>
            <returns> The list identifiers and result codes for data objects whose 
            removal failed. Returns null if all removals succeeded.
            </returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.ReadData">
            <summary>
            Synchronously read the values of all objects defined in this list.
            </summary>
            <returns>Object values with status and error information.</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.ReadData(System.Collections.Generic.List{System.String})">
            <summary>
            Read the data objects defined in the argument list values synchronously.
            </summary>
            <param name="aliasDefs">Alias names of the data objects to be read.
            The alias names are the alias names defined in the component settings, not the InstanceId in the server.</param>
            <returns>Object values with status and error information.</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.ReadData(System.String)">
            <summary>
            Read a single data object value synchronously.
            </summary>
            <param name="aliasDef">Alias name of the data object to be read.</param>
            <returns>Object value with status and error information.</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.ReadData(Advosol.Paxi.OnReadDataComplete,System.Object)">
            <summary>
            Asynchronously read the values of all objects defined in this list.
            </summary>
            <returns>Object values with status and error information.</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.ReadData(System.Collections.Generic.List{System.String},Advosol.Paxi.OnReadDataComplete,System.Object)">
            <summary>
            Read data object values asynchronously.
            </summary>
            <param name="aliasDefs">Alias names of the data objects to be read.</param>
            <param name="onComplete">Handler to be called on completion.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.ReadData(System.String,Advosol.Paxi.OnReadDataComplete,System.Object)">
            <summary>
            Read data object value asynchronously.
            </summary>
            <param name="aliasDef">Alias name of the data object to be read.</param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.WriteData(System.Collections.Generic.List{Advosol.Paxi.Components.WriteValueByAliasname})">
            <summary>
            Synchronously writes the values of one or more data objects.
            </summary>
            <param name="dataObjectsToWrite">The aliase names and values (status/timestamp) of the data objects to write.</param>
            <returns>Error information</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.WriteData(System.String,System.Object)">
            <summary>
            Synchronously writes the value of a single data object.
            </summary>
            <param name="aliasName">The configured alias name.</param>
            <param name="dataValue">The value to write (no status/timestamp)</param>
            <returns>Error indicator</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.WriteData(System.Collections.Generic.List{Advosol.Paxi.Components.WriteValueByAliasname},Advosol.Paxi.OnWriteDataComplete,System.Object)">
            <summary>
            Aynchronously writes the values of one or more data objects.
            </summary>
            <param name="dataObjectsToWrite">The aliase names and values (status/timestamp) of the data objects to write.</param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.WriteData(System.String,System.Object,Advosol.Paxi.OnWriteDataComplete,System.Object)">
            <summary>
            Asynchronously writes the value of a single data object.
            </summary>
            <param name="aliasName">The configured alias name.</param>
            <param name="dataValue">The value to write (no status/timestamp)</param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.InformationReport(System.UInt32,System.Collections.Generic.List{Advosol.Paxi.ReadValue},System.Collections.Generic.List{Xi.Contracts.Data.ErrorInfo})">
            <summary>
            This method is called from the DataList with changed values
            </summary>
            <param name="listId"></param>
            <param name="updatedValues"></param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.GetInstanceDef(System.UInt32)">
            <summary>
            Retrieve the object definition for the specified clientAlias handle.
            </summary>
            <param name="clientAlias">ClientAlias handle used in the Xi server exchange</param>
            <returns>Object instance definition or null (Nothing) if not found.</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.GetInstanceDef(System.String)">
            <summary>
            Retrieve the object definition for the specified alias name.
            </summary>
            <param name="aliasName">Alias name defined in the XiDataListComonent</param>
            <returns>Object instance definition or null (Nothing) if not found.</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.GetInstanceDefs">
            <summary>
            Returns a list with all configured Xi object instances.
            </summary>
            <returns>list with all configured Xi object instances.</returns>
        </member>
        <member name="F:Advosol.Paxi.Components.XiDataListComponent.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiDataListComponent.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiDataListComponent.xiServer">
            <summary>
            The Form object that uses this control and requires synchronization.
            Usually this is the Forms object that owns this component.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiDataListComponent.Settings">
            <summary>
            All the Xi List settings.
            The object is auto created with default settings.
            In the Visual Studio designer there is a dedicated editor dialog for viewing and changing the parameters.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiDataListComponent.OwnerForm">
            <summary>
            The Form object that uses this control and requires thread synchronization.
            This is only required if the component is configured to transfer data directly into Windows controls.
            If not defined then the user InformationReport event handler needs to handle the Windos UI thread
            synchronization in case it uses any Windows controls.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiDataListComponent.Tag">
            <summary>
            User defined data associated with the object.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiDataListComponent.ListBase">
            <summary>
            The underlying class that handles that server access for managing the list in the server.
            </summary>
        </member>
        <member name="E:Advosol.Paxi.Components.XiDataListComponent.OnInformationReport">
            <summary>
            Application InformationReport handler.
            The InformationReport handler is called when the current value of subscribed objects has changed.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.OnDiscoverServersComplete">
            <summary>
            DiscoverServers asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="servers">List of discovered Xi servers.</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnDiscoverServerInfoComplete">
            <summary>
            DiscoverServerInfo asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="serverInfo">Server description details.</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnFindDiscoveryServersComplete">
            <summary>
            FindDiscoveryServers asynchronous call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="discoServers">Url of the found Xi discovery servers</param>
        </member>
        <member name="T:Advosol.Paxi.OnIdentifyComplete">
            <summary>
            Identify asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="description">Server description</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnLookupResultCodesComplete">
            <summary>
            LookupResultCodes asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">Result code descriptions</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnGetStandardMibComplete">
            <summary>
            GetStandardMib asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="description">Standard MIB</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnGetVendorMibComplete">
            <summary>
            GetVendorMib asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">Vendor MIB objects</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnGetStatusComplete">
            <summary>
            GetStatus asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="status">Current server status</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnFindObjectsComplete">
            <summary>
            FindObjects asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="objects">Browsed objects</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnGetAlarmSummaryComplete">
            <summary>
            GetAlarmSummary asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">Alarm Summary</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnEnableAlarmsComplete">
            <summary>
            EnableAlarms asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">Succcess/error codes</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnGetAlarmsEnabledStateComplete">
            <summary>
            This method returns the enable state for a specified area or event source.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">Enabled state and result code for each requested InstanceId.</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.XiEventList">
            <summary>
            This class contains the Xi server access methods that operate on an EventList  
            </summary>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.#ctor(Advosol.Paxi.XiServer,Advosol.Paxi.CommunicationPreferences,Advosol.Paxi.ListRWAccessMode,Advosol.Paxi.SubscriptionUpdateMode)">
            <summary>
            The XiEventList object is associated with an XiServer object.
            It can either communicate with the channels created in the XiServer object or create channels for the
            endpoints specified for this list.
            </summary>
            <param name="server">Server communication object</param>
            <param name="endpoints">Defines the endpoints/channels to be used. 
            If null (Nothing) then the server default endpoints are used or any available endpoint.</param>
            <param name="rwMode">Determines the read/write access to the list.</param>
            <param name="subscrMode">Determines if subscriptions are with callbacks or with an internal poll thread.</param>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.eventNotification(System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.EventMessage})">
            <summary>
            This method is called:
            - from the server-level XiCallback handler on server callbacks from this list.
            - from the poll timer to pass the poll result to the application
            </summary>
            <param name="listId"></param>
            <param name="updatedValues"></param>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.DefineList(System.UInt32,System.UInt32,System.Boolean,Advosol.Paxi.EventFilterSet)">
            <summary>
            Synchronically creates a list of data objects or alarms/events within the context. 
            </summary>
            <param name="clientId">The Client Id for this list. Used in callbacks to allow the client to identify this list. </param>
            <param name="updateRate">The requested update rate in milliseconds for the list. 
            The update rate indicates how often the server updates the values of elements in the list. A value of 0 indicates that 
            updating is exception-based. The server may negotiate this value, up or down as necessary to support its efficient operation. </param>
            <param name="enableList">The list is created into either disabled or enabled state.</param>
            <param name="filterSet">The set of filters to be used to select the elements of the list.
            The methods in the EventFilterSet class can be used to build the filter set.
            </param>
            <returns>The attributes created for the list.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.DefineList(System.UInt32,System.UInt32,System.Boolean,Xi.Contracts.Data.FilterSet)">
            <summary>
            Synchronically creates a list of data objects or alarms/events within the context. 
            </summary>
            <param name="clientId">The Client Id for this list. Used in callbacks to allow the client to identify this list. </param>
            <param name="updateRate">The requested update rate in milliseconds for the list. 
            The update rate indicates how often the server updates the values of elements in the list. A value of 0 indicates that 
            updating is exception-based. The server may negotiate this value, up or down as necessary to support its efficient operation. </param>
            <param name="enableList">The list is created into either disabled or enabled state.</param>
            <param name="filterSet">The set of filters to be used to select the elements of the list.</param>
            <returns>The attributes created for the list.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.DefineList(System.UInt32,System.UInt32,System.Boolean,Advosol.Paxi.EventFilterSet,Advosol.Paxi.OnDefineListComplete,System.Object)">
            <summary>
            Asynchronically creates a list of data objects or alarms/events within the context. 
            </summary>
            <param name="clientId">The Client Id for this list. Used in callbacks to allow the client to identify this list. </param>
            <param name="updateRate">The requested update rate in milliseconds for the list. 
            The update rate indicates how often the server updates the values of elements in the list. A value of 0 indicates that 
            updating is exception-based. The server may negotiate this value, up or down as necessary to support its efficient operation. </param>
            <param name="enableList">The list is created into either disabled or enabled state.</param>
            <param name="filterSet">The set of filters to be used to select the elements of the list.
            The methods in the EventFilterSet class can be used to build the filter set.
            </param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.DefineList(System.UInt32,System.UInt32,System.Boolean,Xi.Contracts.Data.FilterSet,Advosol.Paxi.OnDefineListComplete,System.Object)">
            <summary>
            Asynchronically creates a list of data objects or alarms/events within the context. 
            </summary>
            <param name="clientId">The Client Id for this list. Used in callbacks to allow the client to identify this list. </param>
            <param name="updateRate">The requested update rate in milliseconds for the list. 
            The update rate indicates how often the server updates the values of elements in the list. A value of 0 indicates that 
            updating is exception-based. The server may negotiate this value, up or down as necessary to support its efficient operation. </param>
            <param name="enableList">The list is created into either disabled or enabled state.</param>
            <param name="filterSet">The set of filters to be used to select the elements of the list.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.AddEventMessageFields(System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.TypeId})">
            <summary>
            Synchronically calls the server to request that category-specific fields be included in event messages generated for 
            alarms and events of the category for the specified Event/Alarm List. 
            </summary>
            <param name="categoryId">The category for which event message fields are being added.</param>
            <param name="fieldObjectTypeIds">The list of category-specific fields to be included in the event messages generated 
            for alarms and events of the category. Each field is identified by its ObjectType Id obtained from the EventMessageFields 
            contained in the EventCategoryConfigurations Standard MIB element.</param>
            <returns>The ObjectTypeIds and result codes for the fields that could not be added to the event message. Returns null if all succeeded.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.AddEventMessageFields(System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.TypeId},Advosol.Paxi.OnAddEventMessageFieldsComplete,System.Object)">
            <summary>
            Asynchronically calls the server to request that category-specific fields be included in event messages generated for 
            alarms and events of the category for the specified Event/Alarm List. 
            </summary>
            <param name="categoryId">The category for which event message fields are being added.</param>
            <param name="fieldObjectTypeIds">The list of category-specific fields to be included in the event messages generated 
            for alarms and events of the category. Each field is identified by its ObjectType Id obtained from the EventMessageFields 
            contained in the EventCategoryConfigurations Standard MIB element.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.ReadEvents(Advosol.Paxi.EventFilterSet)">
            <summary>
            Read events synchronously.
            </summary>
            <param name="filterSet">The set of filters used to select alarms and events to be read.
            The methods in the EventFilterSet class can be used to build the filter set.
            </param>
            <returns>Read object values.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.ReadEvents(Xi.Contracts.Data.FilterSet)">
            <summary>
            Read events synchronously.
            </summary>
            <param name="filterSet">The set of filters used to select alarms and events to be read. </param>
            <returns>Read object values.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.ReadEvents(Advosol.Paxi.EventFilterSet,Advosol.Paxi.OnReadEventsComplete,System.Object)">
            <summary>
            Read events asynchronously.
            </summary>
            <param name="filterSet">The set of filters used to select alarms and events to be read.
            The methods in the EventFilterSet class can be used to build the filter set.
            </param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.ReadEvents(Xi.Contracts.Data.FilterSet,Advosol.Paxi.OnReadEventsComplete,System.Object)">
            <summary>
            Read events asynchronously.
            </summary>
            <param name="filterSet">The set of filters used to select alarms and events to be read. </param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.PollEventChanges(Advosol.Paxi.EventFilterSet,System.Boolean)">
            <summary>
            Synchronlously poll for event notifications.
            </summary>
            <param name="filterSet">Optional set of filters to further refine the selection from the alarms and events in the list. 
            The event list itself is created using a filter.
            The methods in the EventFilterSet class can be used to build the filter set.
            </param>
            <param name="resultsInInformationReport">Determines if the OnEventNotification handler is called with the polled events.
            This emulates callbacks and enables the application to handle events in the same way as with callbacks. 
            The returned events can be ignored in this case.</param>
            <returns>Event notifications received from the server.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.PollEventChanges(Xi.Contracts.Data.FilterSet,System.Boolean)">
            <summary>
            Synchronlously poll for event notifications.
            </summary>
            <param name="filterSet">Optional set of filters to further refine the selection from the alarms and events in the list. 
            The event list itself is created using a filter.
            The methods in the EventFilterSet class can be used to build the filter set.
            </param>
            <param name="resultsInInformationReport">Determines if the OnEventNotification handler is called with the polled events.
            This emulates callbacks and enables the application to handle events in the same way as with callbacks. 
            The returned events can be ignored in this case.</param>
            <returns>Event notifications received from the server.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.PollEventChanges(Advosol.Paxi.EventFilterSet,System.Boolean,Advosol.Paxi.OnPollEventChangesComplete,System.Object)">
            <summary>
            Asynchronously poll for event notifications.
            </summary>
            <param name="filterSet">Optional set of filters to further refine the selection from the alarms and events in the list. 
            The event list itself is created using a filter.
            The methods in the EventFilterSet class can be used to build the filter set.
            </param>
            <param name="resultsInInformationReport">Determines if the OnEventNotification handler is called with the polled events.
            This emulates callbacks and enables the application to handle events in the same way as with callbacks. 
            The events passed in the completion handler can be ignored in this case.</param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.PollEventChanges(Xi.Contracts.Data.FilterSet,System.Boolean,Advosol.Paxi.OnPollEventChangesComplete,System.Object)">
            <summary>
            Asynchronously poll for event notifications.
            </summary>
            <param name="filterSet">Optional set of filters to further refine the selection from the alarms and events in the list. 
            The event list itself is created using a filter.</param>
            <param name="resultsInInformationReport">Determines if the OnEventNotification handler is called with the polled events.
            This emulates callbacks and enables the application to handle events in the same way as with callbacks. 
            The events passed in the completion handler can be ignored in this case.</param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.AcknowledgeAlarms(System.String,System.String,System.Collections.Generic.List{Xi.Contracts.Data.EventId})">
            <summary>
            Synchronously calls the server to acknowledge one or more alarms..
            </summary>
            <param name="operatorName">The name or other identifier of the operator who is acknowledging the alarm.</param>
            <param name="comment">An optional comment submitted by the operator to accompany the acknowledgement.</param>
            <param name="alarmsToAck">The list of alarms to acknowledge.</param>
            <returns>The list EventIds and result codes for the alarms whose acknowledgement failed. 
            Returns null if all acknowledgements succeeded.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.AcknowledgeAlarms(System.String,System.String,System.Collections.Generic.List{Xi.Contracts.Data.EventId},Advosol.Paxi.OnAcknowledgeAlarmsComplete,System.Object)">
            <summary>
            Asynchronously calls the server to acknowledge one or more alarms..
            </summary>
            <param name="operatorName">The name or other identifier of the operator who is acknowledging the alarm.</param>
            <param name="comment">An optional comment submitted by the operator to accompany the acknowledgement.</param>
            <param name="alarmsToAck">The list of alarms to acknowledge.</param>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.ModifyListAttributes(System.Nullable{System.UInt32},System.Nullable{System.UInt32},Advosol.Paxi.EventFilterSet)">
            <summary>
            Synchronically changes the filters of a list. The new filters replace the old filters if they exist. 
            </summary>
            <param name="updateRate">List update or scan rate. The list will be modified to use this new rate. 
            Use GetListAttributes to obtain the current value of this parameter.
            Can be null if the call is only to change the filter.
            This argument is not handled by all servers and for all types of lists.</param>
            <param name="bufferingRate">The new buffering rate of the list.  The server will negotiate this rate to one 
            that it can support.  GetListAttributes can be used to obtain the current value of this parameter.  
            Null if the buffering rate is not to be updated.</param>
            <param name="filterSet">The new set of filters.
            The methods in the EventFilterSet class can be used to build the filter set.
            This argument is not handled by all servers and for all types of lists.</param>
            <returns>The filters and result codes for the filters that could not be set for the list. 
            Returns null if all filters were set successfully.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.ModifyListAttributes(System.Nullable{System.UInt32},System.Nullable{System.UInt32},Advosol.Paxi.EventFilterSet,Advosol.Paxi.OnModifyListAttributesComplete,System.Object)">
            <summary>
            Asynchronically changes the filters of a list. The new filters replace the old filters if they exist. 
            </summary>
            <param name="updateRate">List update or scan rate. The list will be modified to use this new rate. 
            The requested update rate in milliseconds for the list. The update rate indicates how often the server updates the 
            values of elements in the list.  A value of 0 indicates that updating is exception-based. The server may negotiate 
            this value, up or down as necessary to support its efficient operation.<br/>
            Use GetListAttributes to obtain the current value of this parameter.</param>
            <param name="bufferingRate">The new buffering rate of the list.  The server will negotiate this rate to one 
            An optional-use parameter that indicates that the server is to buffer data updates, rather than overwriting them, until either 
            the time span defined by the buffering rate expires or the values are transmitted to the client in a callback or poll response.
            If the time span expires, then the oldest value for a data object is discarded when a new value is received from the underlying system.<br/>
            The value of the bufferingRate is set to 0 to indicate that it is not to be used and that new values overwrite (replace) existing cached values.
            </param>
            <param name="filterSet">The new set of filters.
            The methods in the EventFilterSet class can be used to build the filter set.
            This argument is not handled by all servers and for all types of lists.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.Dispose">
            <summary>
            The data list is terminated. The associated datalist is deleted in the xiSrv.
            The server is called asynchronously but the response is ignored.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.XiEventList.Dispose(Advosol.Paxi.OnComplete,System.Object)">
            <summary>
            The data list is terminated. The associated datalist is deleted in the xiSrv.
            </summary>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.
            If null (Nothing) then no handler is called at completion.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="P:Advosol.Paxi.XiEventList.SyncNotification">
            <summary>
            Callback thread synchronization object.
            Is initialized with the XiServer sync object.
            The user can overwrite e.g. with null if for this list no sync is necessary.
            </summary>
        </member>
        <member name="E:Advosol.Paxi.XiEventList.OnPollError">
            <summary>
            Notification handler for poll erros.
            </summary>
        </member>
        <member name="E:Advosol.Paxi.XiEventList.OnEventNotification">
            <summary>
            Application EventNotification handler.
            The EventNotification handler is called when the server reports an event.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiEventList.ClientListID">
            <summary>
            
            </summary>
        </member>
        <member name="T:Advosol.Paxi.EventFilterSet">
            <summary>
            Class with helper methods for the handling of event notification filters.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.EventFilterSet.GetEventTypeName(Xi.Contracts.Data.EventType)">
            <summary>
            Returns the name of the EventType.
            </summary>
            <param name="eventType">The event type Id.</param>
            <returns>Name of the event type.</returns>
        </member>
        <member name="M:Advosol.Paxi.EventFilterSet.GetCategoryName(System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.CategoryConfiguration})">
            <summary>
            Returns the name of the category Id, if found in the categories list.
            The categories list is part of the Xi server StandardMib and can be retrieved with the XiServer.GetStandardMib() method.
            </summary>
            <param name="categoryId">The event category Id.</param>
            <param name="serverCategories">Name of the event category or the id if not found in the list.</param>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.EventFilterSet.Clear">
            <summary>
            Clear the filter set. The set is cleared only internally. No server call is made.
            To clear the filters in the Xi server a ModifyListAttributes() call must be made with a cleared filter set.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.EventFilterSet.AddPriorityRangeCriteria(System.UInt32,System.UInt32)">
            <summary>
            Add the severity range filter criteria.
            </summary>
            <param name="LowSeverity">Lowest severity included in the filter range.</param>
            <param name="HighSeverity">Highest severity included in the filter range.</param>
        </member>
        <member name="M:Advosol.Paxi.EventFilterSet.AddTypeCriterion(System.String)">
            <summary>
            Add the filter criteria for specified event types.
            </summary>
            <param name="eventTypes">Must be the name of one of the EventType enumeration.</param>
        </member>
        <member name="M:Advosol.Paxi.EventFilterSet.AddTypeCriterion(Xi.Contracts.Data.EventType)">
            <summary>
            Add the filter criterion for specified event type.
            </summary>
            <param name="eventTypes"></param>
        </member>
        <member name="M:Advosol.Paxi.EventFilterSet.ClearTypeFilter">
            <summary>
            Remove the event type filter from this filter set.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.EventFilterSet.AddCategoryCriterion(System.String,System.Collections.Generic.List{Xi.Contracts.Data.CategoryConfiguration})">
            <summary>
            Add a filter criterion for the specified category.
            The name must be in the list of the server supported categories. This list is part of the MIB information.
            The category criterion is ORed to possibly already defined category criteria.
            </summary>
            <param name="categoryName">Category name that is supported by the server.</param>
            <param name="serverEventCategories">List of server supported categories. 
            This list is part of the MIB information. The MIB can be read with the XiServer.GetStandardMib() method.</param>
            <returns>True if the criterion has been added.</returns>
        </member>
        <member name="M:Advosol.Paxi.EventFilterSet.AddCategoryCriterion(System.UInt32)">
            <summary>
            Add a filter criterion for the specified category identifier.
            The identifier must be in the list of the server supported categories. This list is part of the MIB information.
            The category criterion is ORed to possibly already defined category criteria.
            </summary>
            <param name="category">The category id of a server supported event category.
            The server supported event categories are part of the MIB information. The MIB can be read with the XiServer.GetStandardMib() method.
            </param>
        </member>
        <member name="M:Advosol.Paxi.EventFilterSet.ClearCategoryFilter">
            <summary>
            Remove the category filter from this filter set.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.EventFilterSet.AddSourceCriterion(System.String)">
            <summary>
            Add a filter criterion for the specified event source identifier. 
            The criterion is ORed to possibly already defined source criteria.
            </summary>
            <param name="instanceID">The fully qualified instance name of the event source.</param>
        </member>
        <member name="M:Advosol.Paxi.EventFilterSet.ClearSourceFilter">
            <summary>
            Remove the source filter from this filter set.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.EventFilterSet.AddAreaCriterion(System.String)">
            <summary>
            Add a filter criterion for the specified event area identifier. 
            The criterion is ORed to possibly already defined area criteria.
            </summary>
            <param name="instanceID">The fully qualified instance name of the area.</param>
        </member>
        <member name="M:Advosol.Paxi.EventFilterSet.ClearAreaFilter">
            <summary>
            Remove the area filter from this filter set.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.EventFilterSet.fltSet">
            <summary>
            Curent filter set.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.EventFilterSet.EventTypeNamesHDA">
            <summary>
            The names of the event types supported by Xi converter servers for OCP HDA
            </summary>
        </member>
        <member name="P:Advosol.Paxi.EventFilterSet.EventTypeNamesXi">
            <summary>
            The names of all Xi event types
            </summary>
        </member>
        <member name="T:Advosol.Paxi.OnAddEventMessageFieldsComplete">
            <summary>
            AddEventMessageFields asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt"></param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnReadEventsComplete">
            <summary>
            ReadEvents asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt"></param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnPollEventChangesComplete">
            <summary>
            OnCompletion handler for PollEventNotifications requests.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt"></param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.OnAcknowledgeAlarmsComplete">
            <summary>
            AcknowledgeAlarms asynchronous server call complete handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The list EventIds and result codes for the alarms whose acknowledgement failed. 
            Returns null if all acknowledgements succeeded. </param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.ObjectSelection.FindObjects">
            <summary>
            This method issues the FindObjects() call and creates the tree of objects, one level at a time.  
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.ObjectSelection.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.ObjectSelection.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.ObjectSelection.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.XiEventView">
            <summary>
            The EventView control is a customizable control that displays events according the configuration settings.
            The control con be configured by setting properties in the Visual Studio Designer or in configuration menues
            during operation. This menues can be disabled by property settings.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEventView.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEventView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEventView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEventView.Create">
            <summary>
            Synchronously create the list in the server.
            The list is defined, attached to endpoints and the defined objects are added.
            The server is connected, if it's not already.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEventView.Create(Advosol.Paxi.OnComplete,System.Object)">
            <summary>
            Asynchronously creates the associated list in the server.
            The list is defined, attached to endpoints and the defined objects are added.
            The server is connected, if it's not already connected.
            </summary>
            <param name="onComplete">Handler to be called on completion.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEventView.Stop">
            <summary>
            The control operation is terminated. The OPC AE server event subscription is disposed.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEventView.OnStatusInfo(Advosol.Paxi.Components.StatusInfoEventArgs)">
            <summary>
            Handler for user application OnStatusChange callbacks.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiEventView.Clear">
            <summary>
            Clear all events in teh list view.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventView.xiServer">
            <summary>
            The Xi server component for the server management
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventView.Settings">
            <summary>
            Settings for the XiEventList
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventView.ToolBarVisible">
            <summary>
            Determines if the toolbar is visible.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventView.StatusBarVisible">
            <summary>
            Determines if the status bar is visible.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventView.BackColor">
            <summary>
            The background color of the ListView.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventView.ForeColor">
            <summary>
            The foreground color of the ListView.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventView.NeedAckColor">
            <summary>
            The color of events that need to be ackowledged.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventView.EventViewColumns">
            <summary>
            The columns in the event view.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventView.AcknowledgerID">
            <summary>
            The Acknowledger ID string is sent to the OPC server in event acknowledge calls.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventView.MaxEventsInView">
            <summary>
            Determines the maximum number of events in the event view. If this number is reached then the oldest event in the control is removed.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventView.EnableCustomize">
            <summary>
            Determines if the user can customize the columns in the Event View.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventView.EnableFilterChange">
            <summary>
            Determines if the user can customize the Event Filter.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventView.EnableAcknowledge">
            <summary>
            Determines if the user can acknowledge events.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventView.EnableDelete">
            <summary>
            Determines if the user can delete events.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventView.EnableDetailView">
            <summary>
            Determines if the user can select the Event Details view.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventView.NotificationFilter">
            <summary>
            Defines the Filter used in the event subscription.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventView.ListBase">
            <summary>
            The underlying class that handles that server access for managing the list in the server.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiEventView.Categories">
            <summary>
            The server supported event categories
            </summary>
        </member>
        <member name="E:Advosol.Paxi.Components.XiEventView.StatusInfo">
            <summary>
            Status/Error info events. The user can install event handler that handles error and info events.
            The control status bar may set unvisible in such a case.
            </summary>
        </member>
        <member name="E:Advosol.Paxi.Components.XiEventView.OnXiEvent">
            <summary>
            The user can install event handlers that are called for each event from the OPC server.
            This enables the user application to do special handling such as e.g. log the events without having 
            to subscribe to the OPC AE server.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.XiEventView.StatusInfoEventHandler">
            <summary>
            Handler method for status/error info events to the user application.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.XiEventView.OnXiEventHandler">
            <summary>
            Handler method for OPC event notifications to the user application.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.EventColumns">
            <summary>
            Enumeration with all possible event control columns.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.EventColumns.ChangeMask">
            <summary>
            ChangeMask event information.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.EventColumns.NewState">
            <summary>
            NewState event information.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.EventColumns.Source">
            <summary>
            Source event information.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.EventColumns.Time">
            <summary>
            Time event information.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.EventColumns.Message">
            <summary>
            Message event information.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.EventColumns.EventType">
            <summary>
            EventType event information.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.EventColumns.EventCategory">
            <summary>
            EventCategory event information.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.EventColumns.Priority">
            <summary>
            Severity event information.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.EventColumns.ConditionName">
            <summary>
            ConditionName event information.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.EventColumns.SubconditionName">
            <summary>
            SubconditionName event information.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.EventColumns.Quality">
            <summary>
            Quality event information.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.EventColumns.AckRequired">
            <summary>
            AckRequired event information.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.EventColumns.ActiveTime">
            <summary>
            ActiveTime event information.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.EventColumns.EventAttributes">
            <summary>
            EventAttributes event information.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.EventColumns.ActorID">
            <summary>
            ActorID event information.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.ColHeaderDef">
            <summary>
            Definitions for one event view column.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.ColHeaderDefList">
            <summary>
            Collection of event view column definitions.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.StatusInfoEventArgs">
            <summary>
            Information passed to the user application status/error info event handler.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.StatusInfoEventArgs.AlarmText">
            <summary>
            Info/error message text.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.StatusInfoEventArgs.HResult">
            <summary>
            HRESULT error code.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.EventDetails">
            <summary>
            Summary description for EventDetails.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.EventDetails.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.EventDetails.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.EventDetails.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.OnSetCallbackComplete">
            <summary>
            SetCallback asynchronous server call completion handler.
            </summary>
            <param name="error">Exception details or null if the call was successful</param>
            <param name="rslt">The results of the operation, including the negotiated keep-alive skip count and callback rate.</param>
            <param name="asyncState">Object that the application has passed to the request method.</param>
        </member>
        <member name="T:Advosol.Paxi.XiBrowseServerType">
            <summary>
            Determines the type of servers to be browsed
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.ListSettings">
            <summary>
            This class holds the parameter settings for one list.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ListSettings.ListInitiallyEnabled">
            <summary>
            Initial enable state of the list.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ListSettings.ListUpdateRateMS">
            <summary>
            Update rate for this list.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ListSettings.ListBufferingRateMS">
            <summary>
            Buffering rate for this list.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ListSettings.ListEPRead">
            <summary>
            If true the Read endpoint preference defined for the list are used, otherwise the definition in the server component.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ListSettings.ListEPWrite">
            <summary>
            If true the Write endpoint preference defined for the list are used, otherwise the definition in the server component.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ListSettings.ListEPSubscribe">
            <summary>
            If true the Poll/callback endpoint preference defined for the list are used, otherwise the definition in the server component.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ListSettings.CommPreferences">
            <summary>
            Endpoint/Binding preferences for this list.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ListSettings.DataObjects">
            <summary>
            The Xi server data objects handled by this list.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.XiInstanceDef">
            <summary>
            Defines an Xi instance in the list components.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiInstanceDef.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiInstanceDef.#ctor(System.String,System.String)">
            <summary>
            Constructor with name arguments.
            </summary>
            <param name="name">Full InstanceId</param>
            <param name="alias">Alias name in XiDataComponent</param>
        </member>
        <member name="P:Advosol.Paxi.Components.XiInstanceDef.Name">
            <summary>
            Fully qualified OPC Item ID in the OPC DA server.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiInstanceDef.Alias">
            <summary>
            Optional alias for code internal references to this object.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiInstanceDef.Active">
            <summary>
            Determines Active state of the item when the item is added in the OPC DA server.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiInstanceDef.Error">
            <summary>
            Indicates an error at AddItems in OPC DA server.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiInstanceDef.HandlerName">
            <summary>
            Optional definition of a method that handles callbacks for this item.
            In server callbacks this method is called instead of the callback event handler.
            The method must be defined in the OwnerForm object as    private void xxx(DAItemValue val){}
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiInstanceDef.VisualControl">
            <summary>
            This optional definition binds this item to a Windows Control object. 
            The control needs to be defined in the OwnerForm object.
            The item value is written to the specified property of the control.
            Only the value is assigned. Quality, Timestamp and error code are ignored.
            If there is also a handler method assigned for this item then both
            requested handlings are executed. 
            The callback event handler, however is not called for items with an assigned control.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiInstanceDef.DataListResult">
            <summary>
            Result of the AddDataObjects server call.  
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.XiControlLink">
            <summary>
            Definitions for binding a Windows control to an Xi Instance.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiControlLink.InstanceName">
            <summary>
            Instance name of the Windows control.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiControlLink.Instance">
            <summary>
            Windows control object.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiControlLink.PropertyName">
            <summary>
            Name of the control property the OPC item value is assigned to.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiControlLink.AssignToTagProperty">
            <summary>
            Assign the item value as a DAItemValue object (qua;ity/timestamp/error) to the Tag property.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.WriteValueByAliasname">
            <summary>
            This class hold the data for writing one object in the Xi server.<br/>
            The XiDataListComponent.Write method uses the class to enable the application to write
            Xi objects by specifiying the alias name instead of the handle provided by the server.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.WriteValueByAliasname.AliasName">
            <summary>
            Alias name defined in the datalist configuration. This name can be defined in addition to the InstanceId 
            the object has in the server. The InstanceId for a particular object (e.g. a particular sensor) may change
            if the access is changed to go through a gateway server instead of directly to the Xi server.
            A defined alias name doesn't need to be changed in such a case and therefore code modifications canbe prevented.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.WriteValueByAliasname.DataValue">
            <summary>
            The data value as defined in the Xi specification.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.XiItems">
            <summary>
            Collection of item definitions
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiItems.#ctor(Advosol.Paxi.Components.XiInstanceDef[])">
            <summary>
            This constructor creates a collection with the specified items.
            </summary>
            <param name="idefs"></param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiItems.#ctor">
            <summary>
            This constructor creates an empty collection.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiItems.Add(Advosol.Paxi.Components.XiInstanceDef)">
            <summary>
            Add one object to the end of the collection
            </summary>
            <param name="idef">The object to be added.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiItems.AddRange(Advosol.Paxi.Components.XiInstanceDef[])">
            <summary>
            Add the objects in the array to the end of the collection.
            </summary>
            <param name="idefs">Array with the elements to be added.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiItems.Remove(Advosol.Paxi.Components.XiInstanceDef)">
            <summary>
            The object is removed from the collection.
            </summary>
            <param name="idef">The object to be removed.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiItems.Contains(Advosol.Paxi.Components.XiInstanceDef)">
            <summary>
            Indicates if the specified object is in the collection.
            </summary>
            <param name="si">The object to be searched.</param>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiItems.GetAll">
            <summary>
            Returns all elements in the collection as an array
            </summary>
            <returns>All elements of the collection.</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiItems.GetByID(System.String)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Returns the DAOpcItem item definition object with the specified item ID.
            </summary>
            <param name="name">Item ID of the item </param>
            <returns>DAOpcItem definition object of the requested item.</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiItems.GetByAlias(System.String)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Returns the DAOpcItem item definition object with the specified alias.
            </summary>
            <param name="name">Alias of the item </param>
            <returns>DAOpcItem definition object of the requested item.</returns>
        </member>
        <member name="P:Advosol.Paxi.Components.XiItems.Item(System.Int32)">
            <summary>
            Returns the element at the specified index in the collection.
            </summary>
            <param name="i">Element index in the collection</param>
            <returns>Element at the specified index in the collection.</returns>
        </member>
        <member name="F:Advosol.Paxi.Components.ObjectDefinition.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.ObjectDefinition.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.ObjectDefinition.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.DragHelper">
            <summary>
            Win32 interfaces for drag-drop features
            </summary>
        </member>
        <member name="M:Advosol.Paxi.ValueQualityCodes.getStatusText(System.UInt32)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.ValueQualityCodes.getLimitText(System.UInt32)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.ValueQualityCodes.getHistoryText(System.UInt32)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:Advosol.Paxi.FindXiObjects">
            <summary>
            This class wraps the rather complex FindObjects server method to simplify the usage.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.FindXiObjects.#ctor(Advosol.Paxi.XiServer)">
            <summary>
            
            </summary>
            <param name="xiSrv"></param>
        </member>
        <member name="M:Advosol.Paxi.FindXiObjects.SetPositionToRoot(Xi.Contracts.Data.ServerTypeCriteria)">
            <summary>
            Set the current position to the root, either absolute root or the root of the specified resourde type. 
            </summary>
            <param name="rootType">The root type determines if all objects or only the objects of the specified resource type are visible.</param>
        </member>
        <member name="M:Advosol.Paxi.FindXiObjects.SetPositionDown(System.String)">
            <summary>
            Change the position relative from the current position into the specified branch.
            The name can be specified as aa/bb/cc.. to move into nested branches.
            </summary>
            <param name="branchName">Name of the target branch specified as a simple name identifying nested branches ie form aa/bb/cc..</param>
        </member>
        <member name="M:Advosol.Paxi.FindXiObjects.SetPositionUp">
            <summary>
            Moves the current position one level toward the root. The position is unchanged if the position is the root.
            </summary>
            <returns>Returns true if the position is changed.</returns>
        </member>
        <member name="M:Advosol.Paxi.FindXiObjects.SetPosition(System.String)">
            <summary>
            Sets the current position in the hierarchy to the position referenced by the instance ID.
            </summary>
            <param name="instanceID">The starting InstanceId.FullyQualifiedId or the TypeId string obtained using the TypeId.ToString() method</param>
        </member>
        <member name="M:Advosol.Paxi.FindXiObjects.Find">
            <summary>
            Synchronously accesses the server to find the objects at the current position.
            </summary>
            <returns>ObjectAttributes of the found objects.</returns>
        </member>
        <member name="M:Advosol.Paxi.FindXiObjects.Find(Advosol.Paxi.OnFindObjectsComplete,System.Object)">
            <summary>
            Asynchronously accesses the server to find the objects at the current position.
            The call immediately returns. The result is returned to the specified competion handler.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.FindXiObjects.ClearFilter">
            <summary>
            Existing filter definitions are deleted. FindObjects calls will return an unfiltered result.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.FindXiObjects.AddORedFilters(Xi.Contracts.Constants.FilterOperandAll,Xi.Contracts.Constants.FilterOperatorEnum,System.Object)">
            <summary>
            Creates an ORed filter subset with the defined criterion and adds the subset to the filter set.
            In the filter evaluation the criteria in the ORed filter subset are ORed and the results are 
            ANDed if there are multiple added ORed filter subsets.
            The created ORedFilters objects is returned to be used to add additional filter criteria to the OR list.
            </summary>
            <param name="operand">The operand for this filter criterion.</param>
            <param name="compareOperator">The name of the operator.</param>
            <param name="compareValue">The comparison value.</param>
            <returns>The ORedFilters object with the added criteria.</returns>
        </member>
        <member name="M:Advosol.Paxi.FindXiObjects.AddNameFilter(System.String)">
            <summary>
            A 'name' filter set is added as an ORed filter set. Most Xi servers don't support ORed name filter definitions.
            </summary>
            <param name="filter">Filter string with optional wildcards such as "A*".</param>
            <returns>Null or the added ORedFilters. The application can use this object to add ORed filters for servers that support it.</returns>
        </member>
        <member name="M:Advosol.Paxi.FindXiObjects.AddNodeTypeFilter(System.String)">
            <summary>
            A filter is added for either branch or leaf nodes.
            </summary>
            <param name="type">Node type  "Leaf" or "Branch". Other values are ignored.</param>
        </member>
        <member name="P:Advosol.Paxi.FindXiObjects.MaxObjectsPerServerCall">
            <summary>
            The maximum number of objects the server may return in one call.
            Specify a large number for high performance or a lower number to reduse the WCF buffer size requirements.
            This value is used internally to make multiple server calls if necessary.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.FindXiObjects.Position">
            <summary>
            The current position;
            </summary>
        </member>
        <member name="P:Advosol.Paxi.FindXiObjects.Filter">
            <summary>
            The set of filters used by the server to find objects.<br/>
            The filter set is composed of a list of ORedFilters sets that are logically ANDed together.<br/>
            That is, to result in a value of TRUE, each ORedFilters element in the list must result in TRUE.<br/>
            (o11 OR o12 OR o13) AND (o21 OR o22)<br/>
            with only one criterion in each ORedFilters list the value is:<br/>
            o11 AND o21 AND o31<br/>
            The boolean Not member is provided to allow DeMorgan's Theorem to be used to convert an ORed expression of type:<br/>
            "((A AND B) OR (C AND D))" to <br/>
            "!((!A OR !B) AND (!C OR !D))",<br/>
            where '!' represents "NOT".
            </summary>
        </member>
        <member name="P:Advosol.Paxi.FindXiObjects.xiServer">
            <summary>
            The XiServer object used to access the server. The server must be connected.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.xiInformationReport">
            <summary>
            Application InformationReport handler.
            </summary>
            <param name="listId">The identifier of the list that makes the callback.
            The handler is installed per list. The listId is provided to allow the user to use the same handler
            for multiple lists, while being able to distinguish the callbacks.</param>
            <param name="updatedValues">The list of changed values.</param>
            <param name="errorInfo">The error message possibly returned when the Context has been opened with ContextOption EnableEnhancedErrorInfo. 
            This list is always null if the Context was not opened with ContextOptions EnableEnhancedErrorInfo.<br/>
            When ContextOptions EnableEnhancedErrorInfo is set, the server 
            can provide an error message that provides additional information about bad values.
            If additional error information is not provided for any values, then the list is set to null.</param>
        </member>
        <member name="T:Advosol.Paxi.xiEventNotification">
            <summary>
            Application EventNotification handler.
            </summary>
            <param name="listId">The identifier of the list that makes the callback.
            The handler is installed per list. The listId is provided to allow the user to use the same handler
            for multiple lists, while being able to distinguish the callbacks.</param>
            <param name="eventList">The list of events.</param>
        </member>
        <member name="T:Advosol.Paxi.XiCallback">
            <summary>
            This class handles callbacks from the server.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.XiCallback.Abort(System.String,Xi.Contracts.Data.ServerStatus,System.String)">
            <summary>
            This callback method is implemented by the client to be notified when the server server state changes to Aborting,
            or if the server wraps other servers, when the wrapped server state changes to Aborting. The Aborting state is entered when the server begins shutting down.
            Clients that use the poll interface instead of this callback interface are notified of aborting servers by calling the Status() 
            method, by receiving exceptions that are thrown when attempting to access a server that is shutting down, or by the XiStatusCode that 
            indicates a wrapped server is not communicating.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="serverStatus">
            The ServerStatus object that describes the server that is shutting down.
            </param>
            <param name="reason">
            The reason the context is being closed.
            </param>
        </member>
        <member name="M:Advosol.Paxi.XiCallback.InformationReport(System.String,System.UInt32,Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
            The Xi server calls this method to report data changes through the callback interface.
            </summary>
            <param name="contextId"></param>
            <param name="clientListId">The identifier for the list for which updating is to be enabled or disabled.</param>
            <param name="updatedValues"></param>
        </member>
        <member name="M:Advosol.Paxi.XiCallback.EventNotification(System.String,System.UInt32,Xi.Contracts.Data.EventMessage[])">
            <summary>
            The Xi server calls this method to report event notifications through the callback interface.
            </summary>
            <param name="contextId"></param>
            <param name="clientListId">The identifier for the list for which updating is to be enabled or disabled.</param>
            <param name="eventList"></param>
        </member>
        <member name="M:Advosol.Paxi.XiCallback.EventNotification(System.String,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.EventMessage})">
            <summary>
            The Xi server calls this method to report event notifications through the callback interface.
            </summary>
            <param name="contextId"></param>
            <param name="clientListId">The identifier for the list for which updating is to be enabled or disabled.</param>
            <param name="eventList"></param>
        </member>
        <member name="M:Advosol.Paxi.XiCallback.PassthroughCallback(System.String,System.Int32,Xi.Contracts.Data.PassthroughResult)">
            <summary>
            This method returns the results of invoking an asynchronous passthrough.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="invokeId">
            The identifier for this invocation of the passthrough defined by the client 
            in the request.  
            </param>
            <param name="passthroughResult">
            The result of executing the passthrough, consisting of the result code, the invokeId 
            supplied in the request, and a byte array.  It is up to the client application to 
            interpret this byte array.  
            </param>
        </member>
        <member name="T:Advosol.Paxi.Components.XiBrowseControl">
            <summary>
            Control that bowses the server to find the objects one level at a time.
            Object can be dragged to a list with selected objects. This list can then be used
            e.g. to read the object values.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.XiBrowseControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiBrowseControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiBrowseControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiBrowseControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiBrowseControl.Show">
            <summary>
            Browse the root node in the server.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiBrowseControl.Clear">
            <summary>
            Clear the browse tree.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiBrowseControl.FindObjects">
            <summary>
            This method issues the FindObjects() call and creates the tree of objects, one level at a time.  
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiBrowseControl.AddObjectToSelectedList(Xi.Contracts.Data.ObjectAttributes)">
            <summary>
            Add an object to the list.
            </summary>
            <param name="newObj">Object to be added</param>
        </member>
        <member name="P:Advosol.Paxi.Components.XiBrowseControl.xiServerComp">
            <summary>
            The Form object that uses this control and requires synchronization.
            Usually this is the Forms object that owns this component.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiBrowseControl.Tag">
            <summary>
            User defined data associated with the object.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiBrowseControl.BrowseFilter">
            <summary>
            The set of filters used by the server to find objects.<br/>
            The filter set is composed of a list of ORedFilters sets that are logically ANDed together.<br/>
            That is, to result in a value of TRUE, each ORedFilters element in the list must result in TRUE.<br/>
            (o11 OR o12 OR o13) AND (o21 OR o22)<br/>
            with only one criterion in each ORedFilters list the value is:<br/>
            o11 AND o21 AND o31<br/>
            The boolean Not member is provided to allow DeMorgan's Theorem to be used to convert an ORed expression of type:<br/>
            "((A AND B) OR (C AND D))" to <br/>
            "!((!A OR !B) AND (!C OR !D))",<br/>
            where '!' represents "NOT".
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiBrowseControl.ServerType">
            <summary>
            Determines the type of server to be browsed (all, da, hda, ae).
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiBrowseControl.MaxObjectsToReturn">
            <summary>
            Maximum number of objects to return by FindObjects
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiBrowseControl.SelectedObjectIDs">
            <summary>
            InstanceIDs of currently selected objects.
            </summary>
        </member>
        <member name="E:Advosol.Paxi.Components.XiBrowseControl.Notifications">
            <summary>
            Notification of internal internal event, such as errors detected in server access.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.CustomizeEventView">
            <summary>
            Summary description for CustomizeEventView.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.CustomizeEventView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.CustomizeEventView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.WinAPI.EnumComputers">
            <summary>
            Enumerates the computers on the local network using the Netapi32.dll - NetServerEnum function.
            </summary>
            <returns>String array with the names of the accessible computers.</returns>
        </member>
        <member name="T:Advosol.Paxi.XiStatus">
             <summary>
             A Value Status Code is associated with a Xi Data Value providing 
             information about the status of the value.  This version of the 
             Value Status Code is intended primarily for use by an OPC Xi 
             client to interpret the meaning of the status value.<br/>
             <br/>
             The Xi Status code is made up of several parts as follows.<br/>
              Intel bit numbering<br/>
               3 3 2 2 2 2 2 2   2 2 2 2 1 1 1 1   1 1 1 1 1 1
               1 0 9 8 7 6 5 4   3 2 1 0 9 8 7 6   5 4 3 2 1 0 9 8   7 6 5 4 3 2 1 0<br/>
               Xi Documentation bit numbering<br/>
               3 3 2 2 2 2 2 2   2 2 2 2 2 1 1 1   1 1 1 1 1 1 1<br/>
               2 1 0 9 8 7 6 5   4 3 2 1 0 9 8 7   6 5 4 3 2 1 0 9   8 7 6 5 4 3 2 1<br/>
             Bit patter for Status Groups "Bad", "Uncertain" and "Good"<br/>
             -------------------------------------------------------------------------<br/>
             | S S B B B B L L | V V V N C A A A | D D D D D D D D | D D D D D D D D |<br/>
             -------------------------------------------------------------------------<br/>
             Bit pattern for Status Group "Bad Server Access"<br/>
             -------------------------------------------------------------------------<br/>
             | S S B B B B 0 0 | X F F F F F F F | D D D D D D D D | D D D D D D D D |<br/>
             -------------------------------------------------------------------------<br/>
            <br/>
               S S = Status Group (Bits)<br/>
                   B B B B = Status Detail<br/>
               0 0 = Bad<br/>
                   0 0 0 0 = Non Specific<br/>
                   0 0 0 1 = Configuration Error<br/>
                   0 0 1 0 = Not Connected<br/>
                   0 0 1 1 = Device Failure<br/>
                   0 1 0 0 = Sensor Failure<br/>
                   0 1 0 1 = Last Known Value<br/>
                   0 1 1 0 = Communications Failure<br/>
                   0 1 1 1 = Out of Service<br/>
                   1 0 0 0 = Waiting for Initial Data Value<br/>
            <br/>
               0 1 = Uncertain<br/>
                   0 0 0 0 = Non Specific<br/>
                   0 0 0 1 = Usable Value<br/>
                   0 1 0 0 = Sensor Not Accurate<br/>
                   0 1 0 1 = Engineering Units Exceeded<br/>
                   0 1 1 0 = Sub Normal<br/>
            <br/>
               1 0 = Bad Server Access {Only failures where the value is not usable.}<br/>
                   0 0 0 0 = Non Specific {Deprecated}<br/>
                   0 0 0 1 = Instance Id Invalid {Deprecated}<br/>
                   0 0 1 0 = Object Unknown {Deprecated}<br/>
                   0 0 1 1 = Object Element Unknown {Deprecated}<br/>
                   0 1 0 0 = Access Denied {Deprecated} *** Encode this a a Win32 Access Denied *** 0x98000005 ***<br/>
                             S R C N  See http:///msdn.microsoft.com/en-us/library/cc231196(v=PROT.10).aspx<br/>
                   0 1 0 0 = 0 0 0 0 = Success HRESULT ##<br/>
                   0 1 0 1 = 1 0 0 0 = Fail HRESULT<br/>
                   0 1 1 0 = 0 0 0 1 = Success Win32 Severity as HRESULT ##<br/>
                   0 1 1 1 = 0 1 0 1 = Informational Win32 Severity as HRESULT ##<br/>
                   1 0 0 0 = 1 0 0 1 = Warning Win32 Severity as HRESULT<br/>
                   1 0 0 1 = 1 1 0 1 = Error Win32 Severity as HRESULT<br/>
                   1 0 1 0 = 0 0 1 0 = Customer Success HRESULT ##<br/>
                   1 0 1 1 = 1 0 1 0 = Customer Fail HRESULT <br/>
                   1 1 0 0 = 0 0 1 1 = Customer Success Win32 Severity as HRESULT ##<br/>
                   1 1 0 1 = 0 1 1 1 = Customer Informational Win32 Severity as HRESULT ##<br/>
                   1 1 1 0 = 1 0 1 1 = Customer Warning Win32 Severity as HRESULT<br/>
                   1 1 1 1 = 1 1 1 1 = Customer Error Win32 Severity as HRESULT<br/>
                   ******************************************************************************<br/>
                   * When the Status Group is Bad Server Access then the lower 24 Bits are used *<br/>
                   * to define the Facility and Code as defined by Microsoft.                   *<br/>
                   ******************************************************************************<br/>
            <br/>
               1 1 = Good<br/>
                   0 0 0 0 = Non Specific (Normal Condition)<br/>
                   0 1 1 0 = Local Override<br/>
            <br/>
               Additional Status Information (when not Bad Server Access)<br/>
                           L L = Limited Flags<br/>
                           0 0 = Not Limited<br/>
                           0 1 = Low Limited<br/>
                           1 0 = High Limited<br/>
                           1 1 = Constant<br/>
            <br/>
                                 V V V = Additional Historical Status<br/>
                                 0 0 0 = Not Used<br/>
                                 0 0 1 = Raw Value<br/>
                                 0 1 0 = No Value<br/>
                                 0 1 1 = Extra Value<br/>
                                 1 0 0 = Lost Value<br/>
                                 1 0 1 = Interpolated Value<br/>
                                 1 1 0 = Calculated Value<br/>
                                 1 1 1 = Partial Calculated Value<br/>
            <br/>
                                       N = Historical Bounding Value<br/>
                                       0 = No Bounding Value<br/>
                                       1 = Bounding Value Included<br/>
            <br/>
                                         C = Historical Conversion<br/>
                                         0 = No Conversion Error<br/>
                                         1 = Conversion Error<br/>
            <br/>
                                           A A A = Additional Deltals<br/>
                                           0 0 0 = Not Used (No HRESULT value present)<br/>
                                           0 0 1 = Vendor Specific<br/>
                                           0 1 0 = HRESULT (Facility Code 0)<br/>
                                           0 1 1 = Xi HRESULT (Facility Code = 0x777)<br/>
                                           1 0 0 = IO Error Code (Facility Code = 4)<br/>
                                           1 0 1 = ITF Error Code (Facility code = 4)<br/>
                                           1 1 0 = Win32 Error Code (Facility code = 7) *** Changed from 5 ***<br/>
                                           1 1 1 = Additional Error Code<br/>
             </summary>
            <summary>
            The Xi status code is a structured 32-bit unsigned integer.  This class 
            defines the structure and provides properties used to extract and set 
            bit-fields of the 32-bit status code.  <br/>
            The structure of the status code is defined as follows, where bit 32 
            is the Most Significant Bit (MSB):<br/>
            Bits    Property<br/>
            32-25   StatusByte<br/>
            24-17   FlagsByte<br/>
            16-1    AdditionalDetail<br/>
            The StatusByte contains the success/error code associated with the value. <br/>
            The FlagsByte contains codes that further describe the status of historical values,
            and that identify the format of the AdditionalDetail bits. <br/>
            The AdditionalDetail is a 16-bit value that allows the server to provide 
            additional detail about the value. These bits can contain a vendor-specific 
            code or an HRESULT as indicated by the FlagsByte.  The values for the 
            AdditionalDetail are defined by Xi.Contracts.Constants.AdditionalDetailType.<br/>
            16-1    AdditionalDetail<br/>
            </summary>
        </member>
        <member name="M:Advosol.Paxi.XiStatus.#ctor(System.UInt32)">
            <summary>
            As the Xi Status Code is represented as a uint in the Xi Contracts 
            this constructor should be sufficient for an Xi client.
            </summary>
            <param name="statusCode">A Xi Status Code</param>
        </member>
        <member name="M:Advosol.Paxi.XiStatus.DecodeValueStatus">
            <summary>
            This method decodes the Xi Status into a string for a 
            user friendly presentation of the status code. 
            </summary>
            <returns>A user readable string representing the Xi Status.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiStatus.DecodeValueStatus(System.Object)">
            <summary>
            This method decodes the Xi Status into a string for a 
            user friendly presentation of the status code. 
            </summary>
            <param name="lookUpResultCode">This is a delegate that provides 
            a callback to the context LookupResultCodes this allows the 
            Fault Strings class to lookup error codes that are not currently known. </param>
            <returns>A user readable string representing the Xi Status.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiStatus.DecodeHistoryStatus">
            <summary>
            This method decodes the Xi Status into a string for a 
            user friendly presentation of the status code.  This method 
            may be used when the value is a historical value with the 
            additional information about historical values.
            </summary>
            <returns>A user readable string representing the Xi Status.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiStatus.DecodeHistoryStatus(System.Object)">
            <summary>
            This method decodes the Xi Status into a string for a 
            user friendly presentation of the status code.  This method 
            may be used when the value is a historical value with the 
            additional information about historical values.
            </summary>
            <param name="lookUpResultCode">This is a delegate that provides 
            a callback to the context LookupResultCodes this allows the 
            Fault Strings class to lookup error codes that are not currently known. </param>
            <returns>A user readable string representing the Xi Status.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiStatus.ParseNumber(System.String)">
            <summary>
            Parses out error codes and allows for both integer and hexidecimal varieties.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.XiStatus.ToString">
            <summary>
            This override of the To String method will generally convert most Value Status Codes to a user friendly string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.XiStatus.ToString(System.Object)">
            <summary>
            This version of the To String method will also convert most Value Status Codes to a user friendly string 
            with the additional advantage of calling the server to lookup a status code.
            </summary>
            <param name="lookUpResultCode">This is a delegate that provides for a callback to the context LookupResultCodes 
            this allows the Fault Strings class to lookup error codes that are not currently known.  </param>
            <returns></returns>
        </member>
        <member name="F:Advosol.Paxi.XiStatus._statusCode">
            <summary>
            The Xi Status Code as defined in Xi Contracts Data.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.XiStatus.#ctor(System.UInt16,System.UInt32)">
            <summary>
            Builds the Xi status code for a 16bit OPC DA quality code and a HResult value
            </summary>
            <param name="opcDaQuality">16 bit OPC DA quality value</param>
            <param name="hResult">OPC or Windows HResult value</param>
        </member>
        <member name="M:Advosol.Paxi.XiStatus.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Builds the Xi status code for a 16bit OPC DA quality code and a HResult value
            </summary>
            <param name="opcHdaQuality">32 bit OPC HDA quality value</param>
            <param name="hResult">OPC or Windows HResult value</param>
        </member>
        <member name="M:Advosol.Paxi.XiStatus.Decoder(System.UInt32)">
            <summary>
            Creates an object with the decoded status code value.
            </summary>
            <param name="statusCode">The Xi status code value to decode</param>
            <returns>Decoder object for access to the status code elements.</returns>
        </member>
        <member name="M:Advosol.Paxi.XiStatus.Decode">
            <summary>
            Decodes the XiStatucCode und makes individual parts easily accessible.
            </summary>
            <param name="code">XiStatusCode value</param>
            <returns>XiStatusDecoder object</returns>
        </member>
        <member name="M:Advosol.Paxi.XiStatus.AdditionalDetailType(System.UInt32)">
            <summary>
            AdditionalDetailType is an 3-bit property that indicates how the 
            AdditionalDetail property is used.  The StatusCodeAdditionalDetailType 
            enumeration defines the values for this property.<br/>
            </summary>
            <param name="statusCode">
            The 32-bit status code from which AdditionalDetailType is to be extracted. 
            </param>
            <returns>
            The AdditionalDetailType value.
            </returns>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.IsGood">
            <summary>
            A value is considered good when the Quality Bits specifies "Good".
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.IsUncertain">
            <summary>
            A value is considered uncertain when the Quality Bits specifies the "Uncertain".
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.IsUsable">
            <summary>
            A value is considered usable when the Quality Bits specify either "Good" or "Uncertain".
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.IsBad">
            <summary>
            A value is considered bad when the Quality Bits specifies the "Bad".
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.IsNotUsable">
            <summary>
            A value is considered not usable if the Quaility Bits specify either "Bad" or "Server Bad"
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.IsHRESULT">
            <summary>
            When the Quality Bits are "Bad Server Access" the value is not usable.  
            An HRESULT is encoded in the status.
            The HRESULT may be reteived from the HRESULT property.
            This property returns "true" when the Xi Status Value 
            represents a HRESULT encoded in the status.<br/>
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.HasHRESULT">
            <summary>
            A subset of HRESULT values may be included with in a Xi Status Code.  
            It should be noted that all HRESULT values that may be included in 
            a Xi Status Code are SUCCEEDED(hr).  Any FAILED(hr) the value is 
            considered not useable and bad and the HRESULT is encoded in the 
            Xi Status Code.
            This property returns "true" when an HRESULT is encoded in the status.<br/>
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.HasVendorSpecificDetail">
            <summary>
            This property will return "true" when Vendor Specific Detail is present in the Xi Status Code.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.IsNotLimited">
            <summary>
            This property will return "true" when the Xi Status Code indicates that the value is not limited.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.IsLowLimited">
            <summary>
            This property will return "true" when the Xi Status Code indicates that the value is low limited.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.IsHighLimited">
            <summary>
            This property will return "true" when the Xi Status Code indicates that the value is high limited.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.IsConstant">
            <summary>
            This property will return "true" when the Xi Status Code indicates that the value is constant;
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.HRESULT">
            <summary>
            This property is used to obtain an HRESULT that may be present in the Xi Status Code.
            When this method is not able to extract the HRESULT a value of -1 is returned.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.HRESULTdescription">
            <summary>
            Description of the HRESULT code that may be present in the Xi Status Code.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.StatusByte">
            <summary>
            This property returns the full Status Byte as defined by OPC .NET.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.StatusBits">
            <summary>
            This property returns the Xi (OPC DA) status bits. 
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.QualityBits">
            <summary>
            This property returns just the Quality bits (the two high-order bits) from the Xi (OPC DA) status bits.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.StatusCodeGroup">
            <summary>
            This property returns just the Status Code Group; the high order two bits of the Xi StatusCode.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.StatusCodeSubstatusBits">
            <summary>
            This property returns just the unsigned integer value of the 4 Substatus bits of the Xi Status Code.
            The substatus bits are the four bits that follow the Status Group Bits (the two high order bits) 
            The valid values are 0 to 15.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.LimitBits">
            <summary>
            This property returns the Xi (OPC DA) limit bits.
            Note that zero is returned if the Xi Status Code represents an HRESULT.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.OpcDaQuality">
            <summary>
            Returns the equivalent of the OPC DA Quality.
            Note: 0x0080 is returned if the Xi Status Code is an HRESULT.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.OpcHdaQuality">
            <summary>
            Returns the equivalent of the OPC HDA Quality.
            Note: 0x0080 is returned if the Xi Status Code is an HRESULT.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.HistoricalValueType">
            <summary>
            This property returns the Xi Historical value type.
            Note that zero is returned if the Xi Status Code represents an HRESULT.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.HistoricalBoundingValue">
            <summary>
            This property returns the Historical Bounding Value flag.
            Note that false is returned if the Xi Status Code represents an HRESULT.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatus.HistoricalConversionError">
            <summary>
            This property returns the Historical Conversion Error flag.
            Note that false is returned if the Xi Status Code represents an HRESULT.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.XiStatusCodeFromOpcCOM">
            <summary>
            Builds the Xi status code from Quality and HResult values.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.XiStatusCodeFromOpcCOM.#ctor(System.UInt16,System.UInt32)">
            <summary>
            Builds the Xi status code for a 16bit OPC DA quality code and a HResult value
            </summary>
            <param name="opcDaQuality">16 bit OPC DA quality value</param>
            <param name="hResult">OPC or Windows HResult value</param>
        </member>
        <member name="M:Advosol.Paxi.XiStatusCodeFromOpcCOM.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Builds the Xi status code for a 16bit OPC DA quality code and a HResult value
            </summary>
            <param name="opcHdaQuality">32 bit OPC HDA quality value</param>
            <param name="hResult">OPC or Windows HResult value</param>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeFromOpcCOM._statusCode">
            <summary>
            Holds the 32 Bit Xi Value Status Code -- See Xi Contracts Data Xi Status Code.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatusCodeFromOpcCOM.StatusCode">
            <summary>
            Property to obtain the status code as a uint as transported by the Xi Contracts.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatusCodeFromOpcCOM.StatusByte">
            <summary>
            Property to obtain the Status Byte as defined in Xi.Contracts.Data XiStatusCode.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatusCodeFromOpcCOM.FlagsByte">
            <summary>
            Property to obtain the Flags Byte as defined in Xi.Contracts.Data XiStatusCode.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.XiStatusCodeFromOpcCOM.AdditionalDetail">
            <summary>
            Property to obtain the Additional Detail as defined in Xi.Contracts.Data XiStatusCode.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.XiStatusCodeStatusBits">
            <summary>
            The Status Bits are the high-order 6 bits of the high-order byte (the StatusByte) of the XiStatus 
            code as defined in Xi.Contracts.Data.XiStatusCode.  The high-order two bits of the Status Bits are the 
            Status Group bits. They indicate whether a value is good, bad, or uncertain and when bad, whether or 
            not the bad status was assigned by the server. Server assigned bad status codes are typically assigned 
            when the server is unable to retrieve the value from the underlying system.<br/>  
            The four bits following the two Status Group bits indicate the reason associated with the Status 
            Group bits value.  The final two bits of the StatusByte are the limit bits. Their values are defined 
            in Xi.Contracts.Contstants.XiStatusCodeLimitBits.  This layout is summarized as follows.<br/>
            GGRRRRLL, where <br/>
                GG     = Status Group Bits<br/>
                RRRR   = Reason Bits <br/>
                LL     = Limit Bits <br/>
            In the value definitions for the StatusBits, GG values are individually defined, but the 
            Reason Bit values are defined in combination with the Group Bits as GGRRRR. The Limit Bits are 
            separately defined in Xi.Contracts.Contstants.XiStatusCodeLimitBits.<br/>
            This class defines values for the 2-bit Status Group Bits, the 6-bit Status Bits, and 
            additional values for their manipulation, such as bit masks and shift values.<br/>
            In general there are two definitions for each 2-bit Status Group Bits value and each 6-bit 
            Status Bits value.  One value is the hex representation of the two-bit value or the six-bit value. 
            The other is the hex representation in the context of the full 32-bit Xi Status Code. For example,
            the GG bits for the Uncertain value are 01. Therefore, the two definitions for it are: <br/>
            StatusCodeStatusGroupUncertain = 0x1,  // two-bit value<br/>
            StatusCodeStatusGroupUncertainBits = 0x40000000, // 32-bit value<br/>
            The BadServerAccess values are used to indicate that the Xi server was unable to access 
            the data object value from the underlying OPC Classic server or from the underlying system.<br/>
            In general an HRESULT value of SUCCEEDED(hr) returned by the OPC Classic server indicates 
            successful access of the data object. In these cases, the Xi server would normally use the OPC 
            Quality returned with the data object value to construct the Xi Status Code.<br/>
            However, there can be HRESULT values that are SUCCEEDED(hr), but that indicates that the OPC 
            Classic server was unable to access the data object, and where the OPC Quality returned is not useful. 
            In these cases, the Xi server can construct an Xi Status Code that indicates BAD SERVER ACCESS. 
            BAD SERVER ACCESS can also be constructed by the Xi Server when the returned HRESULT indicates 
            failure.<br/>
            See ValueStatusCode in both Xi Common Support and Xi OPC Com API for additional 
            details on the encoding of HRESULT values.<br/>
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.StatusByteMask">
            <summary>
            Mask used to obtain the full Status Byte
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.StatusCodeStatusMask">
            <summary>
            The mask for the Status Bits (the high-order six bits) of the Xi Status Code.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.StatusCodeShiftCount">
            <summary>
            The StatusCodeShiftCount is used to shift the Status Bits (the high-order six bits) 
            of the Xi Status Code uint to its low-order six bits, or to initially set the Status 
            Bits value into a uint that is to become the Xi Status Code and then shift them to 
            the high-order six bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.SubStatusBitsShiftedMask">
            <summary>
            Mask used to keep the shifted sub status code bits
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.StatusCodeStatusByteShiftCount">
            <summary>
            The StatusCodeStatusByteShiftCount is used to shift the Status Byte (the high-order 
            byte) of the Xi Status Code uint to its low-order byte, or to initially set the 
            Status Byte value into a uint that is to become the Xi Status Code and then shift 
            them to the high-order byte. Note that the Xi Status Byte uses the same bit pattern 
            as the low order byte of the OPC DA Quality so it can be copied the Xi Status Code 
            uint and then shifted to the proper byte position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.StatusCodeStatusGroupMask">
            <summary>
            The mask for the Status Group Bits (the high order two bits) of the Xi Status Code.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.StatusCodeSubstatusBitsMask">
            <summary>
            The mask for the SubStatus bits of the Xi Status Code. The substatus bits are the 
            four bits that follow the Status Group Bits (the two high order bits).
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.StatusCodeStatusGroupShiftCount">
            <summary>
            The StatusCodeStatusGroupShiftCount is used to shift the Status Group Bits (the high-order 
            two bits) of the Xi Status Code uint to its low-order two bits, or to initially set the Status 
            Group Bits value into a uint that is to become the Xi Status Code and then shift them to 
            the high-order two bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.StatusCodeStatusGroupBad">
            <summary>
            The 2-bit value for bad status. This value can be used to test for bad 
            status after shifting the Status Group bits of a Xi Status Code uint to its 
            low-order two bits. It can also be used to set the high-order two bits 
            to indicate bad status by setting the Xi Status Code uint to this value and 
            then shifting it to the high-order two bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.StatusCodeStatusGroupBadBits">
            <summary>
            The 32-bit value for bad status. This value can be used to test for 
            bad status after masking off the lower 30 bits of the Xi Status Code. 
            It can also be used when constructing a bad status code by setting the 
            Xi Status Code uint to this value.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.StatusCodeStatusGroupUncertain">
            <summary>
            The 2-bit value for uncertain status. This value can be used to test for uncertain 
            status after shifting the Status Group bits of a Xi Status Code uint to its 
            low-order two bits. It can also be used to set the high-order two bits 
            to indicate uncertain status by setting the Xi Status Code uint to this value and 
            then shifting it to the high-order two bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.StatusCodeStatusGroupUncertainBits">
            <summary>
            The 32-bit value for uncertain status. This value can be used to test for 
            uncertain status after masking off the lower 30 bits of the Xi Status Code. 
            It can also be used when constructing an uncertain status code by setting the 
            Xi Status Code uint to this value.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.StatusCodeStatusGroupServerBad">
            <summary>
            The 2-bit value for bad server access status. This value can be used to test for 
            bad server access status after shifting the Status Group bits of a Xi Status Code 
            uint to its low-order two bits. It can also be used to set the high-order two bits 
            to indicate bad server access status by setting the Xi Status Code uint to this 
            value and then shifting it to the high-order two bits.  Bad server access indicates 
            that the Xi server was unable to access the underlying data source (e.g. OPC DA server) 
            for the value.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.StatusCodeStatusGroupServerBadBits">
            <summary>
            The 32-bit value for bad server access status. This value can be used to test for 
            bad server access status after masking off the lower 30 bits of the Xi Status Code. 
            It can also be used when constructing a bad server access status code by setting the 
            Xi Status Code uint to this value.  Bad server access indicates that the Xi server 
            was unable to access the underlying data source (e.g. OPC DA server) for the value.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.StatusCodeStatusGroupGood">
            <summary>
            The 2-bit value for good status. This value can be used to test for good status 
            after shifting the Status Group bits of a Xi Status Code uint to its low-order two bits. 
            It can also be used to set the high-order two bits to indicate good status by setting 
            the Xi Status Code uint to this value and then shifting it to the high-order two bits.  
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.StatusCodeStatusGroupGoodBits">
            <summary>
            The 32-bit value for good status. This value can be used to test for good status after
            masking off the lower 30 bits of the Xi Status Code. 
            It can also be used when constructing a good status code by setting the Xi Status Code 
            uint to this value.  
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadNonSpecific">
            <summary>
            The value is bad but no specific reason is known.
            Use Bad Non Specific when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadNonSpecificBits">
            <summary>
            The value is bad but no specific reason is known.
            Use Bad Non Specific Bits when the value is in the Xi defined high order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadConfigError">
            <summary>
            There is some server specific problem with the 
            configuration. For example the item in question has 
            been deleted from the configuration.
            Use Bad Config Error when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadConfigErrorBits">
            <summary>
            There is some server specific problem with the 
            configuration. For example the item in question has 
            been deleted from the configuration.
            Use Bad Config Error Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadNotConnected">
            <summary>
            The input is required to be logically connected to 
            something but is not. This quality may reflect that no 
            value is available at this time, for reasons like the 
            value may have not been provided by the data source.
            Use Bad Not Connected when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadNotConnectedBits">
            <summary>
            The input is required to be logically connected to 
            something but is not. This quality may reflect that no 
            value is available at this time, for reasons like the 
            value may have not been provided by the data source.
            Use Bad Not Connected Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadDeviceFailure">
            <summary>
            A device failure has been detected.
            Use Bad Device Fallure when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadDeviceFailureBits">
            <summary>
            A device failure has been detected.
            Use Bad Device Failure Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadSensorFailure">
            <summary>
            A sensor failure had been detected (the ’Limits’ field 
            can provide additional diagnostic information in some 
            situations).
            Use Bad Sensor Fallure when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadSensorFailureBits">
            <summary>
            A sensor failure had been detected (the ’Limits’ field 
            can provide additional diagnostic information in some 
            situations).
            Use Bad Sensor Failure Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadLastKnownValue">
            <summary>
            Communications have failed. However, the last known value 
            is available. Note that the ‘age’ of the value may be 
            determined from its timestamp.
            Use Bad Last Known Value when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadLastKnownValueBits">
            <summary>
            Communications have failed. However, the last known value 
            is available. Note that the ‘age’ of the value may be 
            determined from its timestamp.
            Use Bad Last Known Value Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadCommFailure">
            <summary>
            Communications have failed. There is no last known 
            value available.
            Use Bad Comm Fallure when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadCommFailureBits">
            <summary>
            Communications have failed. There is no last known 
            value available.
            Use Bad Comm Failure Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadOutOfService">
            <summary>
            The block is off scan or otherwise locked. This code 
            is also used when the Monitored Item or Subscription
            is disabled.
            Use Bad Out of Service when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadOutOfServiceBits">
            <summary>
            The block is off scan or otherwise locked. This code 
            is also used when the Monitored Item or Subscription
            is disabled.
            Use Bad Out of Service Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadWaitingForInitialData">
            <summary>
            After Items are added to a group, it may take some time 
            for the server to actually obtain values for these items. 
            In such cases the client might perform a read (from cache), 
            or establish a ConnectionPoint based subscription and/or 
            execute a Refresh on such a subscription before the values 
            are available. This substatus is only available from 
            OPC DA 3.0 or newer servers.
            Use Bad Waiting For Initial Data when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadWaitingForInitialDataBits">
            <summary>
            After Items are added to a group, it may take some time 
            for the server to actually obtain values for these items. 
            In such cases the client might perform a read (from cache), 
            or establish a ConnectionPoint based subscription and/or 
            execute a Refresh on such a subscription before the values 
            are available. This substatus is only available from 
            OPC DA 3.0 or newer servers.
            Use Bad Waiting For Initial Data when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.UncertainNonSpecific">
            <summary>
            There is no specific reason why the value is uncertain.
            Use Uncertain Non Specific when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.UncertainNonSpecificBits">
            <summary>
            There is no specific reason why the value is uncertain.
            Use Uncertain Non Specific Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.UncertainLastUsableValue">
            <summary>
            Whatever was writing this value has stopped doing so. The 
            returned value should be regarded as ‘stale’. Note that this 
            differs from a BAD value with Substatus = Last Known Value. 
            That status is associated specifically with a detectable 
            communications error on a ‘fetched’ value. This error is 
            associated with the failure of some external source to ‘put’ 
            something into the value within an acceptable period of time. 
            Note that the ‘age’ of the value can be determined from 
            the timestamp. 
            Use Uncertain Last Usable Value when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.UncertainLastUsableValueBits">
            <summary>
            Whatever was writing this value has stopped doing so. The 
            returned value should be regarded as ‘stale’. Note that this 
            differs from a BAD value with Substatus = Last Known Value. 
            That status is associated specifically with a detectable 
            communications error on a ‘fetched’ value. This error is 
            associated with the failure of some external source to ‘put’ 
            something into the value within an acceptable period of time. 
            Note that the ‘age’ of the value can be determined from 
            the timestamp. 
            Use Uncertain Last Usable Value Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.UncertainSensorNotAccurate">
            <summary>
            Either the value has ‘pegged’ at one of the sensor limits 
            (in which case the limit field should be set to LowLimited 
            or HighLimited) or the sensor is otherwise known to be out 
            of calibration via some form of internal diagnostics (in 
            which case the limit field should be NotLimited). 
            Use Uncertain Sensor Not Accurate when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.UncertainSensorNotAccurateBits">
            <summary>
            Either the value has ‘pegged’ at one of the sensor limits 
            (in which case the limit field should be set to LowLimited 
            or HighLimited) or the sensor is otherwise known to be out 
            of calibration via some form of internal diagnostics (in 
            which case the limit field should be NotLimited). 
            Use Uncertain Sensor Not Accurate Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.UncertainEngineeringUnitsExceeded">
            <summary>
            The returned value is outside the limits defined for this 
            parameter. Note that in this case (per the Fieldbus 
            Specification) the ‘Limits’ field indicates which limit 
            has been exceeded but does NOT necessarily imply that the 
            value cannot move farther out of range. 
            Use Uncertain Engineering Units Exceeded when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.UncertainEngineeringUnitsExceededBits">
            <summary>
            The returned value is outside the limits defined for this 
            parameter. Note that in this case (per the Fieldbus 
            Specification) the ‘Limits’ field indicates which limit 
            has been exceeded but does NOT necessarily imply that the 
            value cannot move farther out of range. 
            Use Uncertain Engineering Units Exceeded Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.UncertainSubNormal">
            <summary>
            The value is derived from multiple sources and has less 
            than the required number of Good sources.
            Use Uncertain Sub Normal when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.UncertainSubNormalBits">
            <summary>
            The value is derived from multiple sources and has less 
            than the required number of Good sources.
            Use Uncertain Sub Normal Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessNonSpecific">
            <summary>
            Deprecated.
            The value is bad but no specific reason is known.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessInstanceIdInvalid">
            <summary>
            Deprecated.
            The format of the InstanceId is not valid. 
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessObjectUnknown">
            <summary>
            Deprecated.
            The InstanceId refers to a object that could not be found.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessObjectElementUnknown">
            <summary>
            Deprecated.
            The InstanceId refers to element of an object and that 
            element could not be found.         
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessAccessDenied">
            <summary>
            Deprecated.
            Access to the value was denied.
            {The Additional Detail Value must be zero.}
            *** Encode Win32 Access Denied as Xi Status Code 0x98000005 ***<br/>
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessNonSpecificBits">
            <summary>
            This bit pattern is used for not transformed HRESULT / NTSTATUS / Win32 codes.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessWithSuccessHResult">
            <summary>
            {New}
            In general HRESULT value that are SUCCEEDED(hr) are 
            not encoded as Bad Server Access.  It is assumed that 
            such values are usable and should be encoded using 
            one either a good or uncertain quality.  Allowing 
            these to be encoded here is done for completeness only.  
            Any use a SUCCEEDED(hr) is considered a deviation from 
            the Xi Specification.
            This value represents a SUCCEEDED(hr) S R C N bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessWithSuccessHResultBits">
            <summary>
            {New}
            In general HRESULT value that are SUCCEEDED(hr) are 
            not encoded as Bad Server Access.  It is assumed that 
            such values are usable and should be encoded using 
            one either a good or uncertain quality.  Allowing 
            these to be encoded here is done for completeness only.  
            Any use a SUCCEEDED(hr) is considered a deviation from 
            the Xi Specification.
            This value represents a SUCCEEDED(hr) S R C N bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessHResultFailNTStatusWarning">
            <summary>
            {New}
            This value represents a FAILED(hr) S bit set with the R C N bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessHResultFailNTStatusWarningBits">
            <summary>
            {New}
            This value represents a FAILED(hr) S bit set with the R C N bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessNTStatusInformational">
            <summary>
            {New}
            In general Win32 NTSTATUS value with a severity of 
            Success are not encoded as Bad Server Access.  It is 
            assumed that such values are usable and should be 
            encoded using one either a good or uncertain quality.  
            Allowing these to be encoded here is done for completeness 
            only.  Any use a Success severity is considered a deviation 
            from the Xi Specification.
            This value represents a Win32 status with N bit set and S R C bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessSuccessNTStatusInfoBits">
            <summary>
            {New}
            In general Win32 NTSTATUS value with a severity of 
            Success are not encoded as Bad Server Access.  It is 
            assumed that such values are usable and should be 
            encoded using one either a good or uncertain quality.  
            Allowing these to be encoded here is done for completeness 
            only.  Any use a Success severity is considered a deviation 
            from the Xi Specification.
            This value represents a Win32 status with N bit set and S R C bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessNTStatusError">
            <summary>
            {New}
            In general Win32 NTSTATUS value with a severity of 
            Informational are not encoded as Bad Server Access.  It is 
            assumed that such values are usable and should be 
            encoded using one either a good or uncertain quality.  
            Allowing these to be encoded here is done for completeness 
            only.  Any use a Informational severity is considered a deviation 
            from the Xi Specification.
            This value represents a Win32 status with N R bits set and S C bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessNTStatusErrorBits">
            <summary>
            {New}
            In general Win32 NTSTATUS value with a severity of 
            Informational are not encoded as Bad Server Access.  It is 
            assumed that such values are usable and should be 
            encoded using one either a good or uncertain quality.  
            Allowing these to be encoded here is done for completeness 
            only.  Any use a Informational severity is considered a deviation 
            from the Xi Specification.
            This value represents a Win32 status with N R bits set and S C bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusSuccess">
            <summary>
            {New}
            This value represents a Win32 status with S N bits set and R C bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusSuccessBits">
            <summary>
            {New}
            This value represents a Win32 status with S N bits set and R C bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusInfo">
            <summary>
            {New}
            This value represents a Win32 status with S R N bits set and C bit clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusInfoBits">
            <summary>
            {New}
            This value represents a Win32 status with S R N bits set and C bit clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusWarning">
            <summary>
            {New}
            This value represents a SUCCEEDED(hr) C bit set and S R N bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusWarningBits">
            <summary>
            {New}
            This value represents a SUCCEEDED(hr) C bit set and S R N bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusError">
            <summary>
            {New}
            This value represents a FAILED(hr) S C bits set with the R N bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessHResultNTStatusErrorBits">
            <summary>
            {New}
            This value represents a FAILED(hr) S C bits set with the R N bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessCustNTStatusSuccess">
            <summary>
            {New}
            This value represents a Win32 status with N C bits set and S R bits clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessCustNTStatusSuccessBits">
            <summary>
            {New}
            This value represents a Win32 status with N C bits set and S R bits clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessCustNTStatusInfo">
            <summary>
            {New}
            This value represents a Win32 status with R C N bits set and S bit clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessCustNTStatusInfoBits">
            <summary>
            {New}
            This value represents a Win32 status with R C N bits set and S bit clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAcccessCustNTStatusWarning">
            <summary>
            {New}
            This value represents a Win32 status with S N C bits set and R bit clear.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAcccessCustNTStatusWarningBits">
            <summary>
            {New}
            This value represents a Win32 status with S N C bits set and R bit clear.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessCustNTStatusError">
            <summary>
            {New}
            This value represents a Win32 status with S R N C bits set.
            See Xi Common Support ValueStatusCode class.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.BadServerAccessCustNTStatusErrorBits">
            <summary>
            {New}
            This value represents a Win32 status with S R N C bits set.
            See Xi Common Support ValueStatusCode class.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.GoodNonSpecific">
            <summary>
            The value is good. This is the general mask for all good values.
            Use Good Non Specific when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.GoodNonSpecificBits">
            <summary>
            The value is good. This is the general mask for all good values.
            Use Good Non Specific Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.GoodLocalOverride">
            <summary>
            The value has been Overridden. Typically this is means the 
            input has been disconnected and a manually entered value has 
            been written to data object.
            Use Good Local Overrid when the value is in the low order bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeStatusBits.GoodLocalOverrideBits">
            <summary>
            The value has been Overridden. Typically this is means the 
            input has been disconnected and a manually entered value has 
            been written to data object.
            Use Good Local Overrid Bits when the value is in the Xi define high order bits.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.XiStatusCodeGroups">
            <summary>
            This enumeration defines the unsigned integer values for the high order two bits of the 
            Xi Status Code.  These two bits are referred to as the StatusCodeStatusGroup.
            The values are given as two bit values from 0 to 3.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeGroups.StatusCodeStatusGroupBad">
            <summary>
            The 2-bit value for bad status. This value can be used to test for bad 
            status after shifting the Status Group bits of a Xi Status Code uint to its 
            low-order two bits. It can also be used to set the high-order two bits 
            to indicate bad status by setting the Xi Status Code uint to this value and 
            then shifting it to the high-order two bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeGroups.StatusCodeStatusGroupUncertain">
            <summary>
            The 2-bit value for uncertain status. This value can be used to test for uncertain 
            status after shifting the Status Group bits of a Xi Status Code uint to its 
            low-order two bits. It can also be used to set the high-order two bits 
            to indicate uncertain status by setting the Xi Status Code uint to this value and 
            then shifting it to the high-order two bits.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeGroups.StatusCodeStatusGroupServerBad">
            <summary>
            The 2-bit value for bad server access status. This value can be used to test for 
            bad server access status after shifting the Status Group bits of a Xi Status Code 
            uint to its low-order two bits. It can also be used to set the high-order two bits 
            to indicate bad server access status by setting the Xi Status Code uint to this 
            value and then shifting it to the high-order two bits.  Bad server access indicates 
            that the Xi server was unable to access the underlying data source (e.g. OPC DA server) 
            for the value.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeGroups.StatusCodeStatusGroupGood">
            <summary>
            The 2-bit value for good status. This value can be used to test for good status 
            after shifting the Status Group bits of a Xi Status Code uint to its low-order two bits. 
            It can also be used to set the high-order two bits to indicate good status by setting 
            the Xi Status Code uint to this value and then shifting it to the high-order two bits.  
            </summary>
        </member>
        <member name="T:Advosol.Paxi.HResultBitCodes">
            <summary>
            This enumeration defines value that are helpful 
            while encoding and decoding HRESULT codes and
            Win32 error codes.
            See Xi Common Support ValueStatusCode class.
            See http://msdn.microsoft.com/en-us/library/cc231196(v=PROT.10).aspx 
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.ShiftEncodingBits">
            <summary>
            Number of bit positions to shift the error type encoding
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.ShiftedEncodingMask">
            <summary>
            Mask for the four encoding bits
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.Failed">
            <summary>
            HRESULT Failed bit
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.Reserved">
            <summary>
            HRESULT Reserved bit - Used in encoding Win32 error into an HRESULT
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.Customer">
            <summary>
            HRESULT Customer bit - Used to indicate that this is an application defined error code
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.NTStatus">
            <summary>
            HRESULT NTStatus bit - Used to indicate that this HRESULT represents a Win32 error code
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.NTStatusSeverityMask">
            <summary>
            Win32 Severity Code mask - The top two bits of a Win32 error code generally represents the sevrity
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.NTStatusSeverityBit0">
            <summary>
            Win32 Severity Code low order bit
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.NTStatusSeverityBit2">
            <summary>
            Win32 Severity Code high order bit
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.FacilityMask">
            <summary>
            The mask for the Facility code of an HRESULT
            NOTE: Two bits take from Facilty Codes.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.CodeMask">
            <summary>
            The mask for the low 16 bits of the HRESULT that provides the specifics of the error
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.FacilityAndCodeMask">
            <summary>
            This maks is used to keep the combined Facility and Code
            NOTE: Two bits take from Facilty Codes.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.EncodingMask">
            <summary>
            The mask for the high-order four bits of an HRESULT
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.EncodingHResultSuccessNTStatusSuccess">
            <summary>
            HRESULT represents a SUCCEEDED(hr) after applying the EncodingMask
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.EncodingHResultFailNTStatusInfo">
            <summary>
            HRESULT represents a FAILED(hr) after applying the EncodingMask
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.EncodingNTStatusInformational">
            <summary>
            HRESULT represents a severity Informational Win32 error code after applying the EncodingMask
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.EncodingNTStatusWarning">
            <summary>
            HRESULT represents a severity Warning Win32 error code after applying the EncodingMask
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.EncodingNTStatusError">
            <summary>
            HRESULT represents a severity Error Win32 error code after applying the EncodingMask
            </summary>
        </member>
        <member name="F:Advosol.Paxi.HResultBitCodes.EncodingCustSuccessHResult">
            <summary>
            HRESULT represents a Customer SUCCEEDED(hr) after applying the EncodingMask
            </summary>
        </member>
        <member name="T:Advosol.Paxi.iStatusCodeAdditionalDetailType">
            <summary>
            The AdditionalDetailType indicates how the 16-bit AdditionalDetail 
            property of the StatusCode is used. Unused values are reserved. 
            </summary>
        </member>
        <member name="F:Advosol.Paxi.iStatusCodeAdditionalDetailType.AdditionalDetailTypeMask">
            <summary>
            This mask value may be used to keep only the Additional Detail Type code.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.iStatusCodeAdditionalDetailType.AdditionalDetailMask">
            <summary>
            Use this mask to keep the Additional Details Value.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.iStatusCodeAdditionalDetailType.NotUsed">
            <summary>
            The AdditionalDetail property is not used and should be ignored.
            Its value should be set to 0. 
            </summary>
        </member>
        <member name="F:Advosol.Paxi.iStatusCodeAdditionalDetailType.VendorSpecificDetail">
            <summary>
            The AdditionalDetail property contains a vendor-specific value. 
            </summary>
        </member>
        <member name="F:Advosol.Paxi.iStatusCodeAdditionalDetailType.VendorSpecificDetailBits">
            <summary>
            The AdditionalDetail property contains a vendor-specific value
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.iStatusCodeAdditionalDetailType.DefaultHResult">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of the default HRESULT (Facility Code = 0). The StatusCode.HRESULT() 
            method creates this HRESULT from the status code.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.iStatusCodeAdditionalDetailType.DefaultHResultBits">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of the default HRESULT (Facility Code = 0). The StatusCode.HRESULT() 
            method creates this HRESULT from the status code.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.iStatusCodeAdditionalDetailType.XiHResult">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of an Xi HRESULT (Facility Code = 0x777). The StatusCode.HRESULT() 
            method creates this HRESULT from the status code.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.iStatusCodeAdditionalDetailType.XiHResultBits">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of an Xi HRESULT (Facility Code = 0x777). The StatusCode.HRESULT() 
            method creates this HRESULT from the status code.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.iStatusCodeAdditionalDetailType.IO_ERROR_CODE">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of a FACILITY_IO_ERROR_CODE NTSTATUS (Facility Code = 4). The 
            StatusCode.HRESULT() method creates this HRESULT from the status code.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.iStatusCodeAdditionalDetailType.IO_ERROR_CODEBits">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of a FACILITY_IO_ERROR_CODE NTSTATUS (Facility Code = 4). The 
            StatusCode.HRESULT() method creates this HRESULT from the status code.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.iStatusCodeAdditionalDetailType.ITF_HResult">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of a COM FACILITY_ITF HRESULT (Facility Code = 4). The 
            StatusCode.HRESULT() method creates this HRESULT from the status code.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.iStatusCodeAdditionalDetailType.ITF_HResultBits">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of a COM FACILITY_ITF HRESULT (Facility Code = 4). The 
            StatusCode.HRESULT() method creates this HRESULT from the status code.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.iStatusCodeAdditionalDetailType.Win32HResult">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of a Win32 HRESULT (Facility Code = 5). The StatusCode.HRESULT() 
            method creates this HRESULT from the status code.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.iStatusCodeAdditionalDetailType.Win32HResultBits">
            <summary>
            The AdditionalDetail property contains the low order 16-bits 
            of a Win32 HRESULT (Facility Code = 5). The StatusCode.HRESULT() 
            method creates this HRESULT from the status code.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.iStatusCodeAdditionalDetailType.AdditionalErrorCode">
            <summary>
            This code is used to indicate that an additional HRESULT 
            accompanies this StatusCode.  The additional HRESULT is contained 
            in the HResult member of an ErrorInfo object that is located in the 
            ErrorInfo list contained in the DataValueArrays in which this StatusCode 
            is present.<br/>  
            This code does not have to be present if the Context was opened 
            with ContextOptions set to DebugErrorMessages using either the 
            Initiate() or ReInitiate() method.<br/>
            </summary>
        </member>
        <member name="F:Advosol.Paxi.iStatusCodeAdditionalDetailType.AdditionalErrorCodeBits">
            <summary>
            This code is used to indicate that an additional HRESULT 
            accompanies this StatusCode.  The additional HRESULT is contained 
            in the HResult member of an ErrorInfo object that is located in the 
            ErrorInfo list contained in the DataValueArrays in which this StatusCode 
            is present.<br/>  
            This code does not have to be present if the Context was opened 
            with ContextOptions set to DebugErrorMessages using either the 
            Initiate() or ReInitiate() method.<br/>
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.iStatusCodeAdditionalDetailType.VendorSpecific(System.UInt32)">
            <summary>
            This property returns the AdditionalDetail as a 16-bit vendor-specific value 
            if the AdditionalDetailType is set to AdditionalDetailType.VendorSpecific.  
            If the AdditionalDetailType is set to a different value, 0 is returned.
            </summary>
            <param name="statusCode">
            The 32-bit status code from which AdditionalDetail is to be extracted. 
            </param>
            <returns>
            The vendor-specific AdditionalDetail value. 0 if the AdditionalDetailType 
            indicates that the AdditionalDetail does not contain a vendor-specific value.
            </returns>
        </member>
        <member name="T:Advosol.Paxi.XiStatusCodeLimitBits">
            <summary>
            The Limit bits indicates whether a value is liimited or not.
            It is valid regardless of the values of the StatusBits and SubstatusBits. 
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeLimitBits.LimitBitsMask">
            <summary>
            This value may be used to mask (keep) the bits 
            used to convey the limited status of the value.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeLimitBits.LimitBitsShiftCount">
            <summary>
            This value provides the number of bits to shift 
            the limit bits into the low bits or into the 
            Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeLimitBits.NotLimited">
            <summary>
            The value is free to move up or down. This value is 
            used as the default value when the limit bits do not apply.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeLimitBits.NotLimitedBits">
            <summary>
            The value is free to move up or down. This value is 
            used as the default value when the limit bits do not apply.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeLimitBits.LowLimited">
            <summary>
            The value has ‘pegged’ at some lower limit and 
            cannot move any lower.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeLimitBits.LowLimitedBits">
            <summary>
            The value has ‘pegged’ at some lower limit and 
            cannot move any lower.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeLimitBits.HighLimited">
            <summary>
            The value has ‘pegged’ at some high limit and 
            cannot move any higher.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeLimitBits.HighLimitedBits">
            <summary>
            The value has ‘pegged’ at some high limit and 
            cannot move any higher.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeLimitBits.Constant">
            <summary>
            The value is a constant and cannot move.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeLimitBits.ConstantBits">
            <summary>
            The value is a constant and cannot move.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="T:Advosol.Paxi.XiStatusCodeHistoricalValueType">
            <summary>
            The HistoricalValueType is a 3-bit property that describes the 
            the historical data value associated with the Status Code.  
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.HistoricalValueTypeMask">
            <summary>
            This value may be used to mask (keep) the bits 
            used to convey the historical data value type.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.HistoricalValueTypeShiftCount">
            <summary>
            This value provides the number of bits to shift 
            the historical data value type bits into the 
            low bits or into the Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.NotUsed">
            <summary>
            The historical value type is not used. 
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.RawValue">
            <summary>
            The value is the raw value.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.RawValueBits">
            <summary>
            The value is the raw value.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.NoValue">
            <summary>
            No value exists in the journal for the requested data object 
            that meets the specified selection criteria.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.NoValueBits">
            <summary>
            No value exists in the journal for the requested data object 
            that meets the specified selection criteria.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.ExtraValue">
            <summary>
            More than one value exists at same timestamp. 
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.ExtraValueBits">
            <summary>
            More than one value exists at same timestamp. 
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.LostValue">
            <summary>
            Collection started / stopped / lost.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.LostValueBits">
            <summary>
            Collection started / stopped / lost.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.InterpolatedValue">
            <summary>
            The value has been interpolated.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.InterpolatedValueBits">
            <summary>
            The value has been interpolated.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.CalculatedValue">
            <summary>
            The value has been calculated.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.CalculatedValueBits">
            <summary>
            The value has been calculated.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.PartialCalculatedValue">
            <summary>
            The value is a calculated value for an incomplete interval.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.PartialCalculatedValueBits">
            <summary>
            The value is a calculated value for an incomplete interval.
            This value is in Xi Status Code bit position.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.HistoricalNoBoundingFlg">
            <summary>
            Flag bit for Historical with No Bounding Value
            </summary>
        </member>
        <member name="F:Advosol.Paxi.XiStatusCodeHistoricalValueType.HistoricalConversionErrorFlg">
            <summary>
            Flag bit for Historical Conversion Error
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.XiServerComponent">
            <summary>
            This component can be used in the Visual Studio Designer from the toolbox.
            The parameters and mode selections supported be the XiServer server access class can be configured in 
            the Design Editor in the same way Windows controls are configured.
            The definitions are in properties of this class and be accesed and modified by the application code.<br/>
            With all settings defiend in the design editor the application only need to call the Conncet() method 
            to establish a server connection.
            Server calls can be made through the Server property. Such calls are often not necessary.
            There are list compononts (XiDataList, XiEventList,..) for data list related server access that 
            simplify the the usage in a similar way.
            </summary>
        </member>
        <member name="F:Advosol.Paxi.Components.XiServerComponent.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiServerComponent.#ctor(System.ComponentModel.IContainer)">
            <summary>
            This constructor is called from the Visual Studio Designer created code.
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiServerComponent.#ctor">
            <summary>
            This constructor is only for Visual Studio Designer mode.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiServerComponent.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiServerComponent.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiServerComponent.Connect">
            <summary>
            Initiate a server context.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiServerComponent.Connect(Advosol.Paxi.OnComplete,System.Object)">
            <summary>
            
            </summary>
            <param name="onConnected"></param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiServerComponent.Disconnect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.XiServerComponent.FindObjects(Xi.Contracts.Data.FindCriteria,System.UInt32)">
            <summary>
            Synchronically find objects.
            </summary>
            <param name="findCriteria">Starting path and filters to be used.</param>
            <param name="maxReturn">The maximum number of objects the server may return.</param>
            <returns>The browsed objects</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiServerComponent.FindObjects(Xi.Contracts.Data.FindCriteria,System.UInt32,Advosol.Paxi.OnFindObjectsComplete,System.Object)">
            <summary>
            Asynchronically find objects.
            </summary>
            <param name="findCriteria">Starting path and filters to be used.</param>
            <param name="maxReturn">The maximum number of objects the server may return.</param>
            <param name="onComplete">Method that is to be called with the result upon completion of the asynchronous server call.</param>
            <param name="asyncState">Optional object that is passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiServerComponent.Identify">
            <summary>
            Get server description synchronously.
            This method can be called without the server context being initiated. However, in 
            this case the ServerDetails are not returned.
            </summary>
            <returns>Server description.</returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiServerComponent.Identify(Advosol.Paxi.OnIdentifyComplete,System.Object)">
            <summary>
            Get server description asynchronously.
            This method can be called without the server context being initiated. However, in 
            this case the ServerDetails are not returned.
            </summary>
            <param name="onComplete">Request complete handler.</param>
            <param name="asyncState">Object passed to the completion handler.</param>
        </member>
        <member name="M:Advosol.Paxi.Components.XiServerComponent.DiscoverEndpoints">
            <summary>
            Retrieve the endpoints configured in the server with synchronous server calls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiServerComponent.DiscoverEndpoints(Advosol.Paxi.OnDiscoverEndpointsComplete,System.Object)">
            <summary>
            Retrieve the endpoints configured in the server with asynchronous server calls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Advosol.Paxi.Components.XiServerComponent.Dispose">
            <summary>
            The processing is stopped, all associated objects are removed in the server and disposed.
            The object cannot be recreated. 
            This method must be called before the application terminates.
            </summary>
        </member>
        <member name="E:Advosol.Paxi.Components.XiServerComponent.Notifications">
            <summary>
            Notification of internal internal event, such as errors detected in the background poll handling.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiServerComponent.Settings">
            <summary>
            Xi Server access settings
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiServerComponent.OwnerForm">
            <summary>
            The Form object that uses this control and requires synchronization.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiServerComponent.UaDaNamespaceURIs">
            <summary>
            UA NamespaceURIs that match the Instance IDs (UA NodeIDs) persisted in the client application.
            If the application doesn't set this property before Connect() then the URIs are tried to be
            loaded from the file app.url.XML in the same directory as the app.exe executable.
            url is the UA server URL without the xxx://
            This XML file is auto-generated at Connect() if the application didn't set this property.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiServerComponent.Server">
            <summary>
            
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.XiServerComponent.IsConnected">
            <summary>
            
            </summary>
        </member>
        <member name="T:Advosol.Paxi.Components.ServerSettings">
            <summary>
            This class holds the parameters for the server access.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.ServerSettings.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.ServerUrl">
            <summary>
            The Server Discovery URL associated with this Xi server object.
            Set to null if the server access is to be handled through the embedded wrapper server
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.WrappedDAServerID">
            <summary>
            The ID and the access credentials of the OPC DA/UA server that is accessed thrrough the embedded wrapper server.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.WrappedHDAServerID">
            <summary>
            The ID and the access credentials of the OPC HDA/UA server that is accessed thrrough the embedded wrapper server.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.WrappedAEServerID">
            <summary>
            The ID and the access credentials of the OPC A/EUA server that is accessed thrrough the embedded wrapper server.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.EPnameRMgt">
            The name of preferred endpoint for the ResourceManagement contract.
            If the server configuration doesn't define an endpoint with this name then the endpoint
            that matches best the scheme and security preferences will be used.
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.EPnameRead">
            The name of preferred endpoint for the Read contract.
            If the server configuration doesn't define an endpoint with this name then the endpoint
            that matches best the scheme and security preferences will be used.
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.EPnameWrite">
            The name of preferred endpoint for the Write contract.
            If the server configuration doesn't define an endpoint with this name then the endpoint
            that matches best the scheme and security preferences will be used.
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.EPnameSubscribe">
            The name of preferred endpoint for the RegisterForCallbacks or Poll contract.
            If the server configuration doesn't define an endpoint with this name then the endpoint
            that matches best the scheme and security preferences will be used.
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.EPschemeRMgt">
            The preferred binding scheme ("http", "https", "net.tcp", "net.pipe") for the ResourceManagement contract.
            This definition is used when no preferred endpoint name is defined or such an endpoint does not
            exist in the server configuration.
            The available endpoint that best matches this definition will be used.
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.EPschemeRead">
            The preferred binding scheme ("http", "https", "net.tcp", "net.pipe") for the Read contract.
            This definition is used when no preferred endpoint name is defined or such an endpoint does not
            exist in the server configuration.
            The available endpoint that best matches this definition will be used.
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.EPschemeWrite">
            The preferred binding scheme ("http", "https", "net.tcp", "net.pipe") for the Write contract.
            This definition is used when no preferred endpoint name is defined or such an endpoint does not
            exist in the server configuration.
            The available endpoint that best matches this definition will be used.
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.EPschemeSubscribe">
            The preferred binding scheme ("http", "https", "net.tcp", "net.pipe") for the RegisterForCallbacks or Poll contract.
            This definition is used when no preferred endpoint name is defined or such an endpoint does not
            exist in the server configuration.
            The available endpoint that best matches this definition will be used.
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.EPsecureRMgt">
            The preferred communication security for the ResourceManagement contract.
            Of the server configured endpoints the one that best matches the preference definitions will be used.
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.EPsecureRead">
            The preferred communication security for the Read contract.
            Of the server configured endpoints the one that best matches the preference definitions will be used.
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.EPsecureWrite">
            The preferred communication security for the Write contract.
            Of the server configured endpoints the one that best matches the preference definitions will be used.
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.EPsecureSubscribe">
            The preferred communication security for the RegisterForCallbacks or Poll contract.
            Of the server configured endpoints the one that best matches the preference definitions will be used.
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.SubscribeAsCallbacks">
            <summary>
            Determnines the subscription handling mode, either callbacks or polling.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.CredUserName">
            <summary>
            User account name of the client credentials for Basic Authentication in the server access.
            The server endpoint configuration determines if this defintiin is required.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.CredPassword">
            <summary>
            Password of the client credentials for Basic Authentication in the server access.
            The server endpoint configuration determines if this defintiin is required.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.CredDomain">
            <summary>
            Domain name of the client credentials for Basic Authentication in the server access.
            The server endpoint configuration determines if this defintiin is required.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.ClientCertificateName">
            <summary>
            Name of the certificate that is used by the server to authenticate the client.
            This definition is only used when an endpoint with certificate configuration is being used.
            The name is the subject name of the certificate and the certificate has to be in the 
            Windows certificate store Current User - Personal
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.ServerCertificateName">
            <summary>
            Name of the certificate that is used by the client to authenticate the server.
            This definition is only used when an endpoint with certificate configuration is being used.
            The name is the subject name of the certificate and the certificate has to be in the 
            Windows certificate store LocalMachine - Personal
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.InitiateAppName">
            <summary>
            Name of the application that is passed to the server in the Initiate() call.
            The server may use this name to determine access rights.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.InitiateWSName">
            <summary>
            Name of the work station. This name is passed to the server in the Initiate() call.
            The server may use this name to determine access rights.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.InitiateLocaleId">
            <summary>
            LocaleID definition that is passed to the server in the Initiate() call.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.InitiateContextTimeoutSeconds">
            <summary>
            Requested context timeout interval in seconds.
            The server releases the context if the client doesn' make any server access for this time span.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.KeepContextAlive">
            <summary>
            This definition forces the client to make a Status() server access if no other server access happen.
            This ensures that the server doesn't release the context when then application pauses to make serve access.
            A value of 0 disables the keepAlive mechanism.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.ServerSettings.ContextOptions">
            <summary>
            Context options used in Initiate() to select the server diagnostic options.
            On return this is updated with the server revised options.
            How the server handles the option definitions is server specific.
            </summary>
        </member>
        <member name="T:Xi.Contracts.Data.ICallback">
            <summary>
            This interface is composed of methods to be implemented by the 
            client and called by the server to send data, alarms, and 
            events to the client.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.ICallback.Abort(System.String,Xi.Contracts.Data.ServerStatus,System.String)">
            <summary>
            This callback method is implemented by the client to 
            be notified when the server server state changes to Aborting.  
            Clients that use the poll interface instead of this callback 
            interface can add the ServerDescription object to a data 
            object list to be notified when the server state transitions   
            to the aborting state.<br/> 
            Heritage: The method corresponds to the ISO 9506 
            Manufacturing Messaging Specification (MMS) Abort service.<br/> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="serverStatus">
            The ServerStatus object that describes the server that is shutting down.
            </param>
            <param name="reason">
            The reason the context is being closed.
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.ICallback.InformationReport(System.String,System.UInt32,Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
            This callback method is implemented by the client 
            to receive data changes. <br/> 
             Servers send data changes to the client that have 
            not been reported to the client via this method.  
            Changes consists of:<br/>
            1) values for data objects that were added to the list,<br/> 
            2) values for data objects whose current values 
            have changed since the last time they were reported to the 
            client via this interface.  If a deadband filter has been 
            defined for the list, floating point values are not considered 
            to have changed unless they have changed by the deadband amount.<br/>
            3) historical values that meet the list filter criteria, 
            including the deadband.<br/> 
            Heritage: The method corresponds to the ISO 9506 
            Manufacturing Messaging Specification (MMS) Information 
            Report service.<br/> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier of the list for which data changes are being 
            reported.
            </param>
            <param name="updatedValues">
            </param>
        </member>
        <member name="M:Xi.Contracts.Data.ICallback.EventNotification(System.String,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.EventMessage})">
            <summary>
            This callback method is implemented by the client to 
            receive alarms and events.<br/> 
             Servers send event messages to the client via this 
            interface.  Event messages are sent when there has been a 
            change to the specified event list. A new alarm or event 
            that has been added to the list, a change to an alarm already 
            in the list, or the deletion of an alarm from the list 
            constitutes a change to the list.<br/>
            Once an event has been reported from the list, it 
            is automatically deleted from the list.  Alarms are only 
            deleted from the list when they transition to inactive and 
            acknowledged.  <br/>
            Heritage: The method corresponds to the ISO 9506 
            Manufacturing Messaging Specification (MMS) Event Notification 
            service.<br/> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="listId">
            The identifier of the list for which alarms/events are being 
            reported.
            </param>
            <param name="eventList">
            The list of alarms/events are being reported.
            </param>
        </member>
        <member name="T:Xi.Contracts.Data.IRegisterForCallback">
            <summary>
            This interface is used to register for callbacks so that list updates are passed
            back asynchronously.
            </summary>
        </member>
        <member name="M:Xi.Contracts.Data.IRegisterForCallback.SetCallback(System.String,System.UInt32,System.TimeSpan)">
            <summary>
            This method is invoked to allow the client to set or change the 
            keepAliveSkipCount and callbackRate. The first time this method is 
            invoked server obtains the callback interface from the client.  
            Therefore, this method must be called at least once for each 
            callback endpoint to enable the server to make the callbacks.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="keepAliveSkipCount">
            The client-requested keepAliveSkipCount that the server may negotiate up 
            or down. The keepAliveSkipCount indicates the number of consecutive 
            UpdateRate cycles for a list that occur with nothing to send before an empty 
            callback is sent to indicate a keep-alive message. For example, if the value 
            of this parameter is 1, then a keep-alive callback will be sent each UpdateRate 
            cycle for each list assigned to the callback for which there is nothing to send. 
            A value of 0 indicates that keep-alives are not to be sent for any list assigned 
            to the callback.
            </param>
            <param name="callbackRate">
            Optional rate that specifies how often callbacks are to be sent to the client. <br/> 
            <br/>TimeSpan.Zero if not used. When not used, the UpdateRate of the lists assigned to this 
            callback dictates when callbacks are sent.  <br/>
            When present, the server buffers list outputs when the callback rate is longer 
            than list UpdateRates.  <br/>
            </param>
            <returns>
            The results of the operation, including the negotiated keep-alive skip count and callback rate.
            </returns>
        </member>
        <member name="T:Advosol.Paxi.Components.EventFilter">
            <summary>
            Filter defintiions for the EventView control.
            </summary>
        </member>
        <member name="M:Advosol.Paxi.Components.EventFilter.#ctor">
            <summary>
            Constructor tht initializes default values.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.EventFilter.EventTypes">
            <summary>
            Event typee Simple, Tracking, Condition
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.EventFilter.EventCategories">
            <summary>
            OPC AE event category identification numbers
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.EventFilter.LowSeverity">
            <summary>
            Lower limit serverity number 1..1000
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.EventFilter.HighSeverity">
            <summary>
            Upper limit sevderity number 1..1000
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.EventFilter.AreaList">
            <summary>
            List of areas names.
            </summary>
        </member>
        <member name="P:Advosol.Paxi.Components.EventFilter.SourceList">
            <summary>
            List of event source names.
            </summary>
        </member>
    </members>
</doc>
